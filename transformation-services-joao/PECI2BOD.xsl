<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions"
    xmlns:peci="urn:com.workday/peci" xmlns:nga="http://www.ngahr.com/ngapexxml/1"
    xmlns:hr="http://www.hr-xml.org/3" xmlns:oa="http://www.openapplications.org/oagis/9"
    xmlns:uuid="java:java.util.UUID" xmlns:ptdf="urn:com.workday/peci/tdf" xmlns:saxon="http://saxon.sf.net/"
    exclude-result-prefixes="xsl xs fn peci ptdf uuid saxon" extension-element-prefixes="saxon">      
    <xsl:output method="xml" version="1.0" encoding="UTF-8" indent="yes"/>  
    <xsl:param name="logicalID"/>
    <xsl:param name="releaseID"/>
    <xsl:param name="systemEnvironmentCode"/>
    <xsl:param name="languageCode"/>
    <xsl:param name="referenceID"/> 
    <xsl:variable name="errorMsg" select="''" saxon:assignable="yes"/>
    <xsl:variable name="counter" select="0" saxon:assignable="yes"/>    
    <xsl:variable name="CustomerConfig" select="//CustomerConfig/Rows"/>
    <xsl:variable name="GCC" select="substring($logicalID,1,3)"/>
    <xsl:variable name="LCC" select="substring($logicalID,5,5)"/>
    <xsl:variable name="usedPECIElements" select="''" saxon:assignable="yes"/>     
    <xsl:variable name="positionHomeOrHost" select="''" saxon:assignable="yes"/>
    <xsl:variable name="payGroupCountry" select="''" saxon:assignable="yes"/>
    <xsl:variable name="checkHomeCountry" select="''" saxon:assignable="yes"/>
    <xsl:variable name="checkHostCountry" select="''" saxon:assignable="yes"/>
    <xsl:variable name="compTransRescindFlag" select="''" saxon:assignable="yes"/>
    <xsl:variable name="compTransLaterDateFlag" select="''" saxon:assignable="yes"/>
    <xsl:variable name="compTransEarlierDateFlag" select="''" saxon:assignable="yes"/>
    <xsl:variable name="rehireRescindFlag" select="''" saxon:assignable="yes"/>
    <xsl:variable name="pcoWMTableDate" select="''" saxon:assignable="yes"/>
    <xsl:variable name="pciWMTableDate" select="''" saxon:assignable="yes"/>
    <xsl:variable name="bodIdentifier" select="''" saxon:assignable="yes"/>
    <xsl:variable name="effectiveMomentLP" select="''" saxon:assignable="yes"/>
    <xsl:variable name="DTAEvent" select="''" saxon:assignable="yes"/>
    <xsl:variable name="PGIEvent" select="''" saxon:assignable="yes"/>
    <xsl:variable name="isAddedDTA" select="''" saxon:assignable="yes"/>
    <xsl:variable name="translationTable" select="''" saxon:assignable="yes"/>
    <xsl:variable name="Related_Person" select="''" saxon:assignable="yes"/>
    <xsl:variable name="removeChars" select="' []_()-/.,@#$%^*!'"/>
    <xsl:variable name="companyTransferDetails" select="/CLUBBEDXML/companyTransferDetails"/>
    <xsl:variable name="secondaryLastName">
        <xsl:for-each select="/CLUBBEDXML/TranslationTable/Rows[MAPPING = 'SecondaryLastName']">
            <value><xsl:value-of select="VALUE"/></value>
        </xsl:for-each>
    </xsl:variable>
    
    <xsl:template match="/">   
        <xsl:call-template name="nga:ProcessPayServ"/>                
    </xsl:template>
    
    <xsl:template name="nga:ProcessPayServ">
        <nga:ProcessPayServ>        
            <xsl:for-each select="//peci:Workers_Effective_Stack">
                <xsl:variable name="countryList" select="distinct-values(//peci:Person_Communication/peci:Address/peci:Country)"/>            
                <xsl:variable name="countryAddressMapping">
                    <xsl:for-each select="/CLUBBEDXML/TranslationTable/Rows[COUNTRY=$countryList and (MAPPING='PECIHomeAddress' or MAPPING='PECILocalAddress')]">                                       
                        <xsl:copy-of select="."/>
                    </xsl:for-each>
                </xsl:variable>
                <xsl:variable name="checkCountry" select="distinct-values($countryAddressMapping/Rows/COUNTRY)"/>
                <xsl:variable name="addressUsageBehavior">
                    <xsl:for-each select="/CLUBBEDXML/TranslationTable/Rows[MAPPING='AddressUsageBehavior']">                                       
                        <xsl:copy-of select="."/>
                    </xsl:for-each>
                </xsl:variable>
                <xsl:variable name="sgReligionEthnicity">
                    <xsl:for-each select="/CLUBBEDXML/TranslationTable/Rows[(MAPPING='LocalDataReligion' or MAPPING='LocalDataEthnicity') and COUNTRY='SG']"> 
                        <xsl:copy-of select="."/>
                    </xsl:for-each>
                </xsl:variable>
                
                <xsl:variable name="CreationDateTime" select="substring(peci:Summary/peci:Integration_Sent_On,1,19)"/>   
                <saxon:assign name ="payGroupCountry" select="peci:Summary/peci:Pay_Group_Country"/>
           
               
                <xsl:for-each select="peci:Worker">
                    <xsl:variable name="workerPointer" select="position()"/>
                    <xsl:variable name="personID" select="peci:Worker_Summary/peci:Employee_ID"/>
                    <xsl:variable name="countHIR-RwithHIR">
                        <xsl:value-of select="count(../peci:Worker[peci:Worker_Summary/peci:Employee_ID= $personID]/peci:Effective_Change[peci:Derived_Event_Code='HIR-R' or peci:Derived_Event_Code = 'HIR'])"/>
                    </xsl:variable>
                    <xsl:variable name="positionHIR-R">
                        <xsl:for-each select="../peci:Worker[peci:Worker_Summary/peci:Employee_ID= $personID]/peci:Effective_Change">
                            <xsl:if test="peci:Derived_Event_Code='HIR-R'">
                                <xsl:value-of select="position()"/>
                            </xsl:if> 
                        </xsl:for-each>
                    </xsl:variable>                  
                    <xsl:variable name="positionHIR">
                        <xsl:for-each select="../peci:Worker[peci:Worker_Summary/peci:Employee_ID= $personID]/peci:Effective_Change">
                            <xsl:if test="peci:Derived_Event_Code='HIR'">
                                <xsl:value-of select="position()"/>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:variable>
                    <xsl:variable name="checkHIR-RwithHIR">
                        <xsl:choose>
                            <xsl:when test="$countHIR-RwithHIR > 1"> 
                                <xsl:choose>
                                    <xsl:when test="$positionHIR-R &lt; $positionHIR">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:value-of select="'N'"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="'N'"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>   
                   
                    
                    <!--    Loop for every peci:Effective Change section    -->
                    <xsl:for-each select="peci:Effective_Change">
                        <xsl:variable name="checkPGIEvent">
                            <xsl:choose>
                                <xsl:when test="peci:Derived_Event_Code = ('PGI') and string-length(peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue) > 0 and (peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue != peci:Additional_Information/ptdf:OrganizationID)">
                                    <xsl:value-of select="'Y'"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="'N'"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="checkDTAEvent">
                            <xsl:choose>
                                <xsl:when test="peci:Derived_Event_Code = ('DTA') and string-length(peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue) > 0 and (peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue != peci:Additional_Information/ptdf:OrganizationID)">
                                    <xsl:value-of select="'N'"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="'N'"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="employeeIDChgOrg">
                            <xsl:choose>
                                <xsl:when test="string-length(peci:Position[not(peci:Position_End_Date)]/ptdf:OrganizationID/@peci:priorValue) > 0">
                                    <xsl:value-of select="concat(../peci:Worker_Summary/peci:Employee_ID,peci:Position[not(peci:Position_End_Date)]/ptdf:OrganizationID/@peci:priorValue)"/>  
                                    <xsl:for-each select="../peci:Worker_Summary/peci:Employee_ID">
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:call-template name="print-field-xpath">                                       
                                                </xsl:call-template>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </xsl:for-each>  
                                    <xsl:for-each select="peci:Position[not(peci:Position_End_Date)]/ptdf:OrganizationID">
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:call-template name="print-field-xpath">                                       
                                                </xsl:call-template>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </xsl:for-each>  
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="concat(../peci:Worker_Summary/peci:Employee_ID, peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue)"/>
                                    <xsl:for-each select="../peci:Worker_Summary/peci:Employee_ID">
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:call-template name="print-field-xpath">                                       
                                                </xsl:call-template>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </xsl:for-each>  
                                    <xsl:for-each select="peci:Additional_Information/ptdf:OrganizationID">
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:call-template name="print-field-xpath">                                       
                                                </xsl:call-template>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </xsl:for-each>  
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="orgID">
                            <xsl:choose>
                                <xsl:when test="peci:Position[not(peci:Position_End_Date)]/ptdf:OrganizationID">
                                    <xsl:value-of select="peci:Position[not(peci:Position_End_Date)]/ptdf:OrganizationID"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="peci:Additional_Information/ptdf:OrganizationID"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="companyTransferOrgID">
                            <xsl:choose>
                                <xsl:when test="string-length(peci:Position[not(peci:Position_End_Date)]/ptdf:OrganizationID/@peci:priorValue) > 0">
                                    <xsl:value-of select="peci:Position[not(peci:Position_End_Date)]/ptdf:OrganizationID/@peci:priorValue"/>
                                    <xsl:for-each select="peci:Position[not(peci:Position_End_Date)]/ptdf:OrganizationID/@peci:priorValue">
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:call-template name="print-field-xpath">                                       
                                                </xsl:call-template>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </xsl:for-each>  
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue"/>
                                    <xsl:for-each select="peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue">
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:call-template name="print-field-xpath">                                       
                                                </xsl:call-template>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </xsl:for-each>  
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        
                        <!--    International Assignment Variables      -->
                        <saxon:assign name="positionHomeOrHost" select="peci:Position[not(peci:Position_End_Date)]/ptdf:PositionHomeOrHost[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                        <xsl:variable name="multipleCountries">
                            <xsl:for-each select="tokenize(peci:Additional_Information/ptdf:MultipleCountries,'\|')">
                                <country>
                                    <xsl:value-of select="."/>
                                </country>
                            </xsl:for-each>
                        </xsl:variable> 
                        
                        <xsl:variable name="tempCheckHostCountry">
                            <xsl:if test="$positionHomeOrHost = 'Host'">
                                <xsl:for-each select="$multipleCountries/country">
                                    <xsl:if test=". = $payGroupCountry">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>                          
                                </xsl:for-each>
                            </xsl:if>
                        </xsl:variable>                        
                        
                        <xsl:variable name="tempCheckHomeCountry">
                            <xsl:if test="$positionHomeOrHost = 'Home'">
                                <xsl:for-each select="$multipleCountries/country">
                                    <xsl:if test=". = $payGroupCountry">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>                           
                                </xsl:for-each>
                            </xsl:if>
                        </xsl:variable>   
                        
                        <saxon:assign name="checkHomeCountry" select="$tempCheckHomeCountry"/>
                        <saxon:assign name="checkHostCountry" select="$tempCheckHostCountry"/>
                        
                        <xsl:variable name="employeePriorLCC">
                            <xsl:value-of select="//CLUBBEDXML/CustomerConfig/Rows[TRANS_TYPE = 'PECI' and MAPPING = 'LCCMapping' and KEY = $companyTransferOrgID]/VALUE"/>
                        </xsl:variable>
                        <xsl:variable name="employeeCurrentLCC">
                            <xsl:value-of select="//CLUBBEDXML/CustomerConfig/Rows[TRANS_TYPE = 'PECI' and MAPPING = 'LCCMapping' and KEY = $orgID]/VALUE"/>
                        </xsl:variable>   
                        
                        
                        <xsl:variable name="personID" select="../peci:Worker_Summary/peci:Employee_ID"/>  
                        <saxon:assign name ="pcoWMTableDate" select="substring($companyTransferDetails/results[HRIS_ID = $personID][STATUS = 'TERMINATED']/TERMINATION_DATE,1,10)"/>
                        <saxon:assign name ="pciWMTableDate" select="substring($companyTransferDetails/results[HRIS_ID = $personID][STATUS = 'ACTIVE']/HIRE_DATE,1,10)"/> 
                        <xsl:variable name="termWMTableOrgID" select="substring-after($companyTransferDetails/results[HRIS_ID = $personID][STATUS = 'TERMINATED']/HRIS_EE_ID,$personID)"/>
                        <xsl:variable name="hireWMTableOrgID" select="substring-after($companyTransferDetails/results[HRIS_ID = $personID][STATUS = 'ACTIVE']/HRIS_EE_ID,$personID)"/>  
                       
                        
                        <!-- Flag for CompanyTransfer Rescinds  -->
                        <xsl:variable name="companyTransferRescind"> 
                            <xsl:choose>
                                <xsl:when test="peci:Derived_Event_Code = 'PCO' and string-length($pcoWMTableDate) > 0">
                                    <xsl:if test="(xs:date(substring(peci:Effective_Moment,1,10)) - xs:dayTimeDuration('P1D') = xs:date($pcoWMTableDate)) and $hireWMTableOrgID = $orgID">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:when>
                                <xsl:when test="peci:Derived_Event_Code = 'PCI' and string-length($pciWMTableDate) > 0">
                                    <xsl:if test="(xs:date(substring(peci:Effective_Moment,1,10)) = xs:date($pciWMTableDate)) and $termWMTableOrgID = $orgID">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:when>
                                <xsl:when test="peci:Derived_Event_Code = 'ORG' and string-length($pciWMTableDate) > 0 and string-length($pcoWMTableDate) > 0">
                                    <xsl:if test="(xs:date(substring(peci:Effective_Moment,1,10)) - xs:dayTimeDuration('P1D') = xs:date($pcoWMTableDate)) and $hireWMTableOrgID = $companyTransferOrgID or
                                        (xs:date(substring(peci:Effective_Moment,1,10)) = xs:date($pciWMTableDate)) and $termWMTableOrgID = $orgID">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:when>                              
                            </xsl:choose>
                        </xsl:variable>
                        <saxon:assign name ="compTransRescindFlag" select="$companyTransferRescind"/>
                        
                        <!-- Flag for CompanyTransfer to Earlier Date  -->
                        <xsl:variable name="companyTransferToEarlier">
                            <xsl:choose>
                                <xsl:when test="peci:Derived_Event_Code = 'PCO' and string-length($pcoWMTableDate) > 0">
                                    <xsl:if test="(xs:date(substring(peci:Effective_Moment,1,10)) - xs:dayTimeDuration('P1D') &lt; xs:date($pcoWMTableDate)) and $termWMTableOrgID = $orgID">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:when>
                                <xsl:when test="peci:Derived_Event_Code = 'PCI' and string-length($pciWMTableDate) > 0">
                                    <xsl:if test="(xs:date(substring(peci:Effective_Moment,1,10)) &lt; xs:date($pciWMTableDate)) and $hireWMTableOrgID = $orgID">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:when>
                                <xsl:when test="peci:Derived_Event_Code = 'ORG' and string-length($pciWMTableDate) > 0 and string-length($pcoWMTableDate) > 0">
                                    <xsl:if test="((xs:date(substring(peci:Effective_Moment,1,10)) - xs:dayTimeDuration('P1D') &lt; xs:date($pcoWMTableDate)) and $termWMTableOrgID = $companyTransferOrgID) or
                                        (xs:date(substring(peci:Effective_Moment,1,10)) &lt; xs:date($pciWMTableDate)) and $hireWMTableOrgID = $orgID">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:when>                            
                            </xsl:choose>                         
                        </xsl:variable>
                        <saxon:assign name ="compTransEarlierDateFlag" select="$companyTransferToEarlier"/>     
                        
                        <!-- Flag for CompanyTransfer to Later Date  -->
                        <xsl:variable name="companyTransferToLater">
                            <xsl:choose>
                                <xsl:when test="peci:Derived_Event_Code = 'PCO' and string-length($pcoWMTableDate) > 0">
                                    <xsl:if test="(xs:date(substring(peci:Effective_Moment,1,10)) - xs:dayTimeDuration('P1D') = xs:date($pcoWMTableDate)) and $termWMTableOrgID = $orgID">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:when>
                                <xsl:when test="peci:Derived_Event_Code = 'PCI' and string-length($pciWMTableDate) > 0">
                                    <xsl:if test="(xs:date(substring(peci:Effective_Moment,1,10)) &gt; xs:date($pciWMTableDate)) and $hireWMTableOrgID = $orgID">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:when>
                                <xsl:when test="peci:Derived_Event_Code = 'ORG' and string-length($pciWMTableDate) > 0 and string-length($pcoWMTableDate) > 0">
                                    <xsl:if test="((xs:date(substring(peci:Effective_Moment,1,10)) - xs:dayTimeDuration('P1D') &gt; xs:date($pcoWMTableDate)) and $termWMTableOrgID = $companyTransferOrgID) or
                                        (xs:date(substring(peci:Effective_Moment,1,10)) &gt; xs:date($pciWMTableDate)) and $hireWMTableOrgID = $orgID">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:when>                              
                            </xsl:choose>                         
                        </xsl:variable>
                        <saxon:assign name ="compTransLaterDateFlag" select="$companyTransferToLater"/>    
                        
                       
                      
                      
                        <!-- LogicalID for HIR and Hire CompanyTransfer -->
                        <xsl:variable name="checkLogicalID">
                            <xsl:choose>
                                <xsl:when test="$LCC = '00000'">
                                    <xsl:choose>
                                        <xsl:when test="string-length($employeeCurrentLCC) > 0">
                                            <xsl:value-of select="concat(substring($logicalID,1,3),'-',$employeeCurrentLCC,'-',substring($logicalID,11,4))"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:value-of select="$logicalID"/>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="$logicalID"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <!-- LogicalID for Termination CompanyTransfer for ORG, PGI and DTA with OrgID priorValue -->
                        <xsl:variable name="checkPriorLogicalID">
                            <xsl:choose>
                                <xsl:when test="$LCC = '00000'">
                                    <xsl:choose>
                                        <xsl:when test="string-length($employeePriorLCC) > 0">
                                            <xsl:value-of select="concat(substring($logicalID,1,3),'-',$employeePriorLCC,'-',substring($logicalID,11,4))"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:value-of select="$logicalID"/>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="$logicalID"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                     
                    	<xsl:variable name="payGroupID">
                    	    <xsl:choose>
                    	        <xsl:when test="peci:Position[not(peci:Position_End_Date)]/ptdf:PayGroupCode">
                    	            <xsl:value-of select="peci:Position[not(peci:Position_End_Date)]/ptdf:PayGroupCode"/>
                    	            <xsl:for-each select="peci:Position[not(peci:Position_End_Date)]/ptdf:PayGroupCode">
                    	                <xsl:call-template name="usedPECIData">
                    	                    <xsl:with-param name="xpath">
                    	                        <xsl:call-template name="print-field-xpath">                                       
                    	                        </xsl:call-template>
                    	                    </xsl:with-param>
                    	                </xsl:call-template>
                    	            </xsl:for-each>      
                    	        </xsl:when>
                    	        <xsl:otherwise>
                    	            <xsl:value-of select="peci:Additional_Information/ptdf:PayGroupCode"/>
                    	            <xsl:for-each select="peci:Additional_Information/ptdf:PayGroupCode">
                    	                <xsl:call-template name="usedPECIData">
                    	                    <xsl:with-param name="xpath">
                    	                        <xsl:call-template name="print-field-xpath">                                       
                    	                        </xsl:call-template>
                    	                    </xsl:with-param>
                    	                </xsl:call-template>
                    	            </xsl:for-each>         
                    	        </xsl:otherwise>
                    	    </xsl:choose>
                    	</xsl:variable>
                                      
                        <xsl:variable name="employeeID" select="concat(../peci:Worker_Summary/peci:Employee_ID, $orgID)"/>                      
                        
                        <xsl:variable name="checkEmployment">
                            <xsl:for-each select="//CLUBBEDXML/Employment/results[STATUS = 'ACTIVE']">
                                <xsl:if test="HRIS_EE_ID = $employeeID">
                                    <xsl:value-of select="substring(HIRE_DATE,1,10)"/>
                                    <text>+ </text>
                                </xsl:if>
                            </xsl:for-each>
                        </xsl:variable>                        
                        
                        <xsl:variable name="DBHireDate">
                            <xsl:value-of select="substring-before($checkEmployment,'+ ')"/>
                        </xsl:variable>        
                        
                        <xsl:variable name="peciHireDate">
                            <xsl:value-of select="substring(peci:Worker_Status/peci:Hire_Date,1,10)"/>
                        </xsl:variable>        
                          
                        <xsl:variable name="varCountryCode" select="substring($checkLogicalID,5,2)"/>
                        
                        <xsl:variable name="personIDwithTERM">
                            <xsl:for-each select="//CLUBBEDXML/persons/person">
                                <xsl:if test="personId = $personID">
                                    <xsl:value-of select="'Y'"/>
                                </xsl:if>                                
                            </xsl:for-each>
                        </xsl:variable>
                        
                        <xsl:variable name="processHireFlag">
                            <xsl:choose>
                                <xsl:when test="peci:Derived_Event_Code = 'PCI' and $compTransRescindFlag !='Y' and $compTransEarlierDateFlag != 'Y' and $compTransLaterDateFlag != 'Y'">
                                    <xsl:value-of select="'Y'"/>
                                </xsl:when>
                                <xsl:when test="peci:Derived_Event_Code = 'HIR' and $personIDwithTERM = 'Y'">
                                    <xsl:value-of select="'Y'"/>
                                </xsl:when>
                                <xsl:when test="peci:Derived_Event_Code = 'HIR' and $checkHIR-RwithHIR != 'Y' and string-length($personIDwithTERM) = 0 and ($checkEmployment = '' or $peciHireDate = $DBHireDate)">
                                    <xsl:value-of select="'Y'"/>
                                </xsl:when>
                                <xsl:when test="peci:Derived_Event_Code = 'HIR' and $checkHIR-RwithHIR != 'Y' and ($checkEmployment = '' or $peciHireDate = $DBHireDate)">
                                    <xsl:value-of select="'Y'"/>
                                </xsl:when>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="positionCount">
                            <xsl:value-of select="count(peci:Position[not(peci:Position_End_Date)])"/>
                        </xsl:variable>
                       
                        <xsl:variable name="hireDateChangeFlag">
                            <xsl:if test="peci:Derived_Event_Code = 'HIR' and $checkHIR-RwithHIR != 'Y' and $checkEmployment != '' and $peciHireDate != $DBHireDate and string-length($processHireFlag)=0">
                                <xsl:value-of select="'Y'"></xsl:value-of>
                            </xsl:if>
                        </xsl:variable>    
                        <xsl:variable name="checkLCC" select="substring($checkLogicalID,5,5)"/>
                        
                        <!--    Flag for Rehire Rescind     -->
                        <xsl:variable name="rehireRescind">
                            <xsl:if test="peci:Derived_Event_Code = 'HIR-R' and xs:date(substring(peci:Effective_Moment,1,10)) > xs:date(peci:Worker_Status/peci:Hire_Date)">
                                <xsl:value-of select="'Y'"/>
                            </xsl:if>
                        </xsl:variable>
                        <saxon:assign name ="rehireRescindFlag" select="$rehireRescind"/>
                        
                    
                        <xsl:choose>
                            <xsl:when test="$positionCount >= 2">
                                <!-- ******************************************** -->
                                <!-- **  Multi Valid Position Section Process  ** -->
                                <!-- ******************************************** -->
                                <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                    <xsl:with-param name="bodType" select="'multiPositionSectionRejection'"/>
                                    <xsl:with-param name="creationDateTime"
                                        select="$CreationDateTime"/>
                                    <xsl:with-param name="bodid"
                                        select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                    <xsl:with-param name="actionCode" select="'REJECT'"/>
                                    <xsl:with-param name="personID" select="$personID"/>
                                    <xsl:with-param name="employeeID" select="$employeeID"/>
                                    <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                    <xsl:with-param name="effectiveMomentDate"
                                        select="substring(../../peci:Effective_Moment,1,10)"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                                <!-- ******************************************** -->
                                <!-- **   Process PCI and HIR Hire Events      ** -->
                                <!-- ******************************************** -->
                                <xsl:if test="$processHireFlag = 'Y'">
                                    <xsl:call-template name="peci:TransfromPECI2BODHire">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'ADD'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="$employeeID"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>                                      
                                        <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                        <xsl:with-param name="checkCountry" select="$checkCountry"/>
                                        <xsl:with-param name="addressUsageBehavior" select="$addressUsageBehavior"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>     
                                        <xsl:with-param name="checkPGIEvent" select="$checkPGIEvent"/>
                                    </xsl:call-template>
                                </xsl:if>    
                                
                                <xsl:if test="$hireDateChangeFlag = 'Y'">
                                    <xsl:for-each select="peci:Worker_Status">
                                        <xsl:call-template name="peci:ProcessPayServEmpDataChange">                                 
                                            <xsl:with-param name="bodType"
                                                select="'workerStatusActive'"/>
                                            <xsl:with-param name="creationDateTime"
                                                select="$CreationDateTime"/>
                                            <xsl:with-param name="bodid"
                                                select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                            <xsl:with-param name="actionCode" select="'CHANGE'"/>
                                            <xsl:with-param name="personID" select="$personID"/>
                                            <xsl:with-param name="employeeID" select="$employeeID"/>
                                            <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                            <xsl:with-param name="effectiveMomentDate"
                                                select="substring(../peci:Effective_Moment,1,10)"/>
                                            <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                        </xsl:call-template>
                                    </xsl:for-each>
                                </xsl:if>                                    
                                
                                <!-- ******************************************** -->
                                <!-- **  Process ORG Event for CompanyTransfer ** -->
                                <!-- ******************************************** -->
                                <xsl:if test="peci:Derived_Event_Code = ('ORG') and $compTransRescindFlag != 'Y'">
                                    <!--    Generate Termination (CompanyTransfer) BOD    -->
                                    <xsl:call-template name="peci:TransfromPECI2BODTermination">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'ADD'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="$employeeIDChgOrg"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkPriorLogicalID"/>
                                    </xsl:call-template>
                                    <!--    Generate Hire (CompanyTransfer) BOD       -->
                                    <xsl:call-template name="peci:TransfromPECI2BODHire">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'ADD'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="$employeeID"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                        <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                        <xsl:with-param name="checkCountry" select="$checkCountry"/>
                                        <xsl:with-param name="addressUsageBehavior" select="$addressUsageBehavior"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>    
                                        <xsl:with-param name="checkPGIEvent" select="$checkPGIEvent"/>
                                    </xsl:call-template>
                                </xsl:if>
                                
                                <!-- ******************************************** -->
                                <!-- ** Process PGO Event for CompanyTransfer  ** -->
                                <!-- ******************************************** -->
                                <xsl:if test="$checkPGIEvent = 'Y'">
                                    <!--    Generate Termination (CompanyTransfer) BOD    -->
                                    <xsl:call-template name="peci:TransfromPECI2BODTermination">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'ADD'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="$employeeIDChgOrg"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkPriorLogicalID"/>
                                    </xsl:call-template>
                                    <!--    Generate Hire (CompanyTransfer) BOD       -->
                                    <xsl:call-template name="peci:TransfromPECI2BODHire">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'ADD'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="$employeeID"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                        <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                        <xsl:with-param name="checkCountry" select="$checkCountry"/>
                                        <xsl:with-param name="addressUsageBehavior" select="$addressUsageBehavior"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>    
                                        <xsl:with-param name="checkPGIEvent" select="$checkPGIEvent"/>
                                    </xsl:call-template>
                                </xsl:if>
                                
                                <!-- ******************************************** -->
                                <!-- ** Process DTA Event for CompanyTransfer  ** -->
                                <!-- ******************************************** -->
                                <xsl:if test="$checkDTAEvent = 'Y'">
                                    <!--    Generate Termination (CompanyTransfer) BOD    -->
                                    <xsl:call-template name="peci:TransfromPECI2BODTermination">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'ADD'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="$employeeIDChgOrg"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkPriorLogicalID"/>
                                    </xsl:call-template>
                                    <!--    Generate Hire (CompanyTransfer) BOD       -->
                                    <xsl:call-template name="peci:TransfromPECI2BODHire">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'ADD'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="$employeeID"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                        <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                        <xsl:with-param name="checkCountry" select="$checkCountry"/>
                                        <xsl:with-param name="addressUsageBehavior" select="$addressUsageBehavior"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                    </xsl:call-template>
                                </xsl:if>                                
                               
                                
                                <!-- ******************************************** -->
                                <!-- ** Process Local Payroll Data during Hire ** -->
                                <!-- ******************************************** -->
                                <!--    Switzerland Local Payroll Data on Regligion during hiring. -->
                                <xsl:if test="(peci:Derived_Event_Code = 'PCI') or (peci:Derived_Event_Code = 'HIR' and $checkHIR-RwithHIR != 'Y') or peci:Derived_Event_Code = ('ORG') or $checkPGIEvent = 'Y' or  $checkDTAEvent = 'Y'">
                                    <xsl:for-each select="peci:Personal/peci:Religion">
                                        <xsl:if test="$varCountryCode ='CH'">
                                            <xsl:variable name="actionCode">
                                                <xsl:call-template name="actionCodeTranslation"/>
                                            </xsl:variable>
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'localReligionCH'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="$actionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="substring(../../peci:Effective_Moment,1,10)"/>
                                            </xsl:call-template>
                                        </xsl:if>
                                    </xsl:for-each>
                                    
                                    <!--    Switzerland Local Payroll Data for VISA during hiring event.   -->
                                    <xsl:for-each select="peci:Person_Identification/peci:Visa">
                                        <xsl:if test="peci:Country = 'CH'">                                            
                                            <xsl:variable name="actionCode">
                                                <xsl:call-template name="actionCodeTranslation"/>
                                            </xsl:variable>
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'localVisaCH'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="$actionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="substring(../../peci:Effective_Moment,1,10)"/>
                                            </xsl:call-template>
                                        </xsl:if>                           
                                    </xsl:for-each>
                                    
                                    <!--   Brazil Local Payroll Data for Passport Issued Date during hiring.   -->
                                    <xsl:for-each select="peci:Person_Identification/peci:Passport">
                                        <xsl:if test="peci:Country = 'BR' and peci:Issued_Date">
                                            <xsl:variable name="actionCode">
                                                <xsl:call-template name="actionCodeTranslation"/>
                                            </xsl:variable>
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'localPassportBR'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="$actionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="substring(../../peci:Effective_Moment,1,10)"/>
                                            </xsl:call-template>
                                        </xsl:if>                           
                                    </xsl:for-each>
                                    
                                    <!--   Korea Local Payroll Data for Local Name during hiring    -->
                                    <xsl:for-each select="peci:Personal/peci:Legal_Name">
                                        <xsl:if test="peci:Country = 'KR' and (peci:First_Name_Local_2 or peci:Last_Name_Local_2)">
                                            <xsl:variable name="actionCode">
                                                <xsl:call-template name="actionCodeTranslation"/>
                                            </xsl:variable>
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'localScriptNameKR'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="$actionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="substring(../../peci:Effective_Moment,1,10)"/>
                                            </xsl:call-template>
                                        </xsl:if>                           
                                    </xsl:for-each>    
                                    
                                    <!--   Mexico Local Payroll Data for Personal Information during hiring    -->
                                    <xsl:if test="peci:Personal/peci:Legal_Name/peci:Secondary_Last_Name and peci:Personal/peci:Legal_Name/peci:Country = 'MX'">
                                        <xsl:variable name="actionCode">
                                            <xsl:call-template name="actionCodeTranslation"/>
                                        </xsl:variable>
                                        <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                            <xsl:with-param name="bodType" select="'localMXPI'"/>
                                            <xsl:with-param name="creationDateTime"
                                                select="$CreationDateTime"/>
                                            <xsl:with-param name="bodid"
                                                select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                            <xsl:with-param name="actionCode" select="$actionCode"/>
                                            <xsl:with-param name="personID" select="$personID"/>
                                            <xsl:with-param name="employeeID" select="$employeeID"/>
                                            <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                            <xsl:with-param name="effectiveMomentDate"
                                                select="substring(peci:Effective_Moment,1,10)"/>
                                        </xsl:call-template>
                                    </xsl:if>             
                                    
                                    <!--   Japan Local Payroll Data for Personal Details during hiring.  -->
                                    <xsl:for-each select="peci:Personal">
                                        <xsl:variable name="jppdFlag">
                                            <xsl:value-of select="concat(peci:Preferred_Name/peci:Last_Name_Local,peci:Preferred_Name/peci:First_Name_Local,peci:Preferred_Name/peci:Last_Name_Local_2,
                                                peci:Preferred_Name/peci:First_Name_Local_2,peci:Additional_Name/peci:Last_Name_Local,peci:Additional_Name/peci:Last_Name_Local_2,peci:Additional_Name/peci:Last_Name,
                                                peci:Legal_Name/peci:Last_Name_Local_2,peci:Legal_Name_Local/peci:Last_Name_Local,peci:Legal_Name/peci:First_Name_Local,peci:Legal_Name/peci:First_Name_Local_2,peci:Legal_Name/peci:First_Name)"/>
                                        </xsl:variable>
                                        <xsl:if test="(peci:Preferred_Name/peci:Country = 'JP' or peci:Legal_Name/peci:Country = 'JP') and string-length($jppdFlag) > 0 ">                                  
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'localJppdJP'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="'ADD'"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                <xsl:with-param name="checkDTAEvent" select="$checkDTAEvent"/>
                                                <xsl:with-param name="checkPGIEvent" select="$checkPGIEvent"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="substring(../peci:Effective_Moment,1,10)"/>
                                            </xsl:call-template>
                                        </xsl:if>                           
                                    </xsl:for-each>     
                                    
                                    <!--   Japan Local Payroll Data for Local Address Details during hiring.  -->
                                    <xsl:for-each select="peci:Person_Communication/peci:Address">
                                        <xsl:variable name="jpaddrFlag">
                                            <xsl:value-of select="concat(peci:Address_Line_1_Local,peci:Address_Line_5_Local,peci:City_Local,peci:Address_Line_4_Local,peci:Address_Line_6_Local,
                                                peci:Address_Line_2_Local)"/>
                                        </xsl:variable>
                                        <xsl:if test="peci:Country = 'JP' and string-length($jpaddrFlag) > 0">
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'localJpaddrJP'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="'ADD'"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                <xsl:with-param name="checkDTAEvent" select="$checkDTAEvent"/>
                                                <xsl:with-param name="checkPGIEvent" select="$checkPGIEvent"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="substring(../../peci:Effective_Moment,1,10)"/>
                                            </xsl:call-template>
                                        </xsl:if>
                                    </xsl:for-each>
                                    
                                    <!--       Japan Local Payroll Data for Family Details during hiring      -->
                                    <xsl:if test="$varCountryCode = 'JP' and peci:Related_Person">
                                        <xsl:variable name="countRelPerSection" select="count(peci:Related_Person[peci:Dependent_ID[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]])"/>
                                        <xsl:variable name="countDeleteSec" select="count(peci:Related_Person[@*[local-name() = 'isDeleted']])"/>
                                        <xsl:variable name="countBeneDep" select="count(peci:Related_Person[@*[local-name() != 'isUpdated']][peci:Dependent_ID[@*[local-name() = 'isDeleted']]])"/>
                                        
                                        <xsl:variable name="jpRelatedPerson">
                                            <xsl:for-each select="peci:Related_Person[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0][peci:Relationship_Type = ('Child','Spouse')]">
                                                <xsl:if test="peci:Dependent_ID[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                    <peci:Related_Person>   
                                                        <xsl:copy-of select="*"/>    
                                                        <nga:ActionCode>
                                                            <xsl:value-of select="'ADD'"/>
                                                        </nga:ActionCode>
                                                    </peci:Related_Person>
                                                </xsl:if>
                                            </xsl:for-each>    
                                        </xsl:variable>                                 
                                        
                                        <xsl:for-each-group select="$jpRelatedPerson/peci:Related_Person" group-by="nga:ActionCoce">       
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="nga:ActionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>  
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                <xsl:with-param name="checkDTAEvent" select="$checkDTAEvent"/>
                                                <xsl:with-param name="checkPGIEvent" select="$checkPGIEvent"/>
                                                <xsl:with-param name="bodType" select="'localJpfaJP'"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="substring(peci:Effective_Moment,1,10)"/>            
                                                <xsl:with-param name="relatedPerson" select="$jpRelatedPerson"/>
                                            </xsl:call-template>    
                                        </xsl:for-each-group>
                                    </xsl:if>
                                    
                                    
                                    <!--    Singapore Local Payroll Data on Regligion and Ethnicity during hiring. -->
                                    <xsl:if test="(peci:Derived_Event_Code = 'PCI') or (peci:Derived_Event_Code = 'HIR' and $checkHIR-RwithHIR != 'Y') or peci:Derived_Event_Code = ('ORG') or $checkPGIEvent = 'Y' or  $checkDTAEvent = 'Y'">
                                        <xsl:if test="$varCountryCode ='SG'">
                                            <xsl:for-each select="peci:Personal">
                                                <xsl:if test="peci:Religion or peci:Ethnicity/peci:Ethnicity_ID">
                                                    <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                        <xsl:with-param name="bodType" select="'localPersonalInfoSG'"/>
                                                        <xsl:with-param name="creationDateTime"
                                                            select="$CreationDateTime"/>
                                                        <xsl:with-param name="bodid"
                                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                        <xsl:with-param name="actionCode" select="'ADD'"/>
                                                        <xsl:with-param name="personID" select="$personID"/>
                                                        <xsl:with-param name="employeeID" select="$employeeID"/>
                                                        <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                        <xsl:with-param name="tableLocalData" select="$sgReligionEthnicity"/>
                                                        <xsl:with-param name="effectiveMomentDate"
                                                            select="substring(../peci:Effective_Moment,1,10)"/>
                                                    </xsl:call-template>
                                                </xsl:if>
                                            </xsl:for-each>                                    
                                        </xsl:if>
                                    </xsl:if>
                                    
                                    <!--    Philippines Local Payroll Data Dependent Children during hiring. -->
                                    <xsl:if test="$varCountryCode = 'PH' and peci:Related_Person">
                                        <!--    Reformat PH Related_Person     -->
                                        <xsl:variable name="effectiveDate" select="substring(peci:Effective_Moment,1,10)"/>
                                        <xsl:variable name="phRelatedPerson">
                                            <nga:Related_Person_PH>
                                                <xsl:for-each select="peci:Related_Person[peci:Relationship_Type = 'Child' and string-length(peci:Dependent_ID) > 0]">
                                                    <xsl:sort select="peci:Dependent_ID" order="ascending"/>
                                                    <nga:Child>
                                                        <nga:Count>
                                                            <xsl:value-of select="position()"/>
                                                        </nga:Count>
                                                        <peci:Last_Name>
                                                            <xsl:value-of select="peci:Legal_Name/peci:Last_Name"/>
                                                        </peci:Last_Name>
                                                        <peci:First_Name>
                                                            <xsl:value-of select="peci:Legal_Name/peci:First_Name"/>
                                                        </peci:First_Name>
                                                        <peci:Birth_Date>
                                                            <xsl:value-of select="substring(peci:Birth_Date,1,10)"/>
                                                        </peci:Birth_Date>
                                                        <peci:Gender>
                                                            <xsl:choose>
                                                                <xsl:when test="peci:Gender = 'Male'">
                                                                    <xsl:value-of select="'0'"/>
                                                                </xsl:when>
                                                                <xsl:when test="peci:Gender = 'Female'">
                                                                    <xsl:value-of select="'1'"/>
                                                                </xsl:when>
                                                            </xsl:choose>
                                                        </peci:Gender>
                                                        <nga:XPath>
                                                            <xsl:for-each select="ancestor-or-self::*">
                                                                <xsl:value-of select="concat('/',name())"/>
                                                                <xsl:if test="(preceding-sibling::*|following-sibling::*)[local-name()=local-name(current())]">
                                                                    <xsl:value-of select="concat('[',count(preceding-sibling::*[local-name()=local-name(current())])+1,']')"/>
                                                                </xsl:if>
                                                            </xsl:for-each>
                                                        </nga:XPath>
                                                    </nga:Child>
                                                </xsl:for-each>                                    
                                            </nga:Related_Person_PH>                                       
                                        </xsl:variable>
                                        
                                        <xsl:for-each select="$phRelatedPerson/nga:Related_Person_PH">
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'localDepChildPH'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="'ADD'"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                <xsl:with-param name="effectiveMomentDate" select="$effectiveDate"/>
                                            </xsl:call-template>
                                        </xsl:for-each>
                                    </xsl:if>
                                    
                                    <!--    Greece Local Payroll Data Father's and Mother's name during hiring. -->
                                    <xsl:if test="$varCountryCode = 'GR' and peci:Related_Person">       
                                        <xsl:variable name="grRelatedPerson">
                                            <xsl:for-each select="peci:Related_Person[peci:Legal_Name/peci:Country='GR']">    
                                                <nga:Related_Person_GR>
                                                    <nga:ActionCode>
                                                        <xsl:choose>
                                                            <xsl:when test="@*[local-name() = 'isAdded'] or @*[local-name() = 'isUpdated'] or string-length(@*[local-name()]) = 0">
                                                                <xsl:value-of select="'ADD'"/>
                                                            </xsl:when>
                                                            <xsl:when test="@*[local-name() = 'isDeleted']">
                                                                <xsl:value-of select="'DELETE'"/>
                                                            </xsl:when>
                                                        </xsl:choose>
                                                    </nga:ActionCode>
                                                    <xsl:if test="peci:Relationship_Type='Parent' and peci:Gender = 'Male'">
                                                        <nga:FathersName>
                                                            <xsl:choose>
                                                                <xsl:when test="peci:Legal_Name/peci:First_Name_Local and peci:Legal_Name/peci:Last_Name_Local">
                                                                    <xsl:value-of select="substring(concat(peci:Legal_Name/peci:First_Name_Local,' ',peci:Legal_Name/peci:Last_Name_Local),1,40)"/>
                                                                    <xsl:call-template name="usedPECIData">
                                                                        <xsl:with-param name="xpath">
                                                                            <xsl:for-each select="peci:Legal_Name/peci:First_Name_Local">
                                                                                <xsl:call-template name="print-field-xpath"/> 
                                                                            </xsl:for-each>                       
                                                                        </xsl:with-param>
                                                                    </xsl:call-template>
                                                                    <xsl:call-template name="usedPECIData">
                                                                        <xsl:with-param name="xpath">
                                                                            <xsl:for-each select="peci:Legal_Name/peci:Last_Name_Local">
                                                                                <xsl:call-template name="print-field-xpath"/> 
                                                                            </xsl:for-each>                       
                                                                        </xsl:with-param>
                                                                    </xsl:call-template>
                                                                </xsl:when>
                                                                <xsl:when test="peci:Legal_Name/peci:First_Name and peci:Legal_Name/peci:Last_Name">
                                                                    <xsl:value-of select="substring(concat(peci:Legal_Name/peci:First_Name,' ',peci:Legal_Name/peci:Last_Name),1,40)"/>
                                                                    <xsl:call-template name="usedPECIData">
                                                                        <xsl:with-param name="xpath">
                                                                            <xsl:for-each select="peci:Legal_Name/peci:First_Name">
                                                                                <xsl:call-template name="print-field-xpath"/> 
                                                                            </xsl:for-each>                       
                                                                        </xsl:with-param>
                                                                    </xsl:call-template>
                                                                    <xsl:call-template name="usedPECIData">
                                                                        <xsl:with-param name="xpath">
                                                                            <xsl:for-each select="peci:Legal_Name/peci:Last_Name">
                                                                                <xsl:call-template name="print-field-xpath"/> 
                                                                            </xsl:for-each>                       
                                                                        </xsl:with-param>
                                                                    </xsl:call-template>
                                                                </xsl:when>
                                                            </xsl:choose>
                                                        </nga:FathersName>
                                                    </xsl:if>
                                                    <xsl:if test="peci:Relationship_Type='Parent' and peci:Gender = 'Female'">
                                                        <nga:MothersName>
                                                            <xsl:choose>
                                                                <xsl:when test="peci:Legal_Name/peci:First_Name_Local and peci:Legal_Name/peci:Last_Name_Local">
                                                                    <xsl:value-of select="substring(concat(peci:Legal_Name/peci:First_Name_Local,' ',peci:Legal_Name/peci:Last_Name_Local),1,40)"/>
                                                                    <xsl:call-template name="usedPECIData">
                                                                        <xsl:with-param name="xpath">
                                                                            <xsl:for-each select="peci:Legal_Name/peci:First_Name_Local">
                                                                                <xsl:call-template name="print-field-xpath"/> 
                                                                            </xsl:for-each>                       
                                                                        </xsl:with-param>
                                                                    </xsl:call-template>
                                                                    <xsl:call-template name="usedPECIData">
                                                                        <xsl:with-param name="xpath">
                                                                            <xsl:for-each select="peci:Legal_Name/peci:Last_Name_Local">
                                                                                <xsl:call-template name="print-field-xpath"/> 
                                                                            </xsl:for-each>                       
                                                                        </xsl:with-param>
                                                                    </xsl:call-template>
                                                                </xsl:when>
                                                                <xsl:when test="peci:Legal_Name/peci:First_Name and peci:Legal_Name/peci:Last_Name">
                                                                    <xsl:value-of select="substring(concat(peci:Legal_Name/peci:First_Name,' ',peci:Legal_Name/peci:Last_Name),1,40)"/>
                                                                    <xsl:call-template name="usedPECIData">
                                                                        <xsl:with-param name="xpath">
                                                                            <xsl:for-each select="peci:Legal_Name/peci:First_Name">
                                                                                <xsl:call-template name="print-field-xpath"/> 
                                                                            </xsl:for-each>                       
                                                                        </xsl:with-param>
                                                                    </xsl:call-template>
                                                                    <xsl:call-template name="usedPECIData">
                                                                        <xsl:with-param name="xpath">
                                                                            <xsl:for-each select="peci:Legal_Name/peci:Last_Name">
                                                                                <xsl:call-template name="print-field-xpath"/> 
                                                                            </xsl:for-each>                       
                                                                        </xsl:with-param>
                                                                    </xsl:call-template>
                                                                </xsl:when>
                                                            </xsl:choose>
                                                        </nga:MothersName>
                                                    </xsl:if>                                                        
                                                </nga:Related_Person_GR> 
                                            </xsl:for-each>
                                        </xsl:variable>
                                        
                                        <xsl:for-each-group select="$grRelatedPerson/nga:Related_Person_GR" group-by="nga:ActionCode">
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'localParentsNameGR'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="nga:ActionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                <xsl:with-param name="effectiveMomentDate" select="substring(peci:Effective_Moment,1,10)"/>
                                            </xsl:call-template>
                                        </xsl:for-each-group>      
                                    </xsl:if>                       
                                </xsl:if>
                                
                                <!-- ******************************************** -->
                                <!-- **         Process Absences Event         ** -->
                                <!-- ******************************************** -->                           
                                <xsl:variable name="lcc" select="substring($checkLogicalID,5,5)"/>
                                <!--    Look-up and check variables for time off rejection conditions.  -->
                                <!--    NOTE: Do not change/alter any of these unless you have a good  -->
                                <!--    understanding on how PECI leaves/time off works. Please refer  -->
                                <!--    to ENHC0020793 for the details of the rejection conditions.    -->
                                
                                <!--    P R O C E E D   W I T H   E X T R E M E   C A U T I O N ! ! !  -->
                                
                                <!--    Check if LOA-R Leave of Absence Type is valid for Time Off -->
                                <xsl:variable name="timeOffLOA-R">
                                    <xsl:call-template name="timeOffAbsenceChecker">
                                        <xsl:with-param name="absenceType" select="../peci:Effective_Change[peci:Derived_Event_Code = 'LOA-R']/peci:Leave_of_Absence[@*[local-name()='isDeleted']]/peci:Leave_of_Absence_Type"/>
                                        <xsl:with-param name="lcc" select="$lcc"/>
                                    </xsl:call-template>
                                </xsl:variable>
                                <!--    Check if LOA Leave of Absence Type is valid for Time Off     -->
                                <xsl:variable name="timeOffLOA">
                                    <xsl:call-template name="timeOffAbsenceChecker">
                                        <xsl:with-param name="absenceType" select="../peci:Effective_Change[peci:Derived_Event_Code = 'LOA']/peci:Leave_of_Absence[@*[local-name()='isAdded']]/peci:Leave_of_Absence_Type"/>
                                        <xsl:with-param name="lcc" select="$lcc"/>
                                    </xsl:call-template>
                                </xsl:variable>
                                <!--    Check if LOA-C priorValue Leave of Absence Type is valid for Time Off     -->
                                <xsl:variable name="timeOffLOA-CUpdate">
                                    <xsl:call-template name="timeOffAbsenceChecker">
                                        <xsl:with-param name="absenceType" select="../peci:Effective_Change[peci:Derived_Event_Code = 'LOA-C']/peci:Leave_of_Absence[@*[local-name()='isUpdated']]/peci:Leave_of_Absence_Type/@peci:priorValue"/>
                                        <xsl:with-param name="lcc" select="$lcc"/>
                                    </xsl:call-template>
                                </xsl:variable>
                                <!--    Check if LOA-C isDeleted of Absence Type is valid for Time Off     -->
                                <xsl:variable name="timeOffLOA-CDelete">
                                    <xsl:call-template name="timeOffAbsenceChecker">
                                        <xsl:with-param name="absenceType" select="../peci:Effective_Change[peci:Derived_Event_Code = 'LOA-C']/peci:Leave_of_Absence[@*[local-name()='isDeleted']]/peci:Leave_of_Absence_Type"/>
                                        <xsl:with-param name="lcc" select="$lcc"/>
                                    </xsl:call-template>
                                </xsl:variable>
                                <!--    Check if LOA-C isAdded of Absence Type is valid for Time Off     -->
                                <xsl:variable name="timeOffLOA-CAdd">
                                    <xsl:call-template name="timeOffAbsenceChecker">
                                        <xsl:with-param name="absenceType" select="../peci:Effective_Change[peci:Derived_Event_Code = 'LOA-C']/peci:Leave_of_Absence[@*[local-name()='isAdded']]/peci:Leave_of_Absence_Type"/>
                                        <xsl:with-param name="lcc" select="$lcc"/>
                                    </xsl:call-template>
                                </xsl:variable>
                                <!--    Check if LOA-C isAdded of Absence Type is valid for Time Off     -->
                                <xsl:variable name="timeOffRFL-R">
                                    <xsl:call-template name="timeOffAbsenceChecker">
                                        <xsl:with-param name="absenceType" select="../peci:Effective_Change[peci:Derived_Event_Code = 'RFL-R']/peci:Leave_of_Absence[string-length(@*[local-name()])=0]/peci:Leave_of_Absence_Type"/>
                                        <xsl:with-param name="lcc" select="$lcc"/>
                                    </xsl:call-template>
                                </xsl:variable>
                                <!--    Check if RFL isUpdated of Absence Type is valid for Time Off     -->
                                <xsl:variable name="timeOffRFL">
                                    <xsl:call-template name="timeOffAbsenceChecker">
                                        <xsl:with-param name="absenceType" select="../peci:Effective_Change[peci:Derived_Event_Code = 'RFL']/peci:Leave_of_Absence[@*[local-name()='isUpdated']]/peci:Leave_of_Absence_Type"/>
                                        <xsl:with-param name="lcc" select="$lcc"/>
                                    </xsl:call-template>
                                </xsl:variable>        
                                <!--    Check if DTA isUpdated of Absence Type is valid for Time Off     -->
                                <xsl:variable name="timeOffDTA">
                                    <xsl:call-template name="timeOffAbsenceChecker">
                                        <xsl:with-param name="absenceType" select="../peci:Effective_Change[peci:Derived_Event_Code = 'DTA']/peci:Leave_of_Absence[@*[local-name()='isUpdated']]/peci:Leave_of_Absence_Type"/>
                                        <xsl:with-param name="lcc" select="$lcc"/>
                                    </xsl:call-template>
                                </xsl:variable>        
                                
                                <!--    Check if LOA-R record is followed by LOA    -->
                                <xsl:variable name="checkLOA-RFollowingSibblingIsLOA">
                                    <xsl:if test="../peci:Effective_Change[peci:Derived_Event_Code = 'LOA-R'][peci:Leave_of_Absence[@*[local-name()='isDeleted']]] and following-sibling::peci:Effective_Change[peci:Derived_Event_Code = 'LOA'][peci:Leave_of_Absence[@*[local-name()='isAdded']]]">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if> 
                                </xsl:variable>  
                                <!--    Check if LOA record is followed by LOA    -->
                                <xsl:variable name="checkLOAFollowingSibblingIsLOA-R">
                                    <xsl:if test="../peci:Effective_Change[peci:Derived_Event_Code = 'LOA'][peci:Leave_of_Absence[@*[local-name()='isAdded']]] and following-sibling::peci:Effective_Change[peci:Derived_Event_Code = 'LOA-R'][peci:Leave_of_Absence[@*[local-name()='isDeleted']]]">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if> 
                                </xsl:variable>
                                <!--    Check if LOA-R record is preceded by LOA    -->
                                <xsl:variable name="checkLOA-RPrecedingSibblingIsLOA">
                                    <xsl:if test="../peci:Effective_Change[peci:Derived_Event_Code = 'LOA-R'][peci:Leave_of_Absence[@*[local-name()='isDeleted']]] and preceding-sibling::peci:Effective_Change[peci:Derived_Event_Code = 'LOA'][peci:Leave_of_Absence[@*[local-name()='isAdded']]]">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if> 
                                </xsl:variable>   
                                <!--    Check if LOA record is preceded by LOA-R    -->
                                <xsl:variable name="checkLOAPrecedingSibblingIsLOA-R">
                                    <xsl:if test="../peci:Effective_Change[peci:Derived_Event_Code = 'LOA'][peci:Leave_of_Absence[@*[local-name()='isAdded']]] and preceding-sibling::peci:Effective_Change[peci:Derived_Event_Code = 'LOA-R'][peci:Leave_of_Absence[@*[local-name()='isDeleted']]]">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if> 
                                </xsl:variable>
                                <!--    Check if LOA-C Delete is followed by RFL-R         -->
                                <xsl:variable name="checkLOA-CDeleteFollowingSibblingIsRFL-R">
                                    <xsl:if test="../peci:Effective_Change[peci:Derived_Event_Code = 'LOA-C'][peci:Leave_of_Absence[@*[local-name()='isDeleted']]] and following-sibling::peci:Effective_Change[peci:Derived_Event_Code = 'RFL-R'][peci:Leave_of_Absence[string-length(@*[local-name()]) = 0]]">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if> 
                                </xsl:variable>                        
                                <!--    Check if LOA-C Add is followed by RFL-R         -->
                                <xsl:variable name="checkLOA-CAddFollowingSibblingIsRFL-R">
                                    <xsl:if test="../peci:Effective_Change[peci:Derived_Event_Code = 'LOA-C'][peci:Leave_of_Absence[@*[local-name()='isAdded']]] and following-sibling::peci:Effective_Change[peci:Derived_Event_Code = 'RFL-R'][peci:Leave_of_Absence[string-length(@*[local-name()]) = 0]]">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if> 
                                </xsl:variable>
                                <!--    Check if RFL-R is preceded by LOA-C Delete      -->
                                <xsl:variable name="checkRFL-RPrecedingSibblingIsLOA-CDelete">
                                    <xsl:if test="../peci:Effective_Change[peci:Derived_Event_Code = 'RFL-R'][peci:Leave_of_Absence[string-length(@*[local-name()]) = 0]] and preceding-sibling::peci:Effective_Change[peci:Derived_Event_Code = 'LOA-C'][peci:Leave_of_Absence[@*[local-name()='isDeleted']]]">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if> 
                                </xsl:variable>
                                <!--    Check if RFL-R is preceded by LOA-C Add      -->
                                <xsl:variable name="checkRFL-RPrecedingSibblingIsLOA-CAdd">
                                    <xsl:if test="../peci:Effective_Change[peci:Derived_Event_Code = 'RFL-R'][peci:Leave_of_Absence[string-length(@*[local-name()]) = 0]] and preceding-sibling::peci:Effective_Change[peci:Derived_Event_Code = 'LOA-C'][peci:Leave_of_Absence[@*[local-name()='isAdded']]]">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if> 
                                </xsl:variable>
                                <!--    Check if LOA-C Delete is followed by RFL Update   -->
                                <xsl:variable name="checkLOA-CDeleteFollowingSibblingIsRFL">
                                    <xsl:if test="../peci:Effective_Change[peci:Derived_Event_Code = 'LOA-C'][peci:Leave_of_Absence[@*[local-name()='isDeleted']]] and following-sibling::peci:Effective_Change[peci:Derived_Event_Code = 'RFL'][peci:Leave_of_Absence[@*[local-name()='isUpdated']]]">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if> 
                                </xsl:variable>                        
                                <!--    Check if LOA-C Add is followed by RFL Update        -->
                                <xsl:variable name="checkLOA-CAddFollowingSibblingIsRFL">
                                    <xsl:if test="../peci:Effective_Change[peci:Derived_Event_Code = 'LOA-C'][peci:Leave_of_Absence[@*[local-name()='isAdded']]] and following-sibling::peci:Effective_Change[peci:Derived_Event_Code = 'RFL'][peci:Leave_of_Absence[@*[local-name()='isUpdated']]]">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if> 
                                </xsl:variable>
                                <!--    Check if RFL is preceded by LOA-C Delete      -->
                                <xsl:variable name="checkRFLPrecedingSibblingIsLOA-CDelete">
                                    <xsl:if test="../peci:Effective_Change[peci:Derived_Event_Code = 'RFL'][peci:Leave_of_Absence[@*[local-name()='isUpdated']]] and preceding-sibling::peci:Effective_Change[peci:Derived_Event_Code = 'LOA-C'][peci:Leave_of_Absence[@*[local-name()='isDeleted']]]">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if> 
                                </xsl:variable>
                                <!--    Check if RFL is preceded by LOA-C Add      -->
                                <xsl:variable name="checkRFLPrecedingSibblingIsLOA-CAdd">
                                    <xsl:if test="../peci:Effective_Change[peci:Derived_Event_Code = 'RFL'][peci:Leave_of_Absence[@*[local-name()='isUpdated']]] and preceding-sibling::peci:Effective_Change[peci:Derived_Event_Code = 'LOA-C'][peci:Leave_of_Absence[@*[local-name()='isAdded']]]">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if> 
                                </xsl:variable>  
                                <!--    Check if DTA is with peci:Estimated_Leave_End_Date priorValue   -->
                                <xsl:variable name="checkDTAEstimatedLeaveEndPriorValue">
                                    <xsl:if test="string-length(../peci:Effective_Change[peci:Derived_Event_Code = 'DTA']/peci:Leave_of_Absence[@*[local-name()='isUpdated']]/peci:Estimated_Leave_End_Date/@peci:priorValue) > 0">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:variable>
                                
                                <!--    E V E N T   D R I V E N   R E J E C T I O N    F L A G S ! ! !   -->
                                <!--    If the following set of conditions are satisfied, then event     -->
                                <!--    will be ignored/rejected during transformation.                  -->
                                
                                <!--    Rejection flag if LOA-R is followed by LOA  -->
                                <xsl:variable name="LOA-RFollowedByLOA">
                                    <xsl:if test="$checkLOA-RFollowingSibblingIsLOA = 'Y' and $timeOffLOA-R = 'Y' and $timeOffLOA = 'Y'">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:variable>
                                <!--    Rejection flag if LOA is preceded by LOA-R  -->
                                <xsl:variable name="LOAPrecedingLOA-R">
                                    <xsl:if test="$checkLOAPrecedingSibblingIsLOA-R = 'Y' and $timeOffLOA-R = 'Y' and $timeOffLOA = 'Y'">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:variable>
                                <!--    Rejection flag if LOA is followed by LOA-R  -->
                                <xsl:variable name="LOAFollowedByLOA-R">
                                    <xsl:if test="$checkLOAFollowingSibblingIsLOA-R = 'Y' and $timeOffLOA-R = 'Y' and $timeOffLOA = 'Y'">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:variable> 
                                <!--    Rejection flag if LOA-R is prededed by LOA  -->
                                <xsl:variable name="LOA-RPrecedingLOA">
                                    <xsl:if test="$checkLOA-RPrecedingSibblingIsLOA = 'Y' and $timeOffLOA-R = 'Y' and $timeOffLOA = 'Y'">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:variable>
                                <!--    Rejection flag for LOA-C with priorValue    -->
                                <xsl:variable name="LOA-CWithPriorValue">
                                    <xsl:if test="$timeOffLOA-CUpdate = 'Y'">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:variable>
                                <!--    Rejection flag for LOA-C isDelete/isAdded is followed by RFL-R    -->
                                <xsl:variable name="LOA-CFollowedByRFL-R">
                                    <xsl:if test="$checkLOA-CAddFollowingSibblingIsRFL-R = 'Y' and $checkLOA-CDeleteFollowingSibblingIsRFL-R = 'Y' and $timeOffLOA-CAdd='Y' and $timeOffLOA-CDelete='Y' and $timeOffRFL-R='Y'">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:variable>
                                <!--    Rejection flag for RFL-R is preceded by LOA-C isDelete/isAdded   -->
                                <xsl:variable name="RFL-RPrecededByLOA-C">
                                    <xsl:if test="$checkRFL-RPrecedingSibblingIsLOA-CDelete='Y' and $checkRFL-RPrecedingSibblingIsLOA-CAdd='Y' and $timeOffLOA-CAdd='Y' and $timeOffLOA-CDelete='Y' and $timeOffRFL-R='Y'">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:variable>
                                <!--    Rejection flag for LOA-C isDelete/isAdded is followed by RFL    -->
                                <xsl:variable name="LOA-CFollowedByRFL">
                                    <xsl:if test="$checkLOA-CAddFollowingSibblingIsRFL = 'Y' and $checkLOA-CDeleteFollowingSibblingIsRFL = 'Y' and $timeOffLOA-CAdd='Y' and $timeOffLOA-CDelete='Y' and $timeOffRFL='Y'">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:variable>
                                <!--    Rejection flag for RFL-R is preceded by LOA-C isDelete/isAdded   -->
                                <xsl:variable name="RFLPrecededByLOA-C">
                                    <xsl:if test="$checkRFLPrecedingSibblingIsLOA-CDelete='Y' and $checkRFLPrecedingSibblingIsLOA-CAdd='Y' and $timeOffLOA-CAdd='Y' and $timeOffLOA-CDelete='Y' and $timeOffRFL='Y'">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:variable>
                                <!--    Rejection flag for DTA with leave of absence isUpdated and Estimated_Leave_End_Date priorValue  -->
                                <xsl:variable name="DTAEstimatedLeaveEndPriorValue">
                                    <xsl:if test="$checkDTAEstimatedLeaveEndPriorValue = 'Y' and $timeOffDTA ='Y'">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>
                                </xsl:variable>
                                
                                <!--    Processing for LOA and RFL whether regular leaves or for time off  -->
                                <xsl:if test="peci:Derived_Event_Code = ('LOA','RFL','DTA') and $LOA-RFollowedByLOA !='Y' and $LOAPrecedingLOA-R !='Y' and $LOAFollowedByLOA-R !='Y' 
                                    and $LOA-RPrecedingLOA != 'Y' and $DTAEstimatedLeaveEndPriorValue !='Y'">
                                    <xsl:for-each select="peci:Leave_of_Absence[@*[local-name()]]">
                                        <xsl:variable name="absenceType" select="peci:Leave_of_Absence_Type"/>    
                                        <xsl:variable name="tableAbsenceKey">
                                            <xsl:call-template name="timeOffAbsenceKey">
                                                <xsl:with-param name="absenceType" select="peci:Leave_of_Absence_Type"/>
                                                <xsl:with-param name="lcc" select="$lcc"/>                                        
                                            </xsl:call-template>
                                        </xsl:variable>
                                        <xsl:variable name="tableAbsenceType">
                                            <xsl:call-template name="timeOffAbsenceType">
                                                <xsl:with-param name="absenceType" select="peci:Leave_of_Absence_Type"/>
                                                <xsl:with-param name="lcc" select="$lcc"/>                                        
                                            </xsl:call-template>
                                        </xsl:variable>
                                        <xsl:variable name="tableAbsenceID">
                                            <xsl:call-template name="timeOffAbsenceID">
                                                <xsl:with-param name="absenceType" select="peci:Leave_of_Absence_Type"/>
                                                <xsl:with-param name="lcc" select="$lcc"/>                                        
                                            </xsl:call-template>
                                        </xsl:variable>
                                        <xsl:variable name="actionCode">
                                            <xsl:call-template name="actionCodeTranslation"/>
                                        </xsl:variable>
                                        <xsl:variable name="leaveDTAChange">
                                            <xsl:if test="peci:Estimated_Leave_End_Date[@*[local-name()]] or peci:Leave_Last_Day_of_Work[@*[local-name()]]">
                                                <xsl:value-of select="'Y'"/>
                                            </xsl:if>
                                        </xsl:variable>                                
                                        
                                        <!-- Check if LOA needs to be convereted into time off or regular leaves -->
                                        <xsl:choose>
                                            <xsl:when test="../peci:Derived_Event_Code = 'LOA' and @*[local-name() = 'isAdded'] and string-length($tableAbsenceKey) > 0">
                                                <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                    <xsl:with-param name="bodType" select="'LOATimeOff'"/>
                                                    <xsl:with-param name="creationDateTime"
                                                        select="$CreationDateTime"/>
                                                    <xsl:with-param name="bodid"
                                                        select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                    <xsl:with-param name="actionCode" select="$actionCode"/>
                                                    <xsl:with-param name="personID" select="$personID"/>
                                                    <xsl:with-param name="employeeID" select="$employeeID"/>
                                                    <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                    <xsl:with-param name="tableAbsenceType" select="$tableAbsenceType"/>
                                                    <xsl:with-param name="tableAbsenceID" select="$tableAbsenceID"/>
                                                </xsl:call-template>
                                            </xsl:when>
                                            <!-- Check if RFL needs to be convereted into time off or regular leaves -->
                                            <xsl:when test="../peci:Derived_Event_Code = 'RFL' and @*[local-name() = 'isUpdated'] and string-length($tableAbsenceKey) > 0">
                                                <!--    Generate DELETE BOD for time off with +1 year leave return date    -->
                                                <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                    <xsl:with-param name="bodType" select="'RFLTimeOffDelete'"/>
                                                    <xsl:with-param name="creationDateTime"
                                                        select="$CreationDateTime"/>
                                                    <xsl:with-param name="bodid"
                                                        select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                    <xsl:with-param name="actionCode" select="'DELETE'"/>
                                                    <xsl:with-param name="personID" select="$personID"/>
                                                    <xsl:with-param name="employeeID" select="$employeeID"/>
                                                    <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                    <xsl:with-param name="tableAbsenceType" select="$tableAbsenceType"/>
                                                    <xsl:with-param name="tableAbsenceID" select="$tableAbsenceID"/>
                                                </xsl:call-template>
                                                <!--    Generate ADD BOD for time off with correct leave return date    -->
                                                <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                    <xsl:with-param name="bodType" select="'RFLTimeOffAdd'"/>
                                                    <xsl:with-param name="creationDateTime"
                                                        select="$CreationDateTime"/>
                                                    <xsl:with-param name="bodid"
                                                        select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                    <xsl:with-param name="actionCode" select="'ADD'"/>
                                                    <xsl:with-param name="personID" select="$personID"/>
                                                    <xsl:with-param name="employeeID" select="$employeeID"/>
                                                    <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                    <xsl:with-param name="tableAbsenceType" select="$tableAbsenceType"/>
                                                    <xsl:with-param name="tableAbsenceID" select="$tableAbsenceID"/>
                                                </xsl:call-template>
                                            </xsl:when>
                                            <!--    Processing of regular leave of absence (LOA) and return from leave (RFL)    -->
                                            <xsl:when test="../peci:Derived_Event_Code != 'DTA' and string-length($tableAbsenceType) = 0">
                                                <xsl:call-template name="peci:TransformPECI2BODLeaves">
                                                    <xsl:with-param name="creationDateTime"
                                                        select="$CreationDateTime"/>
                                                    <xsl:with-param name="bodid"
                                                        select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                    <xsl:with-param name="actionCode" select="'ADD'"/>
                                                    <xsl:with-param name="personID" select="$personID"/>
                                                    <xsl:with-param name="employeeID" select="$employeeID"/>
                                                    <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                    <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                </xsl:call-template>
                                            </xsl:when>
                                            <xsl:when test="../peci:Derived_Event_Code = 'DTA' and string-length($tableAbsenceType) = 0 and $leaveDTAChange = 'Y'">
                                                <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                    <xsl:with-param name="bodType" select="'LeaveDataChange'"/>
                                                    <xsl:with-param name="creationDateTime"
                                                        select="$CreationDateTime"/>
                                                    <xsl:with-param name="bodid"
                                                        select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                    <xsl:with-param name="actionCode" select="'CHANGE'"/>
                                                    <xsl:with-param name="personID" select="$personID"/>
                                                    <xsl:with-param name="employeeID" select="$employeeID"/>
                                                    <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                    <xsl:with-param name="tableAbsenceType" select="$tableAbsenceType"/>
                                                    <xsl:with-param name="tableAbsenceID" select="$tableAbsenceID"/>
                                                </xsl:call-template>
                                            </xsl:when>                                            
                                        </xsl:choose>
                                    </xsl:for-each>         
                                </xsl:if>       
                                
                                <!--    ENHC0022098: Process all rejections for leave of absence conversion to time-off as ticket raised -->                       
                                <xsl:if test="peci:Derived_Event_Code = ('LOA','LOA-R','LOA-C','RFL-R','RFL')">
                                    <xsl:for-each select="peci:Leave_of_Absence[@*[local-name()]]">    
                                        <xsl:variable name="tableAbsenceKey">
                                            <xsl:call-template name="timeOffAbsenceKey">
                                                <xsl:with-param name="absenceType" select="peci:Leave_of_Absence_Type"/>
                                                <xsl:with-param name="lcc" select="$lcc"/>                                        
                                            </xsl:call-template>
                                        </xsl:variable>
                                        <xsl:variable name="tableAbsenceID">
                                            <xsl:call-template name="timeOffAbsenceID">
                                                <xsl:with-param name="absenceType" select="peci:Leave_of_Absence_Type"/>
                                                <xsl:with-param name="lcc" select="$lcc"/>                                        
                                            </xsl:call-template>
                                        </xsl:variable>      
                                        <xsl:variable name="tableAbsenceType">
                                            <xsl:call-template name="timeOffAbsenceType">
                                                <xsl:with-param name="absenceType" select="peci:Leave_of_Absence_Type"/>
                                                <xsl:with-param name="lcc" select="$lcc"/>                                        
                                            </xsl:call-template>
                                        </xsl:variable>
                                        <xsl:variable name="processTimeOffRejections">
                                            <xsl:choose>
                                                <!--    Process Time off conversion when LOA-R followed by LOA      -->
                                                <xsl:when test="../peci:Derived_Event_Code = 'LOA-R' and $LOA-RFollowedByLOA = 'Y' and string-length($tableAbsenceKey) > 0">
                                                    <xsl:value-of select="'Y'"/>
                                                </xsl:when>
                                                <!--      Process Time off conversion when LOA followed by LOA-R      -->
                                                <xsl:when test="../peci:Derived_Event_Code = 'LOA' and $LOAPrecedingLOA-R = 'Y' and string-length($tableAbsenceKey) > 0">
                                                    <xsl:value-of select="'Y'"/>
                                                </xsl:when>
                                                <!--      Process Time off conversion when LOA-C with priorValue      -->
                                                <xsl:when test="../peci:Derived_Event_Code = 'LOA-C' and $LOA-CWithPriorValue = 'Y' and string-length($tableAbsenceKey) > 0">
                                                    <xsl:value-of select="'Y'"/>
                                                </xsl:when>
                                                <!--      Process Time off conversion when LOA-R only      -->
                                                <xsl:when test="../peci:Derived_Event_Code = 'LOA-R' and $LOA-RFollowedByLOA != 'Y' and $LOAPrecedingLOA-R != 'Y' and string-length($tableAbsenceKey) > 0">
                                                    <xsl:value-of select="'Y'"/>
                                                </xsl:when>
                                                <!--      Process Time off conversion when LOA-C followed by RFL-R      -->
                                                <xsl:when test="../peci:Derived_Event_Code = 'LOA-C' and $LOA-CFollowedByRFL-R = 'Y' and string-length($tableAbsenceKey) > 0">
                                                    <xsl:value-of select="'Y'"/>
                                                </xsl:when>
                                                <!--      Process Time off conversion when LOA-C followed by RFL      -->
                                                <xsl:when test="../peci:Derived_Event_Code = 'LOA-C' and $LOA-CFollowedByRFL = 'Y'  and string-length($tableAbsenceKey) > 0">
                                                    <xsl:value-of select="'Y'"/>
                                                </xsl:when>
                                            </xsl:choose>                                    
                                        </xsl:variable>
                                        
                                        <xsl:if test="$processTimeOffRejections = 'Y'">
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodType" select="'timeOffRejections'"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="'DELETE'"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>                                   
                                            </xsl:call-template>
                                        </xsl:if>
                                    </xsl:for-each>         
                                </xsl:if>
                                
                                <!--    Leave of Absence with LOA-R for deletion of leaves or rejection for time off   -->
                                <xsl:if test="peci:Derived_Event_Code = 'LOA-R' and $LOA-RFollowedByLOA !='Y' and $LOAPrecedingLOA-R !='Y' and $LOAFollowedByLOA-R !='Y' and $LOA-RPrecedingLOA != 'Y' and $timeOffLOA-R !='Y'">
                                    <xsl:for-each select="peci:Leave_of_Absence[@*[local-name()]]">                             
                                        <xsl:call-template name="peci:TransformPECI2BODLeaves">
                                            <xsl:with-param name="creationDateTime"
                                                select="$CreationDateTime"/>
                                            <xsl:with-param name="bodid"
                                                select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                            <xsl:with-param name="actionCode" select="'DELETE'"/>
                                            <xsl:with-param name="personID" select="$personID"/>
                                            <xsl:with-param name="employeeID" select="$employeeID"/>
                                            <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                            <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>                                   
                                        </xsl:call-template>
                                    </xsl:for-each>         
                                </xsl:if>  
                                
                                <!--    Leave of Absence with RFL-R for deletion of leaves or rejection for time off    -->                       
                                <xsl:if test="peci:Derived_Event_Code = 'RFL-R' and $RFL-RPrecededByLOA-C !='Y'">
                                    <xsl:for-each select="peci:Leave_of_Absence">                             
                                        <xsl:call-template name="peci:TransformPECI2BODLeaves">
                                            <xsl:with-param name="creationDateTime"
                                                select="$CreationDateTime"/>
                                            <xsl:with-param name="bodid"
                                                select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                            <xsl:with-param name="actionCode" select="'DELETE'"/>
                                            <xsl:with-param name="personID" select="$personID"/>
                                            <xsl:with-param name="employeeID" select="$employeeID"/>
                                            <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                            <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>                                   
                                        </xsl:call-template>
                                    </xsl:for-each>         
                                </xsl:if>  
                                
                                <!--      Special Logic for LOA-C rejection with same isDeleted and isAdded sections       -->
                                <!--      and also for rejection for time off. Before changing any of the logic below      -->
                                <!--      please refer to ENHC0020306.                                                     -->
                                <xsl:if test="peci:Derived_Event_Code = 'LOA-C' and $LOA-CWithPriorValue != 'Y' and $LOA-CFollowedByRFL-R !='Y'">
                                    <xsl:variable name="LOACDeleteSection">
                                        <xsl:for-each select="peci:Leave_of_Absence[@*[local-name() = 'isDeleted']]">
                                            <deleteSection>
                                                <xsl:value-of select="concat(peci:Leave_Start_Date,peci:Leave_End_Date,peci:Estimated_Leave_End_Date,peci:Leave_Last_Day_of_Work,
                                                    peci:Leave_of_Absence_Type,peci:Payroll_Effect)"/>
                                            </deleteSection>                                   
                                        </xsl:for-each>
                                    </xsl:variable>
                                    <xsl:variable name="LOACAddSection">
                                        <xsl:for-each select="peci:Leave_of_Absence[@*[local-name() = 'isAdded']]">
                                            <addSection>
                                                <xsl:value-of select="concat(peci:Leave_Start_Date,peci:Leave_End_Date,peci:Estimated_Leave_End_Date,peci:Leave_Last_Day_of_Work,peci:Leave_of_Absence_Type,peci:Payroll_Effect)"/>
                                            </addSection>
                                        </xsl:for-each>
                                    </xsl:variable>
                                    
                                    <xsl:variable name="leaveOfAbsenceCorrection">
                                        <xsl:for-each select="peci:Leave_of_Absence[@*[local-name()]]">
                                            <xsl:variable name="leaveIsAdded">
                                                <xsl:value-of select="concat(.[@*[local-name() = 'isAdded']]/peci:Leave_Start_Date,.[@*[local-name() = 'isAdded']]/peci:Leave_End_Date,.[@*[local-name() = 'isAdded']]/peci:Estimated_Leave_End_Date,
                                                    .[@*[local-name() = 'isAdded']]/peci:Leave_Last_Day_of_Work,.[@*[local-name() = 'isAdded']]/peci:Leave_of_Absence_Type,.[@*[local-name() = 'isAdded']]/peci:Payroll_Effect)"/>
                                            </xsl:variable>
                                            <xsl:variable name="leaveIsDeleted">
                                                <xsl:value-of select="concat(.[@*[local-name() = 'isDeleted']]/peci:Leave_Start_Date,.[@*[local-name() = 'isDeleted']]/peci:Leave_End_Date,.[@*[local-name() = 'isDeleted']]/peci:Estimated_Leave_End_Date,
                                                    .[@*[local-name() = 'isDeleted']]/peci:Leave_Last_Day_of_Work,.[@*[local-name() = 'isDeleted']]/peci:Leave_of_Absence_Type,.[@*[local-name() = 'isDeleted']]/peci:Payroll_Effect)"/>
                                            </xsl:variable>
                                            <xsl:variable name="actionCode">
                                                <xsl:call-template name="actionCodeTranslation"/>
                                            </xsl:variable>
                                            
                                            <!--  Add flag to Leave of Absence Correction Sections  -->
                                            <peci:Leave_of_Absence>                                      
                                                <nga:Action_Code>
                                                    <xsl:choose>
                                                        <xsl:when test="string-length($actionCode) > 0">
                                                            <xsl:value-of select="$actionCode"/>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <xsl:value-of select="'ADD'"/>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </nga:Action_Code>
                                                <nga:ProcessFlagAdd>
                                                    <xsl:if test=".[@*[local-name() = 'isAdded']]">
                                                        <xsl:for-each select="$LOACDeleteSection/deleteSection">
                                                            <xsl:if test=". = $leaveIsAdded">
                                                                <xsl:value-of select="'N'"/>
                                                            </xsl:if>
                                                        </xsl:for-each>
                                                    </xsl:if>
                                                </nga:ProcessFlagAdd>
                                                <nga:ProcessFlagDelete>
                                                    <xsl:if test=".[@*[local-name() = 'isDeleted']]">
                                                        <xsl:for-each select="$LOACAddSection/addSection">
                                                            <xsl:if test=". = $leaveIsDeleted">
                                                                <xsl:value-of select="'N'"/>
                                                            </xsl:if>
                                                        </xsl:for-each>
                                                    </xsl:if>
                                                </nga:ProcessFlagDelete>
                                                <nga:XPath>
                                                    <xsl:for-each select="ancestor-or-self::*">
                                                        <xsl:value-of select="concat('/',name())"/>
                                                        <xsl:if test="(preceding-sibling::*|following-sibling::*)[local-name()=local-name(current())]">
                                                            <xsl:value-of select="concat('[',count(preceding-sibling::*[local-name()=local-name(current())])+1,']')"/>
                                                        </xsl:if>
                                                    </xsl:for-each>
                                                </nga:XPath>
                                                <xsl:copy-of select="*"/>
                                            </peci:Leave_of_Absence>
                                        </xsl:for-each>
                                    </xsl:variable>
                                    
                                    <!--   Leave of Absence Correction BOD Creation   -->
                                    <xsl:for-each select="$leaveOfAbsenceCorrection/peci:Leave_of_Absence[1]">
                                        <xsl:if test="nga:ProcessFlagAdd = '' and nga:ProcessFlagDelete = ''">
                                            <xsl:call-template name="peci:TransformPECI2BODLeaves">
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="'CHANGE'"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>   
                                                <xsl:with-param name="bodType" select="'LOA-C'"/>
                                            </xsl:call-template>
                                        </xsl:if>
                                    </xsl:for-each>
                                </xsl:if>
                                
                                <!-- ******************************************** -->
                                <!-- **           Process Data Changes         ** -->
                                <!-- ******************************************** -->
                                <xsl:if test="peci:Derived_Event_Code = ('DTA','PGO','PGI','PCO','TERM','TERM-C','LOA', 'LOA-C','LOA-R', 'RFL', 'RFL-C', 'RFL-R') and $checkDTAEvent !='Y' and $checkPGIEvent != 'Y' or (peci:Derived_Event_Code= 'HIR' and $checkHIR-RwithHIR = 'Y')">
                                    <xsl:variable name="effectiveMomentDate"
                                        select="substring(peci:Effective_Moment,1,10)"/>
                                    
                                    <!-- **         Position Cost Assignment Change        ** -->
                                    <xsl:for-each select="peci:Position[@*[local-name()]]/peci:Organization[@*[local-name()]][peci:Organization_Type = 'COST_CENTER']">
                                        <xsl:if test="not(../peci:Position_End_Date)">
                                            <xsl:variable name="processFlag">
                                                <xsl:choose>
                                                    <xsl:when test="../peci:Organization[@*[local-name() = 'isDeleted']][peci:Organization_Type = 'COST_CENTER'] and following-sibling::peci:Organization[@*[local-name() = 'isAdded']][peci:Organization_Type = 'COST_CENTER']">
                                                        <xsl:value-of select="'N'"/>
                                                    </xsl:when>
                                                    <xsl:when test="../peci:Organization[@*[local-name() = 'isAdded']][peci:Organization_Type = 'COST_CENTER'] and preceding-sibling::peci:Organization[@*[local-name() = 'isDeleted']][peci:Organization_Type = 'COST_CENTER']">
                                                        <xsl:value-of select="'Y'"/>
                                                    </xsl:when>
                                                    <xsl:when test="../peci:Organization[@*[local-name() = 'isAdded']][peci:Organization_Type = 'COST_CENTER'] and following-sibling::peci:Organization[@*[local-name() = 'isDeleted']][peci:Organization_Type = 'COST_CENTER']">
                                                        <xsl:value-of select="'Y'"/>
                                                    </xsl:when>
                                                    <xsl:when test="../peci:Organization[@*[local-name() = 'isDeleted']][peci:Organization_Type = 'COST_CENTER'] and preceding-sibling::peci:Organization[@*[local-name() = 'isAdded']][peci:Organization_Type = 'COST_CENTER']">
                                                        <xsl:value-of select="'N'"/>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <xsl:value-of select="'Y'"/>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:variable>
                                            <xsl:variable name="actionCode">
                                                <xsl:choose>
                                                    <xsl:when test="../peci:Organization[@*[local-name() = 'isAdded']] and preceding-sibling::peci:Organization[@*[local-name() = 'isDeleted']]">
                                                        <xsl:value-of select="'CHANGE'"/>
                                                    </xsl:when>
                                                    <xsl:when test="../peci:Organization[@*[local-name() = 'isAdded']] and following-sibling::peci:Organization[@*[local-name() = 'isDeleted']]">
                                                        <xsl:value-of select="'CHANGE'"/>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <xsl:call-template name="actionCodeTranslation"/>
                                                    </xsl:otherwise>     
                                                </xsl:choose>
                                            </xsl:variable>
                                            <xsl:if test="$processFlag = 'Y'">
                                                <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                    <xsl:with-param name="bodType" select="'costAssignmentPosition'"/>
                                                    <xsl:with-param name="creationDateTime"
                                                        select="$CreationDateTime"/>
                                                    <xsl:with-param name="bodid"
                                                        select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                    <xsl:with-param name="actionCode" select="$actionCode"/>
                                                    <xsl:with-param name="personID" select="$personID"/>
                                                    <xsl:with-param name="employeeID" select="$employeeID"/>
                                                    <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                    <xsl:with-param name="effectiveMomentDate"
                                                        select="$effectiveMomentDate"/>
                                                    <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                </xsl:call-template>
                                            </xsl:if>                                     
                                        </xsl:if>                               
                                    </xsl:for-each>
                                    
                                    <!--       Position Change         -->
                                    <xsl:for-each select="peci:Position[@*[local-name()]]">                               
                                        <xsl:variable name="actionCode">
                                            <xsl:call-template name="actionCodeTranslation"/>
                                        </xsl:variable>
                                        <xsl:variable name="checkPositionEndDate">
                                            <xsl:choose>
                                                <xsl:when test="peci:Position_End_Date[@*[local-name() = 'isAdded']]">
                                                    <xsl:value-of select="'Y'"/>
                                                </xsl:when>                                     
                                            </xsl:choose>
                                        </xsl:variable>                   
                                        
                                        <xsl:if test="@*[local-name() = ('isUpdated','isAdded')] and $checkPositionEndDate != 'Y'">
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'position'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="$actionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="$effectiveMomentDate"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                            </xsl:call-template>
                                        </xsl:if>                                          
                                    </xsl:for-each>             
                                    
                                    <!-- **         Personal Data Change        ** -->                                  
                                    <xsl:for-each select="peci:Personal[@*[local-name()]]">      
                                        <xsl:variable name="preferredNameFlag">
                                            <xsl:if test="peci:Preferred_Name/peci:Country = 'JP'">
                                                <xsl:value-of select="concat(peci:Preferred_Name[@*[local-name()]]/peci:First_Name[@*[local-name()]],peci:Preferred_Name[@*[local-name()]]/peci:Last_Name[@*[local-name()]])"/>
                                            </xsl:if>
                                        </xsl:variable>
                                        <xsl:variable name="personalFlag">
                                            <xsl:value-of select="concat(peci:Legal_Name[@*[local-name()]]/peci:First_Name[@*[local-name()]],peci:Legal_Name[@*[local-name()]]/peci:Middle_Name[@*[local-name()]],peci:Legal_Name[@*[local-name()]]/peci:Last_Name[@*[local-name()]],
                                                peci:Additional_Name[@*[local-name()]]/peci:Name_Type,peci:Legal_Name[@*[local-name()]]/peci:Title[@*[local-name()]], peci:Legal_Name[@*[local-name()]]/peci:Salutation[@*[local-name()]],peci:Legal_Name[@*[local-name()]]/peci:Social_Suffix[@*[local-name()]],
                                                peci:Legal_Name[@*[local-name()]]/peci:First_Name_Local[@*[local-name()]],peci:Legal_Name[@*[local-name()]]/peci:Last_Name_Local[@*[local-name()]],peci:Legal_Name[@*[local-name()]]/peci:Middle_Name_Local[@*[local-name()]],peci:Gender[@*[local-name()]],
                                                peci:Date_of_Birth[@*[local-name()]],peci:Marital_Status[@*[local-name()]],peci:Marital_Status_Date[@*[local-name()]],peci:Nationality[@*[local-name()]],peci:Preferred_Language[@*[local-name()]],peci:Legal_Name[@*[local-name()]][peci:Country !='MX']/peci:Secondary_Last_Name[@*[local-name()]])"/>
                                        </xsl:variable>
                                        <xsl:if test="($checkHIR-RwithHIR = 'N' or ($checkHIR-RwithHIR = 'Y' and ../peci:Derived_Event_Code = 'DTA'))  and (string-length($personalFlag) > 0 or string-length($preferredNameFlag) > 0)">
                                            <xsl:variable name="actionCode">
                                                <xsl:call-template name="actionCodeTranslation"/>
                                            </xsl:variable>
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'personal'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="$actionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="$effectiveMomentDate"/>
                                                <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                                <xsl:with-param name="checkCountry" select="$checkCountry"/>
                                                <xsl:with-param name="addressUsageBehavior" select="$addressUsageBehavior"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                            </xsl:call-template>
                                        </xsl:if>                               
                                    </xsl:for-each>
                                    
                                    <xsl:if test="(peci:Personal[string-length(@*[local-name()]) = 0] or string-length(peci:Personal) = 0) and ($checkHIR-RwithHIR = 'N' or ($checkHIR-RwithHIR = 'Y' and ../peci:Derived_Event_Code = 'DTA'))">
                                        <xsl:for-each select="peci:Person_Communication[@*[local-name()]]">
                                            <xsl:if test="peci:Address[@*[local-name()]] or peci:Email[@*[local-name()]]">
                                                <xsl:variable name="actionCode">
                                                    <xsl:choose>
                                                        <xsl:when test="peci:Address[@*[local-name()]]">
                                                            <xsl:choose>
                                                                <xsl:when test="$positionHomeOrHost = 'Home' and $checkHomeCountry =''">
                                                                    <xsl:for-each select="peci:Address[@*[local-name()]][peci:Country = $payGroupCountry]">
                                                                        <xsl:call-template name="actionCodeTranslation"/>
                                                                    </xsl:for-each>
                                                                </xsl:when>
                                                                <xsl:when test="$positionHomeOrHost = 'Host' and $checkHostCountry =''">
                                                                    <xsl:for-each select="peci:Address[@*[local-name()]][peci:Country = $payGroupCountry]">
                                                                        <xsl:call-template name="actionCodeTranslation"/>
                                                                    </xsl:for-each>
                                                                </xsl:when>
                                                                <xsl:when test="$positionHomeOrHost = 'Host' and $checkHostCountry ='Y'">
                                                                    <xsl:for-each select="peci:Address[@*[local-name()]][peci:Country = $payGroupCountry]">
                                                                        <xsl:call-template name="actionCodeTranslation"/>
                                                                    </xsl:for-each>
                                                                </xsl:when>
                                                                <xsl:when test="$positionHomeOrHost = 'Home' and $checkHomeCountry ='Y'">
                                                                    <xsl:for-each select="peci:Address[@*[local-name()]][peci:Country = $payGroupCountry]">
                                                                        <xsl:call-template name="actionCodeTranslation"/>
                                                                    </xsl:for-each>
                                                                </xsl:when>
                                                                <xsl:otherwise>     
                                                                    <xsl:variable name="addressCount" select="count(peci:Address)"/>
                                                                    <xsl:choose>
                                                                        <xsl:when test="$addressCount > 1">
                                                                            <xsl:call-template name="actionCodeTranslation"/>     
                                                                        </xsl:when>
                                                                        <xsl:otherwise>
                                                                            <xsl:for-each select="peci:Address[@*[local-name()]]">
                                                                                <xsl:call-template name="actionCodeTranslation"/>
                                                                            </xsl:for-each>
                                                                        </xsl:otherwise>
                                                                    </xsl:choose>                                                                                                                                     
                                                                </xsl:otherwise>
                                                            </xsl:choose>                                                         
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <xsl:for-each select="peci:Email[@*[local-name()]]">
                                                                <xsl:call-template name="actionCodeTranslation"/>
                                                            </xsl:for-each>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                    
                                                </xsl:variable>
                                                <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                    <xsl:with-param name="bodType" select="'personal'"/>
                                                    <xsl:with-param name="creationDateTime"
                                                        select="$CreationDateTime"/>
                                                    <xsl:with-param name="bodid"
                                                        select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                    <xsl:with-param name="actionCode" select="$actionCode"/>
                                                    <xsl:with-param name="personID" select="$personID"/>
                                                    <xsl:with-param name="employeeID" select="$employeeID"/>
                                                    <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                    <xsl:with-param name="effectiveMomentDate"
                                                        select="$effectiveMomentDate"/>
                                                    <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                                    <xsl:with-param name="checkCountry" select="$checkCountry"/>
                                                    <xsl:with-param name="addressUsageBehavior" select="$addressUsageBehavior"/>
                                                    <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                </xsl:call-template>
                                            </xsl:if>                                   
                                        </xsl:for-each>
                                    </xsl:if>           
                                    
                                    <!-- **         PersonLegalIDs Data Change        ** -->
                                    <!-- **         When peci:Person_Identification isAdded         ** -->
                                    <xsl:for-each select="peci:Person_Identification[@*[local-name() = 'isAdded']]">   
                                        <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                            <xsl:with-param name="bodType" select="'personLegalIdMain'"/>
                                            <xsl:with-param name="creationDateTime"
                                                select="$CreationDateTime"/>
                                            <xsl:with-param name="bodid"
                                                select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                            <xsl:with-param name="actionCode" select="'ADD'"/>
                                            <xsl:with-param name="personID" select="$personID"/>
                                            <xsl:with-param name="employeeID" select="$employeeID"/>
                                            <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                            <xsl:with-param name="effectiveMomentDate"
                                                select="$effectiveMomentDate"/>             
                                            <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                        </xsl:call-template>                
                                        
                                        <xsl:for-each select="peci:Visa">
                                            <xsl:if test="peci:Country = 'CH'">                                           
                                                <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                    <xsl:with-param name="bodType" select="'localVisaCH'"/>
                                                    <xsl:with-param name="creationDateTime"
                                                        select="$CreationDateTime"/>
                                                    <xsl:with-param name="bodid"
                                                        select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                    <xsl:with-param name="actionCode" select="'ADD'"/>
                                                    <xsl:with-param name="personID" select="$personID"/>
                                                    <xsl:with-param name="employeeID" select="$employeeID"/>
                                                    <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                    <xsl:with-param name="effectiveMomentDate"
                                                        select="$effectiveMomentDate"/>
                                                </xsl:call-template>
                                            </xsl:if>               
                                        </xsl:for-each>                                      
                                    </xsl:for-each>
                                    
                                    <!-- **         When peci:Person_Identification isUpdated       ** -->
                                    <!-- **         Process each section based on attributes        ** -->
                                    <xsl:for-each select="peci:Person_Identification[@*[local-name() != 'isAdded']]">  
                                        <!-- **     Process sections with isAdded attributes        ** -->
                                        <xsl:for-each-group select="*[@*[local-name() = 'isAdded']]" group-by="@*[local-name() = 'isAdded']">                                          
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'personLegalIdAdd'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="'ADD'"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="$effectiveMomentDate"/>            
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                            </xsl:call-template>                
                                        </xsl:for-each-group>                                      
                                        <!-- **     Process sections with isUpdated attributes        ** -->
                                        <xsl:for-each-group select="*[@*[local-name() = 'isUpdated']]" group-by="@*[local-name() = 'isUpdated']">                                          
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'personLegalIdUpdate'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="'CHANGE'"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="$effectiveMomentDate"/>             
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                            </xsl:call-template>                
                                        </xsl:for-each-group>       
                                        <!-- **     Process sections with isDeleted attributes        ** -->
                                        <xsl:for-each-group select="*[@*[local-name() = 'isDeleted']]" group-by="@*[local-name() = 'isDeleted']">                                          
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'personLegalIdDelete'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="'DELETE'"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="$effectiveMomentDate"/>          
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                            </xsl:call-template>                
                                        </xsl:for-each-group>                     
                                    </xsl:for-each>
                                    
                                    
                                   
                                             
                                    
                                    <!--       Switzerland Local Payroll Data for Religion during data change     -->     
                                    <xsl:for-each select="peci:Personal[@*[local-name()]]/peci:Religion[@*[local-name()]]">
                                        <xsl:if test="$varCountryCode ='CH'">
                                            <xsl:variable name="actionCode">
                                                <xsl:call-template name="actionCodeTranslation"/>
                                            </xsl:variable>
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'localReligionCH'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="$actionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="$effectiveMomentDate"/>
                                            </xsl:call-template>
                                        </xsl:if>
                                    </xsl:for-each>
                                    
                                    <!--       Switzerland Local Payroll Data for VISA during data change     -->
                                    <xsl:for-each select="peci:Person_Identification[@*[local-name()]]/peci:Visa[@*[local-name()]]">
                                        <xsl:if test="peci:Country = 'CH'">
                                            <xsl:variable name="actionCode">
                                                <xsl:call-template name="actionCodeTranslation"/>
                                            </xsl:variable>
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'localVisaCH'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="$actionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="$effectiveMomentDate"/>
                                            </xsl:call-template>
                                        </xsl:if>                           
                                    </xsl:for-each>
                                    
                                    <!--       Brazil Local Payroll Data for Passport Issued Date during data change      -->
                                    <xsl:for-each select="peci:Person_Identification[@*[local-name()]]/peci:Passport[@*[local-name()]]">
                                        <xsl:if test="peci:Country = 'BR' and peci:Issued_Date[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                            <xsl:variable name="actionCode">
                                                <xsl:call-template name="actionCodeTranslation"/>
                                            </xsl:variable>
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'localPassportBR'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="$actionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="$effectiveMomentDate"/>
                                            </xsl:call-template>
                                        </xsl:if>                           
                                    </xsl:for-each>
                                    
                                    <!--       Korea Local Payroll Data for Local Name during data change     -->
                                    <xsl:for-each select="peci:Personal[@*[local-name()]]/peci:Legal_Name[@*[local-name()]]">
                                        <xsl:if test="peci:Country = 'KR' and (peci:First_Name_Local_2[@*[local-name()]] or peci:Last_Name_Local_2[@*[local-name()]])">
                                            <xsl:variable name="actionCode">
                                                <xsl:call-template name="actionCodeTranslation"/>
                                            </xsl:variable>
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'localScriptNameKR'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="$actionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="$effectiveMomentDate"/>
                                            </xsl:call-template>
                                        </xsl:if>                           
                                    </xsl:for-each>
                                    
                                    <!--   Mexico Local Payroll Data for Personal Information during data change   -->
                                    <xsl:if test="peci:Personal[@*[local-name()]]/peci:Legal_Name[@*[local-name()]]/peci:Secondary_Last_Name[@*[local-name()]] and peci:Personal/peci:Legal_Name/peci:Country = 'MX'">
                                        <xsl:variable name="actionCode">
                                            <xsl:call-template name="actionCodeTranslation"/>
                                        </xsl:variable>
                                        <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                            <xsl:with-param name="bodType" select="'localMXPI'"/>
                                            <xsl:with-param name="creationDateTime"
                                                select="$CreationDateTime"/>
                                            <xsl:with-param name="bodid"
                                                select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                            <xsl:with-param name="actionCode" select="$actionCode"/>
                                            <xsl:with-param name="personID" select="$personID"/>
                                            <xsl:with-param name="employeeID" select="$employeeID"/>
                                            <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                            <xsl:with-param name="effectiveMomentDate"
                                                select="substring(peci:Effective_Moment,1,10)"/>
                                        </xsl:call-template>
                                    </xsl:if>                        
                                    
                                    <!--       Japan Local Payroll Data for Personal Details during data change  -->
                                    <xsl:for-each select="peci:Personal[@*[local-name()]]">
                                        <xsl:variable name="jppdFlag">
                                            <xsl:value-of select="concat(peci:Preferred_Name[@*[local-name()]]/peci:Last_Name_Local[@*[local-name()]],peci:Preferred_Name[@*[local-name()]]/peci:First_Name_Local[@*[local-name()]],peci:Preferred_Name[@*[local-name()]]/peci:Last_Name_Local_2[@*[local-name()]],
                                                peci:Preferred_Name[@*[local-name()]]/peci:First_Name_Local_2[@*[local-name()]],peci:Additional_Name[@*[local-name()]]/peci:Last_Name_Local[@*[local-name()]],peci:Additional_Name[@*[local-name()]]/peci:Last_Name_Local_2[@*[local-name()]],peci:Additional_Name[@*[local-name()]]/peci:Last_Name[@*[local-name()]],
                                                peci:Legal_Name[@*[local-name()]]/peci:Last_Name_Local_2[@*[local-name()]],peci:Legal_Name[@*[local-name()]]/peci:Last_Name_Local[@*[local-name()]],peci:Legal_Name[@*[local-name()]]/peci:First_Name_Local[@*[local-name()]],peci:Legal_Name[@*[local-name()]]/peci:First_Name_Local_2[@*[local-name()]],peci:Legal_Name[@*[local-name()]]/peci:First_Name[@*[local-name()]])"/>
                                        </xsl:variable>
                                        <xsl:variable name="actionCode">
                                            <xsl:call-template name="actionCodeTranslation"/>
                                        </xsl:variable>
                                        <xsl:if test="(peci:Preferred_Name/peci:Country = 'JP' or peci:Legal_Name/peci:Country = 'JP') and string-length($jppdFlag) > 0 ">                                  
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'localJppdJP'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="$actionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                <xsl:with-param name="checkDTAEvent" select="$checkDTAEvent"/>
                                                <xsl:with-param name="checkPGIEvent" select="$checkPGIEvent"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="substring(../peci:Effective_Moment,1,10)"/>
                                            </xsl:call-template>
                                        </xsl:if>                           
                                    </xsl:for-each>                
                                    
                                    <!--       Japan Local Payroll Data for Local Address Details during data change  -->
                                    <xsl:for-each select="peci:Person_Communication[@*[local-name()]]">
                                        <xsl:choose>
                                            <xsl:when test="peci:Address[@*[local-name() != 'isAdded']]">
                                                <xsl:for-each select="peci:Address[@*[local-name()]]">
                                                    <xsl:variable name="jpaddrFlag">
                                                        <xsl:value-of select="concat(peci:Address_Line_1_Local[@*[local-name()]],peci:Address_Line_5_Local[@*[local-name()]],peci:City_Local[@*[local-name()]],peci:Address_Line_4_Local[@*[local-name()]],peci:Address_Line_6_Local[@*[local-name()]],
                                                            peci:Address_Line_2_Local[@*[local-name()]])"/>
                                                    </xsl:variable>
                                                    <xsl:variable name="actionCode">
                                                        <xsl:call-template name="actionCodeTranslation"/>
                                                    </xsl:variable>
                                                    <xsl:if test="peci:Country = 'JP' and string-length($jpaddrFlag) > 0">
                                                        <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                            <xsl:with-param name="bodType" select="'localJpaddrJP'"/>
                                                            <xsl:with-param name="creationDateTime"
                                                                select="$CreationDateTime"/>
                                                            <xsl:with-param name="bodid"
                                                                select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                            <xsl:with-param name="actionCode" select="$actionCode"/>
                                                            <xsl:with-param name="personID" select="$personID"/>
                                                            <xsl:with-param name="employeeID" select="$employeeID"/>
                                                            <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                            <xsl:with-param name="checkDTAEvent" select="$checkDTAEvent"/>
                                                            <xsl:with-param name="checkPGIEvent" select="$checkPGIEvent"/>
                                                            <xsl:with-param name="effectiveMomentDate"
                                                                select="substring(../../peci:Effective_Moment,1,10)"/>
                                                        </xsl:call-template>
                                                    </xsl:if>
                                                </xsl:for-each>     
                                            </xsl:when>
                                            <xsl:when test="peci:Address[@*[local-name() = 'isAdded']]">
                                                <xsl:for-each select="peci:Address">
                                                    <xsl:variable name="jpaddrFlag">
                                                        <xsl:value-of select="concat(peci:Address_Line_1_Local,peci:Address_Line_5_Local,peci:City_Local,peci:Address_Line_4_Local,peci:Address_Line_6_Local,peci:Address_Line_2_Local)"/>
                                                    </xsl:variable>
                                                    <xsl:variable name="actionCode">
                                                        <xsl:call-template name="actionCodeTranslation"/>
                                                    </xsl:variable>
                                                    <xsl:if test="peci:Country = 'JP' and string-length($jpaddrFlag) > 0">
                                                        <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                            <xsl:with-param name="bodType" select="'localJpaddrJP'"/>
                                                            <xsl:with-param name="creationDateTime"
                                                                select="$CreationDateTime"/>
                                                            <xsl:with-param name="bodid"
                                                                select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                            <xsl:with-param name="actionCode" select="$actionCode"/>
                                                            <xsl:with-param name="personID" select="$personID"/>
                                                            <xsl:with-param name="employeeID" select="$employeeID"/>
                                                            <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                            <xsl:with-param name="checkDTAEvent" select="$checkDTAEvent"/>
                                                            <xsl:with-param name="checkPGIEvent" select="$checkPGIEvent"/>
                                                            <xsl:with-param name="checkisAddedDTA" select="'Y'"/>
                                                            <xsl:with-param name="effectiveMomentDate"
                                                                select="substring(../../peci:Effective_Moment,1,10)"/>
                                                        </xsl:call-template>
                                                    </xsl:if>
                                                </xsl:for-each>                                              
                                            </xsl:when>
                                        </xsl:choose>
                                    </xsl:for-each>
                                    
                                    <!--       Japan Local Payroll Data for Family Details during data change      -->
                                    <xsl:if test="$varCountryCode = 'JP' and peci:Related_Person">
                                        
                                        <xsl:variable name="jpRelatedPerson">
                                            <xsl:for-each select="peci:Related_Person[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0][peci:Relationship_Type = ('Child','Spouse')]">
                                                <xsl:if test="peci:Dependent_ID[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                    <peci:Related_Person>   
                                                        <xsl:copy-of select="*"/>    
                                                        <nga:ActionCode>
                                                            <xsl:value-of select="'ADD'"/>
                                                        </nga:ActionCode>
                                                    </peci:Related_Person>
                                                </xsl:if>
                                            </xsl:for-each>    
                                        </xsl:variable>                    
                                        
                                        <xsl:for-each-group select="$jpRelatedPerson/peci:Related_Person" group-by="nga:ActionCode">
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">                                       
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="nga:ActionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>  
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                <xsl:with-param name="checkDTAEvent" select="$checkDTAEvent"/>
                                                <xsl:with-param name="checkPGIEvent" select="$checkPGIEvent"/>
                                                <xsl:with-param name="bodType" select="'localJpfaJP'"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="$effectiveMomentDate"/>            
                                                <xsl:with-param name="relatedPerson" select="$jpRelatedPerson"/>
                                            </xsl:call-template>    
                                        </xsl:for-each-group>
                                    </xsl:if>
                                    
                                    <!--    Singapore Local Payroll Data on Regligion and Ethnicity during data change. -->
                                    <xsl:if test="$varCountryCode ='SG'">
                                        <xsl:for-each select="peci:Personal[@*[local-name()]]">
                                            <xsl:if test="peci:Religion[@*[local-name()]] or peci:Ethnicity[@*[local-name()]]/peci:Ethnicity_ID">
                                                <xsl:variable name="actionCode">
                                                    <xsl:choose>
                                                        <xsl:when test="peci:Religion[@*[local-name() = 'isAdded']] and peci:Ethnicity[@*[local-name() = 'isAdded']]">
                                                            <xsl:value-of select="'ADD'"/>
                                                        </xsl:when>
                                                        <xsl:when test="peci:Religion[@*[local-name() = 'isDeleted']] and peci:Ethnicity[@*[local-name() = 'isDeleted']]">
                                                            <xsl:value-of select="'CHANGE'"/>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <xsl:value-of select="'CHANGE'"/>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                    
                                                </xsl:variable>
                                                <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                    <xsl:with-param name="bodType" select="'localPersonalInfoSG'"/>
                                                    <xsl:with-param name="creationDateTime"
                                                        select="$CreationDateTime"/>
                                                    <xsl:with-param name="bodid"
                                                        select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                    <xsl:with-param name="actionCode" select="$actionCode"/>
                                                    <xsl:with-param name="personID" select="$personID"/>
                                                    <xsl:with-param name="employeeID" select="$employeeID"/>
                                                    <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                    <xsl:with-param name="tableLocalData" select="$sgReligionEthnicity"/>
                                                    <xsl:with-param name="effectiveMomentDate"
                                                        select="substring(../peci:Effective_Moment,1,10)"/>
                                                </xsl:call-template>
                                            </xsl:if>
                                        </xsl:for-each>                                    
                                    </xsl:if>
                                    
                                    <!--    Philippines Local Payroll Data Dependent Children during data change. -->
                                    <xsl:if test="$varCountryCode = 'PH' and peci:Related_Person">
                                        <!--    Reformat PH Related_Person     -->
                                        <xsl:variable name="effectiveDate" select="substring(peci:Effective_Moment,1,10)"/>
                                        <xsl:variable name="phRelatedPerson">
                                            <nga:Related_Person_PH>
                                                <xsl:for-each select="peci:Related_Person[peci:Relationship_Type = 'Child' and string-length(peci:Dependent_ID[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]) > 0]">
                                                    <xsl:sort select="peci:Dependent_ID[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]" order="ascending"/> 
                                                    <nga:Child>
                                                        <nga:Count>
                                                            <xsl:value-of select="position()"/>
                                                        </nga:Count>
                                                        <peci:Last_Name>
                                                            <xsl:value-of select="peci:Legal_Name/peci:Last_Name"/>
                                                        </peci:Last_Name>
                                                        <peci:First_Name>
                                                            <xsl:value-of select="peci:Legal_Name/peci:First_Name"/>
                                                        </peci:First_Name>
                                                        <peci:Birth_Date>
                                                            <xsl:value-of select="substring(peci:Birth_Date,1,10)"/>
                                                        </peci:Birth_Date>
                                                        <peci:Gender>
                                                            <xsl:choose>
                                                                <xsl:when test="peci:Gender = 'Male'">
                                                                    <xsl:value-of select="'0'"/>
                                                                </xsl:when>
                                                                <xsl:when test="peci:Gender = 'Female'">
                                                                    <xsl:value-of select="'1'"/>
                                                                </xsl:when>
                                                            </xsl:choose>
                                                        </peci:Gender>
                                                        <nga:XPath>
                                                            <xsl:for-each select="ancestor-or-self::*">
                                                                <xsl:value-of select="concat('/',name())"/>
                                                                <xsl:if test="(preceding-sibling::*|following-sibling::*)[local-name()=local-name(current())]">
                                                                    <xsl:value-of select="concat('[',count(preceding-sibling::*[local-name()=local-name(current())])+1,']')"/>
                                                                </xsl:if>
                                                            </xsl:for-each>
                                                        </nga:XPath>
                                                    </nga:Child>
                                                </xsl:for-each>                                    
                                            </nga:Related_Person_PH>                                       
                                        </xsl:variable>
                                        
                                        <xsl:for-each select="$phRelatedPerson/nga:Related_Person_PH">
                                            <xsl:if test="string-length(.) > 0">
                                                <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                    <xsl:with-param name="bodType" select="'localDepChildPH'"/>
                                                    <xsl:with-param name="creationDateTime"
                                                        select="$CreationDateTime"/>
                                                    <xsl:with-param name="bodid"
                                                        select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                    <xsl:with-param name="actionCode" select="'ADD'"/>
                                                    <xsl:with-param name="personID" select="$personID"/>
                                                    <xsl:with-param name="employeeID" select="$employeeID"/>
                                                    <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                    <xsl:with-param name="effectiveMomentDate"
                                                        select="$effectiveDate"/>
                                                </xsl:call-template>
                                            </xsl:if>                                   
                                        </xsl:for-each>
                                    </xsl:if>
                                    
                                    <!--    Greece Local Payroll Data Father's and Mother's name during data change. -->
                                    <xsl:if test="$varCountryCode = 'GR' and peci:Related_Person">       
                                        <xsl:variable name="grRelatedPerson">
                                            <xsl:for-each select="peci:Related_Person[peci:Legal_Name/peci:Country='GR']">    
                                                <nga:Related_Person_GR>
                                                    <nga:ActionCode>
                                                        <xsl:choose>
                                                            <xsl:when test="@*[local-name() = ('isAdded','isUpdated')]">
                                                                <xsl:value-of select="'ADD'"/>
                                                            </xsl:when>
                                                            <xsl:when test="../peci:Related_Person[string-length(@*[local-name()]) = 0] and preceding-sibling::peci:Related_Person[@*[local-name() = ('isAdded','isUpdated')]]">
                                                                <xsl:value-of select="'ADD'"/>
                                                            </xsl:when>
                                                            <xsl:when test="../peci:Related_Person[string-length(@*[local-name()]) = 0] and following-sibling::peci:Related_Person[@*[local-name() = ('isAdded','isUpdated')]]">
                                                                <xsl:value-of select="'ADD'"/>
                                                            </xsl:when>
                                                            <xsl:when test="../peci:Related_Person[string-length(@*[local-name()]) = 0] and preceding-sibling::peci:Related_Person[@*[local-name() = 'isDeleted']]">
                                                                <xsl:value-of select="'DELETE'"/>
                                                            </xsl:when>
                                                            <xsl:when test="../peci:Related_Person[string-length(@*[local-name()]) = 0] and following-sibling::peci:Related_Person[@*[local-name() = 'isDeleted']]">
                                                                <xsl:value-of select="'DELETE'"/>
                                                            </xsl:when>
                                                            <xsl:when test="@*[local-name() = 'isDeleted']">
                                                                <xsl:value-of select="'DELETE'"/>
                                                            </xsl:when>
                                                        </xsl:choose>
                                                    </nga:ActionCode>
                                                    <xsl:if test="peci:Relationship_Type='Parent' and peci:Gender = 'Male'">
                                                        <nga:FathersName>
                                                            <xsl:choose>
                                                                <xsl:when test="peci:Legal_Name/peci:First_Name_Local and peci:Legal_Name/peci:Last_Name_Local">
                                                                    <xsl:value-of select="substring(concat(peci:Legal_Name/peci:First_Name_Local,' ',peci:Legal_Name/peci:Last_Name_Local),1,40)"/>
                                                                    <xsl:call-template name="usedPECIData">
                                                                        <xsl:with-param name="xpath">
                                                                            <xsl:for-each select="peci:Legal_Name/peci:First_Name_Local">
                                                                                <xsl:call-template name="print-field-xpath"/> 
                                                                            </xsl:for-each>                       
                                                                        </xsl:with-param>
                                                                    </xsl:call-template>
                                                                    <xsl:call-template name="usedPECIData">
                                                                        <xsl:with-param name="xpath">
                                                                            <xsl:for-each select="peci:Legal_Name/peci:Last_Name_Local">
                                                                                <xsl:call-template name="print-field-xpath"/> 
                                                                            </xsl:for-each>                       
                                                                        </xsl:with-param>
                                                                    </xsl:call-template>
                                                                </xsl:when>
                                                                <xsl:when test="peci:Legal_Name/peci:First_Name and peci:Legal_Name/peci:Last_Name">
                                                                    <xsl:value-of select="substring(concat(peci:Legal_Name/peci:First_Name,' ',peci:Legal_Name/peci:Last_Name),1,40)"/>
                                                                    <xsl:call-template name="usedPECIData">
                                                                        <xsl:with-param name="xpath">
                                                                            <xsl:for-each select="peci:Legal_Name/peci:First_Name">
                                                                                <xsl:call-template name="print-field-xpath"/> 
                                                                            </xsl:for-each>                       
                                                                        </xsl:with-param>
                                                                    </xsl:call-template>
                                                                    <xsl:call-template name="usedPECIData">
                                                                        <xsl:with-param name="xpath">
                                                                            <xsl:for-each select="peci:Legal_Name/peci:Last_Name">
                                                                                <xsl:call-template name="print-field-xpath"/> 
                                                                            </xsl:for-each>                       
                                                                        </xsl:with-param>
                                                                    </xsl:call-template>
                                                                </xsl:when>
                                                            </xsl:choose>
                                                        </nga:FathersName>
                                                    </xsl:if>
                                                    <xsl:if test="peci:Relationship_Type='Parent' and peci:Gender = 'Female'">
                                                        <nga:MothersName>
                                                            <xsl:choose>
                                                                <xsl:when test="peci:Legal_Name/peci:First_Name_Local and peci:Legal_Name/peci:Last_Name_Local">
                                                                    <xsl:value-of select="substring(concat(peci:Legal_Name/peci:First_Name_Local,' ',peci:Legal_Name/peci:Last_Name_Local),1,40)"/>
                                                                    <xsl:call-template name="usedPECIData">
                                                                        <xsl:with-param name="xpath">
                                                                            <xsl:for-each select="peci:Legal_Name/peci:First_Name_Local">
                                                                                <xsl:call-template name="print-field-xpath"/> 
                                                                            </xsl:for-each>                       
                                                                        </xsl:with-param>
                                                                    </xsl:call-template>
                                                                    <xsl:call-template name="usedPECIData">
                                                                        <xsl:with-param name="xpath">
                                                                            <xsl:for-each select="peci:Legal_Name/peci:Last_Name_Local">
                                                                                <xsl:call-template name="print-field-xpath"/> 
                                                                            </xsl:for-each>                       
                                                                        </xsl:with-param>
                                                                    </xsl:call-template>
                                                                </xsl:when>
                                                                <xsl:when test="peci:Legal_Name/peci:First_Name and peci:Legal_Name/peci:Last_Name">
                                                                    <xsl:value-of select="substring(concat(peci:Legal_Name/peci:First_Name,' ',peci:Legal_Name/peci:Last_Name),1,40)"/>
                                                                    <xsl:call-template name="usedPECIData">
                                                                        <xsl:with-param name="xpath">
                                                                            <xsl:for-each select="peci:Legal_Name/peci:First_Name">
                                                                                <xsl:call-template name="print-field-xpath"/> 
                                                                            </xsl:for-each>                       
                                                                        </xsl:with-param>
                                                                    </xsl:call-template>
                                                                    <xsl:call-template name="usedPECIData">
                                                                        <xsl:with-param name="xpath">
                                                                            <xsl:for-each select="peci:Legal_Name/peci:Last_Name">
                                                                                <xsl:call-template name="print-field-xpath"/> 
                                                                            </xsl:for-each>                       
                                                                        </xsl:with-param>
                                                                    </xsl:call-template>
                                                                </xsl:when>
                                                            </xsl:choose>
                                                        </nga:MothersName>
                                                    </xsl:if>                                                        
                                                </nga:Related_Person_GR> 
                                            </xsl:for-each>
                                        </xsl:variable>
                                        
                                        <xsl:for-each-group select="$grRelatedPerson/nga:Related_Person_GR" group-by="nga:ActionCode">
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'localParentsNameGR'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="nga:ActionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                            </xsl:call-template>
                                        </xsl:for-each-group>      
                                    </xsl:if>  
                                    
                                    <!-- **   Payment Election Data Change      ** -->
                                    
                                    <!-- **   Restructure peci:Payment_Election ** -->
                                    <xsl:variable name="paymentElection">   
                                        <xsl:choose>
                                            <xsl:when test="string-length($positionHomeOrHost) > 0">
                                                <xsl:for-each select="peci:Payment_Election[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0][peci:Country = $payGroupCountry]">                                                    
                                                    <!--<xsl:sort select="peci:Order" order="descending"/>-->
                                                    <peci:Payment_Election>
                                                        <nga:Action_Code>
                                                            <xsl:value-of select="'ADD'"/>
                                                        </nga:Action_Code>
                                                        <nga:Payment_Method>
                                                            <xsl:call-template name="templatePaymentType">
                                                                <xsl:with-param name="Country">
                                                                    <xsl:choose>
                                                                        <xsl:when test="string-length(peci:Country) > 0">
                                                                            <xsl:value-of select="peci:Country"/>
                                                                        </xsl:when>
                                                                        <xsl:otherwise>
                                                                            <xsl:value-of select="'*'"/>
                                                                        </xsl:otherwise>
                                                                    </xsl:choose>
                                                                </xsl:with-param>
                                                                <xsl:with-param name="PaymentType"
                                                                    select="peci:Payment_Type"/>
                                                            </xsl:call-template>
                                                        </nga:Payment_Method>
                                                        <nga:XPath>
                                                            <xsl:for-each select="ancestor-or-self::*">
                                                                <xsl:value-of select="concat('/',name())"/>
                                                                <xsl:if test="(preceding-sibling::*|following-sibling::*)[local-name()=local-name(current())]">
                                                                    <xsl:value-of select="concat('[',count(preceding-sibling::*[local-name()=local-name(current())])+1,']')"/>
                                                                </xsl:if>
                                                            </xsl:for-each>
                                                        </nga:XPath>
                                                        <xsl:copy-of select="*"/>
                                                    </peci:Payment_Election>
                                                </xsl:for-each>                                                
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:for-each select="peci:Payment_Election[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">                                                    
                                                    <!--<xsl:sort select="peci:Order" order="descending"/>-->
                                                    <peci:Payment_Election>
                                                        <nga:Action_Code>
                                                            <xsl:value-of select="'ADD'"/>
                                                        </nga:Action_Code>
                                                        <nga:Payment_Method>
                                                            <xsl:call-template name="templatePaymentType">
                                                                <xsl:with-param name="Country">
                                                                    <xsl:choose>
                                                                        <xsl:when test="string-length(peci:Country) > 0">
                                                                            <xsl:value-of select="peci:Country"/>
                                                                        </xsl:when>
                                                                        <xsl:otherwise>
                                                                            <xsl:value-of select="'*'"/>
                                                                        </xsl:otherwise>
                                                                    </xsl:choose>
                                                                </xsl:with-param>
                                                                <xsl:with-param name="PaymentType"
                                                                    select="peci:Payment_Type"/>
                                                            </xsl:call-template>
                                                        </nga:Payment_Method>
                                                        <nga:XPath>
                                                            <xsl:for-each select="ancestor-or-self::*">
                                                                <xsl:value-of select="concat('/',name())"/>
                                                                <xsl:if test="(preceding-sibling::*|following-sibling::*)[local-name()=local-name(current())]">
                                                                    <xsl:value-of select="concat('[',count(preceding-sibling::*[local-name()=local-name(current())])+1,']')"/>
                                                                </xsl:if>
                                                            </xsl:for-each>
                                                        </nga:XPath>
                                                        <xsl:copy-of select="*"/>
                                                    </peci:Payment_Election>
                                                </xsl:for-each>                                                
                                            </xsl:otherwise>
                                        </xsl:choose>
                                       </xsl:variable>
                                    <xsl:variable name="countSection" select="max(peci:Payment_Election[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]/peci:Order)"/>
                                    <xsl:for-each-group select="$paymentElection/peci:Payment_Election[nga:Action_Code != 'DELETE']" group-by="nga:Action_Code">                            
                                        <xsl:if test="string-length($paymentElection) > 0">                               
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'paymentElection'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="nga:Action_Code"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="$effectiveMomentDate"/>
                                                <xsl:with-param name="paymentElection" select="$paymentElection"/>
                                                <xsl:with-param name="countSection" select="$countSection"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                            </xsl:call-template>
                                        </xsl:if>
                                    </xsl:for-each-group>
                                    
                                    <!-- **   Compensation Earnings and Deductions  ** -->
                                    
                                    <!-- **   Restructure Compensation Data         ** -->
                                    <xsl:variable name="compensationEarningsDeductions">
                                        <xsl:for-each select="peci:Compensation_Earnings_and_Deductions[@*[local-name()]]">
                                            <peci:Compensation_Earnings_Deductions>
                                                <xsl:variable name="actionCode">
                                                    <xsl:choose>
                                                        <xsl:when test="@*[local-name() = 'isUpdated'] and (peci:Amount/@peci:priorValue = '0' or peci:Non_Prorated_Amount/@peci:priorValue = '0')">
                                                            <xsl:value-of select="'ADD'"/>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <xsl:call-template name="actionCodeTranslation"/>
                                                        </xsl:otherwise>
                                                    </xsl:choose>                                            
                                                </xsl:variable>
                                                <nga:Action_Code>
                                                    <xsl:choose>
                                                        <xsl:when test="string-length($actionCode) > 0">
                                                            <xsl:value-of select="$actionCode"/>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <xsl:value-of select="'ADD'"/>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </nga:Action_Code>
                                                <nga:XPath>
                                                    <xsl:for-each select="ancestor-or-self::*">
                                                        <xsl:value-of select="concat('/',name())"/>
                                                        <xsl:if test="(preceding-sibling::*|following-sibling::*)[local-name()=local-name(current())]">
                                                            <xsl:value-of select="concat('[',count(preceding-sibling::*[local-name()=local-name(current())])+1,']')"/>
                                                        </xsl:if>
                                                    </xsl:for-each>
                                                </nga:XPath>
                                                <xsl:copy-of select="*"/>
                                            </peci:Compensation_Earnings_Deductions>
                                        </xsl:for-each>
                                    </xsl:variable>
                                    <xsl:for-each-group
                                        select="$compensationEarningsDeductions/peci:Compensation_Earnings_Deductions"
                                        group-by="concat(nga:Action_Code,peci:External_Payroll_Code)">
                                        <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                            <xsl:with-param name="bodType"
                                                select="'compensationEarningsDeductions'"/>
                                            <xsl:with-param name="creationDateTime"
                                                select="$CreationDateTime"/>
                                            <xsl:with-param name="bodid"
                                                select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                            <xsl:with-param name="actionCode" select="nga:Action_Code"/>
                                            <xsl:with-param name="personID" select="$personID"/>
                                            <xsl:with-param name="employeeID" select="$employeeID"/>
                                            <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                            <xsl:with-param name="effectiveMomentDate"
                                                select="$effectiveMomentDate"/>
                                            <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                        </xsl:call-template>
                                    </xsl:for-each-group>
                                    
                                    <!-- **   Payroll Input Earnings and Deductions     ** -->
                                    
                                    <!-- **   Restructure Payroll Input Data            ** -->
                                    <!-- **   isDeleted Logic for Payroll Input         ** -->
                                    <xsl:variable name="isDeletedSections">
                                        <xsl:for-each select="peci:Payroll_Input_Earnings_and_Deductions[@*[local-name() = 'isDeleted']]">
                                            <isDeleted>
                                                <xsl:value-of select="concat(peci:External_Payroll_Code,peci:Start_Date,peci:End_Date,peci:Amount,peci:Currency,peci:Worktag/peci:Worktag_Code)"/>
                                            </isDeleted>                                  
                                        </xsl:for-each>
                                    </xsl:variable> 
                                    <xsl:variable name="isAddedSections">
                                        <xsl:for-each select="peci:Payroll_Input_Earnings_and_Deductions[@*[local-name() = 'isAdded']]">
                                            <isAdded>
                                                <xsl:value-of select="concat(peci:External_Payroll_Code,peci:Start_Date,peci:End_Date,peci:Amount,peci:Currency,peci:Worktag/peci:Worktag_Code)"/>
                                            </isAdded>                                  
                                        </xsl:for-each>
                                    </xsl:variable> 
                                    
                                    <xsl:variable name="payrollInputEarningsDeductions">                              
                                        <xsl:for-each select="peci:Payroll_Input_Earnings_and_Deductions[@*[local-name()]]">                                   
                                            <xsl:variable name="isAddedFlag">
                                                <xsl:value-of select="concat(.[@*[local-name() = 'isAdded']]/peci:External_Payroll_Code,.[@*[local-name() = 'isAdded']]/peci:Start_Date,.[@*[local-name() = 'isAdded']]/peci:End_Date,
                                                    .[@*[local-name() = 'isAdded']]/peci:Amount,.[@*[local-name() = 'isAdded']]/peci:Currency,.[@*[local-name() = 'isAdded']]/peci:Worktag/peci:Worktag_Code)"/>
                                            </xsl:variable>
                                            <xsl:variable name="isDeletedFlag">
                                                <xsl:value-of select="concat(.[@*[local-name() = 'isDeleted']]/peci:External_Payroll_Code,.[@*[local-name() = 'isDeleted']]/peci:Start_Date,.[@*[local-name() = 'isDeleted']]/peci:End_Date,
                                                    .[@*[local-name() = 'isDeleted']]/peci:Amount,.[@*[local-name() = 'isDeleted']]/peci:Currency,.[@*[local-name() = 'isDeleted']]/peci:Worktag/peci:Worktag_Code)"/>
                                            </xsl:variable>
                                            <peci:Payroll_Input_Earnings_Deductions>
                                                <xsl:variable name="actionCode">
                                                    <xsl:call-template name="actionCodeTranslation"/>
                                                </xsl:variable>
                                                <nga:Action_Code>
                                                    <xsl:choose>
                                                        <xsl:when test="string-length($actionCode) > 0">
                                                            <xsl:value-of select="$actionCode"/>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <xsl:value-of select="'ADD'"/>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </nga:Action_Code>
                                                <nga:ProcessFlagDelete>
                                                    <xsl:if test=".[@*[local-name() = 'isDeleted']]">
                                                        <xsl:for-each select="$isAddedSections/isAdded">
                                                            <xsl:if test=". = $isDeletedFlag">
                                                                <xsl:value-of select="'N'"/>
                                                            </xsl:if>
                                                        </xsl:for-each>
                                                    </xsl:if>
                                                </nga:ProcessFlagDelete>
                                                <nga:ProcessFlagAdd>
                                                    <xsl:if test=".[@*[local-name() = 'isAdded']]">
                                                        <xsl:for-each select="$isDeletedSections/isDeleted">
                                                            <xsl:if test=". = $isAddedFlag">
                                                                <xsl:value-of select="'N'"/>
                                                            </xsl:if>
                                                        </xsl:for-each>
                                                    </xsl:if>
                                                </nga:ProcessFlagAdd>
                                                <nga:XPath>
                                                    <xsl:for-each select="ancestor-or-self::*">
                                                        <xsl:value-of select="concat('/',name())"/>
                                                        <xsl:if test="(preceding-sibling::*|following-sibling::*)[local-name()=local-name(current())]">
                                                            <xsl:value-of select="concat('[',count(preceding-sibling::*[local-name()=local-name(current())])+1,']')"/>
                                                        </xsl:if>
                                                    </xsl:for-each>
                                                </nga:XPath>
                                                <xsl:copy-of select="*"/>
                                            </peci:Payroll_Input_Earnings_Deductions>
                                        </xsl:for-each>
                                    </xsl:variable>
                                    
                                    <xsl:for-each-group
                                        select="$payrollInputEarningsDeductions/peci:Payroll_Input_Earnings_Deductions"
                                        group-by="concat(nga:Action_Code,peci:External_Payroll_Code)">
                                        <xsl:if test="nga:ProcessFlagDelete = '' and nga:ProcessFlagAdd=''">
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType"
                                                    select="'payrollInputEarningsDeductions'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="nga:Action_Code"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="$effectiveMomentDate"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                            </xsl:call-template>
                                        </xsl:if>
                                    </xsl:for-each-group>                                 
                                    
                                     
                                    <!-- **          Worker Status Termination Date          ** -->
                                    <xsl:for-each select="peci:Worker_Status[@*[local-name()]][peci:Status='Terminated']">
                                        <xsl:if test="../peci:Derived_Event_Code = 'DTA'">
                                            <xsl:variable name="actionCode">
                                                <xsl:call-template name="actionCodeTranslation"/>
                                            </xsl:variable>
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">                                 
                                                <xsl:with-param name="bodType"
                                                    select="'workerStatusTerminate'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="$actionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="$effectiveMomentDate"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                            </xsl:call-template>
                                        </xsl:if>                              
                                    </xsl:for-each>
                                    
                                    <!-- **          Worker Status Hire Date         ** -->
                                    <xsl:for-each select="peci:Worker_Status[peci:Status = 'Active']">
                                        <xsl:if test="../peci:Derived_Event_Code = 'HIR' and $checkHIR-RwithHIR = 'Y'">
                                            <xsl:variable name="actionCode">
                                                <xsl:call-template name="actionCodeTranslation"/>
                                            </xsl:variable>
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">                                 
                                                <xsl:with-param name="bodType"
                                                    select="'workerStatusActive'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="'CHANGE'"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="$effectiveMomentDate"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                            </xsl:call-template>
                                        </xsl:if>                               
                                    </xsl:for-each>                                    
                                    
                                    <!-- **          Worker Status Data Change         ** -->
                                    <xsl:for-each select="peci:Worker_Status[@*[local-name()]][peci:Status='Active']">
                                        <xsl:if test="(../peci:Derived_Event_Code = 'DTA')">
                                            <xsl:variable name="actionCode">
                                                <xsl:call-template name="actionCodeTranslation"/>
                                            </xsl:variable>
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">                                 
                                                <xsl:with-param name="bodType"
                                                    select="'workerStatus'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="$actionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="$effectiveMomentDate"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                            </xsl:call-template>
                                        </xsl:if>                               
                                    </xsl:for-each>          
                                    
                                    <xsl:variable name="countCostAlloc" select="count(peci:Costing_Allocation)"/>
                                    <xsl:variable name="countCostAllocDelete" select="count(peci:Costing_Allocation[@*[local-name() = 'isDeleted']])"/>
                                    <!-- **         Cost Assignment         **-->
                                    <xsl:variable name="costAllocation">
                                        <xsl:for-each select="peci:Costing_Allocation[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0][not(peci:Allocation_End_Date)]">
                                            <peci:Costing_Allocation>
                                                <nga:Action_Code>
                                                    <xsl:call-template name="actionCodeTranslation"/>
                                                </nga:Action_Code>
                                                <nga:XPath>
                                                    <xsl:for-each select="ancestor-or-self::*">
                                                        <xsl:value-of select="concat('/',name())"/>
                                                        <xsl:if test="(preceding-sibling::*|following-sibling::*)[local-name()=local-name(current())]">
                                                            <xsl:value-of select="concat('[',count(preceding-sibling::*[local-name()=local-name(current())])+1,']')"/>
                                                        </xsl:if>
                                                    </xsl:for-each>
                                                </nga:XPath>
                                                <xsl:copy-of select="*"/>                                    
                                            </peci:Costing_Allocation>
                                        </xsl:for-each>
                                    </xsl:variable>      
                                    <xsl:if test="peci:Costing_Allocation">
                                        <xsl:choose>
                                            <!-- No valid Cost_Allocation and all Cost_Allocation sections are isDeleted then get home cost center  -->
                                            <xsl:when test="string-length($costAllocation) = 0 and $countCostAlloc = $countCostAllocDelete">
                                                <xsl:for-each select="peci:Position/peci:Organization">
                                                    <xsl:if test="not(../peci:Position_End_Date) and peci:Organization_Type = 'COST_CENTER'">
                                                        <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                            <xsl:with-param name="bodType" select="'costAssignmentDeleteHomeOrg'"/>
                                                            <xsl:with-param name="creationDateTime"
                                                                select="$CreationDateTime"/>
                                                            <xsl:with-param name="bodid"
                                                                select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                            <xsl:with-param name="actionCode" select="'CHANGE'"/>
                                                            <xsl:with-param name="personID" select="$personID"/>
                                                            <xsl:with-param name="employeeID" select="$employeeID"/>
                                                            <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                            <xsl:with-param name="effectiveMomentDate"
                                                                select="$effectiveMomentDate"/>
                                                            <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                        </xsl:call-template>
                                                    </xsl:if>                               
                                                </xsl:for-each>
                                            </xsl:when>                                
                                            <!-- When all Cost_Allocation are isDeleted, then get pi:Position/peci:Organization -->
                                            <xsl:when test="string-length($costAllocation) = 0">
                                                <xsl:for-each select="peci:Position/peci:Organization">
                                                    <xsl:if test="not(../peci:Position_End_Date) and peci:Organization_Type = 'COST_CENTER'">
                                                        <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                            <xsl:with-param name="bodType" select="'costAssignmentHomeOrg'"/>
                                                            <xsl:with-param name="creationDateTime"
                                                                select="$CreationDateTime"/>
                                                            <xsl:with-param name="bodid"
                                                                select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                            <xsl:with-param name="actionCode" select="'CHANGE'"/>
                                                            <xsl:with-param name="personID" select="$personID"/>
                                                            <xsl:with-param name="employeeID" select="$employeeID"/>
                                                            <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                            <xsl:with-param name="effectiveMomentDate"
                                                                select="$effectiveMomentDate"/>
                                                            <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                        </xsl:call-template>
                                                    </xsl:if>                               
                                                </xsl:for-each>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <!-- Process Cost_Allocations when attributes are isAdded or isUpdated -->
                                                <xsl:for-each-group select="$costAllocation/peci:Costing_Allocation" group-by="nga:Action_Code">
                                                    <xsl:if test="string-length(peci:Costing_Worktag/peci:Worktag_Code) > 0">                                                                    
                                                        <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                            <xsl:with-param name="bodType" select="'costAssignment'"/>
                                                            <xsl:with-param name="creationDateTime"
                                                                select="$CreationDateTime"/>
                                                            <xsl:with-param name="bodid"
                                                                select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                            <xsl:with-param name="actionCode" select="nga:Action_Code"/>
                                                            <xsl:with-param name="personID" select="$personID"/>
                                                            <xsl:with-param name="employeeID" select="$employeeID"/>
                                                            <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                            <xsl:with-param name="effectiveMomentDate"
                                                                select="$effectiveMomentDate"/>
                                                            <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                        </xsl:call-template>
                                                    </xsl:if>
                                                </xsl:for-each-group>                                      
                                            </xsl:otherwise>
                                        </xsl:choose>                                 
                                    </xsl:if>
                                    
                                    <!-- **         Allowance Plan        **-->
                                    <xsl:for-each select="peci:Allowance_Plan[@*[local-name()]]">  
                                        <xsl:variable name="actionCode">
                                            <xsl:call-template name="actionCodeTranslation"/>
                                        </xsl:variable>
                                        <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                            <xsl:with-param name="bodType" select="'allowancePlan'"/>
                                            <xsl:with-param name="creationDateTime"
                                                select="$CreationDateTime"/>
                                            <xsl:with-param name="bodid"
                                                select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                            <xsl:with-param name="actionCode" select="$actionCode"/>
                                            <xsl:with-param name="personID" select="$personID"/>
                                            <xsl:with-param name="employeeID" select="$employeeID"/>
                                            <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                            <xsl:with-param name="effectiveMomentDate"
                                                select="$effectiveMomentDate"/>
                                            <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                        </xsl:call-template>        
                                    </xsl:for-each>
                                    
                                    <!-- **         Benefits            **-->
                                    <xsl:for-each select="peci:Benefits_Earnings_and_Deductions[@*[local-name()]]">  
                                        <xsl:variable name="benefitsFlag" select="concat(peci:Percentage[@*[local-name()]],peci:Amount[@*[local-name()]],peci:External_Payroll_Code[@*[local-name()]],
                                            peci:Worktag[@*[local-name()]]/peci:Worktag_Code[@*[local-name()]],peci:Currency[@*[local-name()]])"/>
                                        <xsl:variable name="vPercentage" select="number(peci:Percentage)"/>
                                        <xsl:variable name="vAmount" select="number(peci:Amount)"/>
                                        <xsl:variable name="actionCode">                                    
                                            <xsl:choose>
                                                <xsl:when test="$GCC = 'THA' and $checkLCC = 'AU001'">
                                                    <xsl:choose>
                                                        <xsl:when test="$vAmount = 0">
                                                            <xsl:choose>
                                                                <xsl:when test="$vPercentage != 0 and number(peci:Percentage/@peci:priorValue) = 0">
                                                                    <xsl:value-of select="'ADD'"/>
                                                                </xsl:when>
                                                                <xsl:when test="$vPercentage != 0 and number(peci:Percentage/@peci:priorValue) != 0">
                                                                    <xsl:value-of select="'CHANGE'"/>
                                                                </xsl:when>
                                                                <xsl:when test="$vPercentage = 0 and number(peci:Percentage/@peci:priorValue) != 0">
                                                                    <xsl:value-of select="'DELETE'"/>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <xsl:value-of select="'ADD'"/>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </xsl:when>    
                                                        <xsl:when test="$vPercentage = 0">
                                                            <xsl:choose>
                                                                <xsl:when test="$vAmount != 0 and number(peci:Amount/@peci:priorValue) = 0">
                                                                    <xsl:value-of select="'ADD'"/>
                                                                </xsl:when>
                                                                <xsl:when test="$vAmount != 0 and number(peci:Amount/@peci:priorValue) != 0">
                                                                    <xsl:value-of select="'CHANGE'"/>
                                                                </xsl:when>
                                                                <xsl:when test="$vAmount = 0 and number(peci:Amount/@peci:priorValue) != 0">
                                                                    <xsl:value-of select="'DELETE'"/>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <xsl:value-of select="'ADD'"/>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </xsl:when>
                                                    </xsl:choose>     
                                                </xsl:when>
                                                <xsl:when test="@*[local-name() = 'isUpdated'] and (peci:Amount/@peci:priorValue = '0' or peci:Percentage/@peci:priorValue = '0') 
                                                    and $GCC != 'THA' and $checkLCC != 'AU001'">
                                                    <xsl:value-of select="'ADD'"/>
                                                </xsl:when>                                       
                                                <xsl:otherwise>
                                                    <xsl:call-template name="actionCodeTranslation"/>
                                                </xsl:otherwise>
                                            </xsl:choose>                                      
                                        </xsl:variable>
                                        <xsl:if test="string-length($benefitsFlag) > 0">
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'benefits'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="$actionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="$effectiveMomentDate"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                            </xsl:call-template>
                                        </xsl:if>
                                    </xsl:for-each>
                                    
                                    <!-- **         One Time Compensation         **-->
                                    <xsl:for-each select="peci:Compensation_One_Time_Payment[@*[local-name()]]">  
                                        <xsl:variable name="actionCode">
                                            <xsl:call-template name="actionCodeTranslation"/>
                                        </xsl:variable>
                                        <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                            <xsl:with-param name="bodType" select="'oneTimeCompensation'"/>
                                            <xsl:with-param name="creationDateTime"
                                                select="$CreationDateTime"/>
                                            <xsl:with-param name="bodid"
                                                select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                            <xsl:with-param name="actionCode" select="$actionCode"/>
                                            <xsl:with-param name="personID" select="$personID"/>
                                            <xsl:with-param name="employeeID" select="$employeeID"/>
                                            <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                            <xsl:with-param name="effectiveMomentDate"
                                                select="$effectiveMomentDate"/>
                                            <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                        </xsl:call-template>        
                                    </xsl:for-each>
                                    
                                    <!--            Compensation Plan          ** -->                            
                                    <xsl:for-each select="peci:Compensation_Plans[@*[local-name()]]">            
                                        <xsl:choose>
                                            <xsl:when test="@*[local-name()= 'isAdded']">
                                                <xsl:for-each select="peci:Allowance_Plan">
                                                    <xsl:if test="peci:Compensation_Plan != 'N/A' and string-length(peci:Percentage) > 0">
                                                        <xsl:variable name="actionCode">
                                                            <xsl:call-template name="actionCodeTranslation"/>
                                                        </xsl:variable>
                                                        <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                            <xsl:with-param name="bodType" select="'compensationPlan'"/>
                                                            <xsl:with-param name="creationDateTime"
                                                                select="$CreationDateTime"/>
                                                            <xsl:with-param name="bodid"
                                                                select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                            <xsl:with-param name="actionCode" select="'ADD'"/>
                                                            <xsl:with-param name="personID" select="$personID"/>
                                                            <xsl:with-param name="employeeID" select="$employeeID"/>
                                                            <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                            <xsl:with-param name="effectiveMomentDate"
                                                                select="$effectiveMomentDate"/>
                                                            <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                        </xsl:call-template>        
                                                    </xsl:if>
                                                </xsl:for-each>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:for-each select="peci:Allowance_Plan[@*[local-name()]]">
                                                    <xsl:if test="peci:Compensation_Plan != 'N/A' and string-length(peci:Percentage) > 0">
                                                        <xsl:variable name="actionCode">
                                                            <xsl:call-template name="actionCodeTranslation"/>
                                                        </xsl:variable>
                                                        <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                            <xsl:with-param name="bodType" select="'compensationPlan'"/>
                                                            <xsl:with-param name="creationDateTime"
                                                                select="$CreationDateTime"/>
                                                            <xsl:with-param name="bodid"
                                                                select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                            <xsl:with-param name="actionCode" select="$actionCode"/>
                                                            <xsl:with-param name="personID" select="$personID"/>
                                                            <xsl:with-param name="employeeID" select="$employeeID"/>
                                                            <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                            <xsl:with-param name="effectiveMomentDate"
                                                                select="$effectiveMomentDate"/>
                                                            <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                                        </xsl:call-template>        
                                                    </xsl:if>
                                                </xsl:for-each>
                                            </xsl:otherwise>
                                        </xsl:choose>                                       
                                    </xsl:for-each>
                                    
                                    <!--            One Time Payment           ** -->                            
                                    <xsl:for-each select="peci:Payroll_One_Time_Payment[@*[local-name()]]">  
                                        <xsl:variable name="actionCode">
                                            <xsl:call-template name="actionCodeTranslation"/>
                                        </xsl:variable>
                                        <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                            <xsl:with-param name="bodType" select="'oneTimePayment'"/>
                                            <xsl:with-param name="creationDateTime"
                                                select="$CreationDateTime"/>
                                            <xsl:with-param name="bodid"
                                                select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                            <xsl:with-param name="actionCode" select="$actionCode"/>
                                            <xsl:with-param name="personID" select="$personID"/>
                                            <xsl:with-param name="employeeID" select="$employeeID"/>
                                            <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                            <xsl:with-param name="effectiveMomentDate"
                                                select="$effectiveMomentDate"/>
                                            <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                        </xsl:call-template>        
                                    </xsl:for-each>         
                                    
                                    <!-- **         Employee Contracts        ** -->
                                    <xsl:for-each select="peci:Employee_Contract[@*[local-name()]]">
                                        <xsl:variable name="actionCode">
                                            <xsl:call-template name="actionCodeTranslation"/>
                                        </xsl:variable>
                                        <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                            <xsl:with-param name="bodType" select="'employeeContract'"/>
                                            <xsl:with-param name="creationDateTime"
                                                select="$CreationDateTime"/>
                                            <xsl:with-param name="bodid"
                                                select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                            <xsl:with-param name="actionCode" select="$actionCode"/>
                                            <xsl:with-param name="personID" select="$personID"/>
                                            <xsl:with-param name="employeeID" select="$employeeID"/>
                                            <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                            <xsl:with-param name="effectiveMomentDate"
                                                select="$effectiveMomentDate"/>
                                            <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                        </xsl:call-template>        
                                    </xsl:for-each>                        
                                    
                                    <!-- **         Additional Information      ** -->
                                    <xsl:for-each select ="peci:Additional_Information[@*[local-name()]]">
                                        <xsl:variable name="addInfoFlag">
                                            <xsl:if test="string-length(concat(ptdf:JobTitle[@*[local-name()]],ptdf:ScheduledDays[@*[local-name()]],ptdf:LocationID[@*[local-name()]],ptdf:LocationID[@*[local-name()]],
                                                ptdf:WorkAddress[@*[local-name()]],/ptdf:PayScaleType[@*[local-name()]],ptdf:PayScaleGroup[@*[local-name()]],ptdf:PayGroupCode[@*[local-name()]],ptdf:PayScaleLevel[@*[local-name()]],
                                                ptdf:OrganizationID[@*[local-name()]],ptdf:EmployeeGroupCode[@*[local-name()]],ptdf:OrganizationName[@*[local-name()]])) > 0">
                                                <xsl:value-of select="'Y'"/>
                                            </xsl:if>
                                        </xsl:variable>
                                        <xsl:if test="$checkDTAEvent = 'N' and $addInfoFlag = 'Y'">
                                            <xsl:variable name="actionCode">
                                                <xsl:call-template name="actionCodeTranslation"/>
                                            </xsl:variable>
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'additionalInfo'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="$actionCode"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="$effectiveMomentDate"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                            </xsl:call-template>        
                                        </xsl:if>               
                                    </xsl:for-each>
                                    
                                    <!-- **        Payroll Specific Grouping        ** -->
                                    <xsl:for-each-group select ="peci:Additional_Information[@*[local-name()]]/*[contains(name(),'ptdf:PayrollSpecificGrouping')][@*[local-name()]]" group-by="@*/local-name()">
                                        <xsl:if test="$checkDTAEvent = 'N'">
                                            <xsl:variable name="actionCode">
                                                <xsl:call-template name="actionCodeTranslation"/>
                                            </xsl:variable>
                                            <xsl:variable name="attribute" select="@*/local-name()"/>
                                            
                                            <xsl:call-template name="peci:ProcessPayServEmpDataChange">
                                                <xsl:with-param name="bodType" select="'payrollSpecificGrouping'"/>
                                                <xsl:with-param name="creationDateTime"
                                                    select="$CreationDateTime"/>
                                                <xsl:with-param name="bodid"
                                                    select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                                <xsl:with-param name="actionCode" select="$actionCode"/>
                                                <xsl:with-param name="attribute" select="$attribute"/>
                                                <xsl:with-param name="personID" select="$personID"/>
                                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                                <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                                <xsl:with-param name="effectiveMomentDate"
                                                    select="$effectiveMomentDate"/>
                                                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                            </xsl:call-template>    
                                        </xsl:if>
                                    </xsl:for-each-group>
                                </xsl:if>                        
                                
                                <!-- ******************************************** -->
                                <!-- **        Process Termination Event       ** -->
                                <!-- ******************************************** -->       
                                <xsl:variable name="TERM-RFollowedByTERM">
                                    <xsl:if test="../peci:Effective_Change[peci:Derived_Event_Code = 'TERM-R'] and following-sibling::peci:Effective_Change[peci:Derived_Event_Code = 'TERM']">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>    
                                </xsl:variable>
                                <xsl:variable name="TERMPrecededByTERM-R">
                                    <xsl:if test="../peci:Effective_Change[peci:Derived_Event_Code = 'TERM'] and preceding-sibling::peci:Effective_Change[peci:Derived_Event_Code = 'TERM-R']">
                                        <xsl:value-of select="'Y'"/>
                                    </xsl:if>    
                                </xsl:variable>
                                
                                <xsl:if test="(peci:Derived_Event_Code='TERM' and $TERMPrecededByTERM-R !='Y') or (peci:Derived_Event_Code='PCO' and ($compTransRescindFlag !='Y' and
                                    $compTransEarlierDateFlag !='Y' and $compTransLaterDateFlag !='Y'))">
                                    <xsl:call-template name="peci:TransfromPECI2BODTermination">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'ADD'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="$employeeID"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                    </xsl:call-template>
                                </xsl:if>
                                
                                <!-- ******************************************** -->
                                <!-- **     Process Recinds and Corrections    ** -->
                                <!-- ******************************************** -->
                                
                                <!-- **             Hire Recinds               ** -->                                
                                <xsl:if test="peci:Derived_Event_Code = ('HIR-R') and $checkHIR-RwithHIR ='N' and $rehireRescindFlag != 'Y'">
                                    <xsl:call-template name="peci:TransfromPECI2BODHire">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'DELETE'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="$employeeID"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>                                      
                                        <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                        <xsl:with-param name="checkCountry" select="$checkCountry"/>
                                        <xsl:with-param name="addressUsageBehavior" select="$addressUsageBehavior"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                    </xsl:call-template>
                                </xsl:if>
                                
                                <!-- **             ReHire Recinds              ** -->     
                                <xsl:if test="peci:Derived_Event_Code = ('HIR-R') and $checkHIR-RwithHIR ='N' and $rehireRescindFlag = 'Y'">
                                    <xsl:call-template name="peci:TransfromPECI2BODHire">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'DELETE'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="$employeeID"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>                                      
                                        <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                        <xsl:with-param name="checkCountry" select="$checkCountry"/>
                                        <xsl:with-param name="addressUsageBehavior" select="$addressUsageBehavior"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                    </xsl:call-template>
                                </xsl:if>
                                <!-- **             Termination Rescinds        ** -->        
                                <xsl:if test="peci:Derived_Event_Code=  'TERM-R' and $TERM-RFollowedByTERM != 'Y'">
                                    <xsl:call-template name="peci:TransfromPECI2BODTermination">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'DELETE'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="$employeeID"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                    </xsl:call-template>
                                </xsl:if>
                                
                                <!-- **          Company Transfer Recinds       ** --> 
                                <xsl:if test="peci:Derived_Event_Code = ('PCI','ORG') and $compTransRescindFlag = 'Y'">
                                    <xsl:call-template name="peci:TransfromPECI2BODHire">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'DELETE'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="concat(../peci:Worker_Summary/peci:Employee_ID,$hireWMTableOrgID)"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>                                      
                                        <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                        <xsl:with-param name="checkCountry" select="$checkCountry"/>
                                        <xsl:with-param name="addressUsageBehavior" select="$addressUsageBehavior"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>     
                                        <xsl:with-param name="checkPGIEvent" select="$checkPGIEvent"/>
                                    </xsl:call-template>
                                    <xsl:call-template name="peci:TransfromPECI2BODTermination">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'DELETE'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="concat(../peci:Worker_Summary/peci:Employee_ID,$termWMTableOrgID)"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkPriorLogicalID"/>
                                    </xsl:call-template>
                                </xsl:if>
                                
                                <!-- **             Termination Correction      **-->
                                <xsl:if test="peci:Derived_Event_Code=  'TERM-C' or (peci:Derived_Event_Code=  'TERM' and $TERMPrecededByTERM-R = 'Y')">
                                    <xsl:call-template name="peci:TransfromPECI2BODTermination">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'CHANGE'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="$employeeID"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                    </xsl:call-template>
                                </xsl:if>           
                                
                                <!-- **         Company Transfer Corrections to Earlier Date     **-->
                                <xsl:if test="peci:Derived_Event_Code= ('PCO','ORG') and $compTransEarlierDateFlag = 'Y'">
                                    <xsl:call-template name="peci:TransfromPECI2BODTermination">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'CHANGE'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="$employeeID"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                    </xsl:call-template>
                                </xsl:if>
                                <xsl:if test="peci:Derived_Event_Code = ('PCI','ORG') and $compTransEarlierDateFlag ='Y'">
                                    <xsl:call-template name="peci:TransfromPECI2BODHire">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'CHANGE'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="concat(../peci:Worker_Summary/peci:Employee_ID,$hireWMTableOrgID)"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>                                      
                                        <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                        <xsl:with-param name="checkCountry" select="$checkCountry"/>
                                        <xsl:with-param name="addressUsageBehavior" select="$addressUsageBehavior"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>     
                                        <xsl:with-param name="checkPGIEvent" select="$checkPGIEvent"/>
                                    </xsl:call-template>
                                </xsl:if>
                                
                                <!-- **         Company Transfer Corrections to Earlier Date     **-->
                                <xsl:if test="peci:Derived_Event_Code = ('PCI','ORG') and $compTransLaterDateFlag ='Y'">
                                    <xsl:call-template name="peci:TransfromPECI2BODHire">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'DELETE'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="concat(../peci:Worker_Summary/peci:Employee_ID,$hireWMTableOrgID)"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>                                      
                                        <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                        <xsl:with-param name="checkCountry" select="$checkCountry"/>
                                        <xsl:with-param name="addressUsageBehavior" select="$addressUsageBehavior"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>     
                                        <xsl:with-param name="checkPGIEvent" select="$checkPGIEvent"/>
                                    </xsl:call-template>
                                    <xsl:call-template name="peci:TransfromPECI2BODTermination">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'DELETE'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="concat(../peci:Worker_Summary/peci:Employee_ID,$termWMTableOrgID)"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkPriorLogicalID"/>
                                    </xsl:call-template>
                                    <xsl:call-template name="peci:TransfromPECI2BODTermination">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'ADD'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="$employeeID"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkPriorLogicalID"/>
                                    </xsl:call-template>
                                    <xsl:call-template name="peci:TransfromPECI2BODHire">
                                        <xsl:with-param name="creationDateTime" select="$CreationDateTime"/>
                                        <xsl:with-param name="bodid"
                                            select="upper-case(uuid:toString(uuid:randomUUID()))"/>
                                        <xsl:with-param name="actionCode" select="'ADD'"/>
                                        <xsl:with-param name="personID" select="$personID"/>
                                        <xsl:with-param name="employeeID" select="$employeeID"/>
                                        <xsl:with-param name="payGroupID" select="$payGroupID"/>                                      
                                        <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                        <xsl:with-param name="checkCountry" select="$checkCountry"/>
                                        <xsl:with-param name="addressUsageBehavior" select="$addressUsageBehavior"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>     
                                        <xsl:with-param name="checkPGIEvent" select="$checkPGIEvent"/>
                                    </xsl:call-template>
                                </xsl:if>
                            </xsl:otherwise>
                        </xsl:choose>     
                    </xsl:for-each>		           
                </xsl:for-each>    
            </xsl:for-each>       
            <TransformedData>
                <xsl:copy-of select="$usedPECIElements"/>
            </TransformedData>
        </nga:ProcessPayServ>
    </xsl:template>
    
    <!-- Hire Template  -->
    <xsl:template name="peci:TransfromPECI2BODHire">
        <xsl:param name="actionCode"/>
        <xsl:param name="bodid"/>
        <xsl:param name="creationDateTime"/>        
        <xsl:param name="personID"/>
        <xsl:param name="employeeID"/>
        <xsl:param name="payGroupID"/>
        <xsl:param name="workerPointer"/>
        <xsl:param name="countryAddressMapping"/>
        <xsl:param name="checkCountry"/>
        <xsl:param name="addressUsageBehavior"/>
        <xsl:param name="checkLogicalID"/>
        <xsl:param name="checkPGIEvent"/>
        <xsl:variable name="vGcc" select="substring($checkLogicalID,1,3)"/>
        <xsl:variable name="vLcc" select="substring($checkLogicalID,5,5)"/>
        <xsl:variable name="costCenterName" select="/CLUBBEDXML/CustomerConfig/Rows[MAPPING='CostCenterName' and LCC = $vLcc]/VALUE"/>
        <nga:ProcessPayServEmp releaseID="{$releaseID}"
            systemEnvironmentCode="{$systemEnvironmentCode}" languageCode="{$languageCode}">
            <xsl:call-template name="oa:ApplicationAreaTemplate">
                <xsl:with-param name="bodid" select="$bodid"/>
                <xsl:with-param name="creationDateTime" select="$creationDateTime"/>
                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
            </xsl:call-template>
            <xsl:variable name="hireDate">
                <xsl:value-of select="substring(peci:Worker_Status/peci:Hire_Date,1,10)"/>
            </xsl:variable>           
                <xsl:call-template name="usedPECIData">
                    <xsl:with-param name="xpath">
                        <xsl:for-each select="peci:Worker_Status/peci:Hire_Date">
                            <xsl:call-template name="print-field-xpath"/> 
                        </xsl:for-each>                       
                    </xsl:with-param>
                </xsl:call-template>
                    
            <xsl:variable name="effectiveMomentDate">
                <xsl:call-template name="insertDateWithDash">
                    <xsl:with-param name="date" select="peci:Effective_Moment"/>
                </xsl:call-template> 
            </xsl:variable>
            <xsl:call-template name="usedPECIData">
                <xsl:with-param name="xpath">
                    <xsl:for-each select="peci:Effective_Moment">
                        <xsl:call-template name="print-field-xpath"/>            
                    </xsl:for-each>   
                </xsl:with-param>
            </xsl:call-template>  
            <xsl:variable name="EmpPositionID" select="position()"/>  
            <xsl:variable name="removeChars" select="' []_()-/.,@#$%^*!'"/>
            <xsl:variable name="employeeLCC" select="substring($checkLogicalID,5,5)"/>            
          
            <!--***** BOD Mapping Starts Here *****-->
            <nga:DataArea>
                <oa:Process>
                    <oa:ActionCriteria>
                        <oa:ActionExpression> 
                            <xsl:attribute name="actionCode">
                                <xsl:value-of select="$actionCode"/>
                            </xsl:attribute>                            
                        </oa:ActionExpression>
                    </oa:ActionCriteria>
                </oa:Process>            
                <nga:PayServEmp>
                    <hr:IndicativeData>
                        <hr:IndicativePersonDossier>
                            <hr:IndicativePerson>
                                <xsl:attribute name="validFrom">
                                    <xsl:choose>
                                        <xsl:when test="peci:Derived_Event_Code = 'HIR'">
                                            <xsl:value-of select="$hireDate"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:value-of select="$effectiveMomentDate"/>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:attribute>
                                <hr:PersonID>
                                    <xsl:value-of select="$personID"/>
                                </hr:PersonID>     
                                <xsl:for-each select="peci:Person_Identification/peci:National_Identifier">
                                    <xsl:variable name="personalLegalID">
                                        <xsl:call-template name="templateNationalIDType">
                                            <xsl:with-param name="NationalIDType" select="peci:National_ID_Type"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:National_ID_Type">
                                                <xsl:call-template name="print-field-xpath"/>            
                                            </xsl:for-each>   
                                        </xsl:with-param>
                                    </xsl:call-template>  
                                    <xsl:if test="string-length($personalLegalID) > 0">
                                        <xsl:element name="hr:PersonLegalID">
                                            <xsl:attribute name="schemeName" select="$personalLegalID"/>
                                            <xsl:value-of select="translate(peci:National_ID,$removeChars,'')"/>
                                        </xsl:element>
                                    </xsl:if>            
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:National_ID">
                                                <xsl:call-template name="print-field-xpath"/>            
                                            </xsl:for-each>   
                                        </xsl:with-param>
                                    </xsl:call-template>  
                                </xsl:for-each>
                                <!-- Government Identifier Mapping -->
                                <xsl:for-each select="peci:Person_Identification/peci:Government_Identifier">
                                    <xsl:variable name="governmentID">
                                        <xsl:call-template name="templateNationalIDType">
                                            <xsl:with-param name="NationalIDType" select="peci:Government_ID_Type"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:if test="string-length($governmentID) > 0">
                                        <xsl:element name="hr:PersonLegalID">
                                            <xsl:attribute name="schemeName" select="$governmentID"/>
                                            <xsl:value-of select="translate(peci:Government_ID,$removeChars,'')"/>
                                        </xsl:element>
                                    </xsl:if>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Government_ID_Type">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Government_ID">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:for-each>
                                <!-- Other Identifier Mapping -->
                                <xsl:for-each select="peci:Person_Identification/peci:Other_Identifier">
                                    <xsl:variable name="otherID">
                                        <xsl:call-template name="templateNationalIDType">
                                            <xsl:with-param name="NationalIDType" select="peci:Custom_ID_Type"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:if test="string-length($otherID) > 0">
                                        <xsl:element name="hr:PersonLegalID">
                                            <xsl:attribute name="schemeName" select="$otherID"/>
                                            <xsl:value-of select="translate(peci:Custom_ID,$removeChars,'')"/>
                                        </xsl:element>
                                    </xsl:if>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Custom_ID_Type">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Custom_ID">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:for-each>
                                <xsl:for-each select="peci:Person_Identification/peci:Passport">
                                    <xsl:element name="hr:PersonLegalID">
                                        <xsl:attribute name="schemeName" select="'GL-PPN'"/>
                                        <xsl:value-of select="peci:Passport_ID"/>
                                    </xsl:element>       
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Passport_ID">
                                                <xsl:call-template name="print-field-xpath"/>            
                                            </xsl:for-each>   
                                        </xsl:with-param>
                                    </xsl:call-template>  
                                </xsl:for-each> 
                                <hr:PersonName>                                       
                                    <oa:GivenName>
                                        <xsl:choose>
                                            <xsl:when test="peci:Personal/peci:Preferred_Name/peci:Country = 'JP'">
                                                <xsl:value-of select="peci:Personal/peci:Preferred_Name/peci:First_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Personal/peci:Preferred_Name/peci:First_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of select="peci:Personal/peci:Legal_Name/peci:First_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:First_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </oa:GivenName>
                                    <xsl:if test="string-length(peci:Personal/peci:Legal_Name[peci:Country = 'JP']/peci:Last_Name_Local) > 0">
                                        <hr:PreferredName>
                                            <xsl:value-of select="peci:Personal/peci:Legal_Name[peci:Country = 'JP']/peci:Last_Name_Local"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:Middle_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </hr:PreferredName>
                                    </xsl:if>
                                    <xsl:if test="string-length(peci:Personal/peci:Legal_Name/peci:Middle_Name) > 0">
                                        <hr:MiddleName>
                                            <xsl:value-of select="peci:Personal/peci:Legal_Name/peci:Middle_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:Middle_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </hr:MiddleName>
                                    </xsl:if>
                                    <hr:FamilyName>
                                        <xsl:if test="string-length(peci:Personal/peci:Legal_Name/peci:Hereditary) > 0">
                                            <xsl:attribute name="prefix">
                                                <xsl:value-of select="peci:Personal/peci:Legal_Name/peci:Hereditary"/>
                                            </xsl:attribute>
                                        </xsl:if>                                         
                                        <xsl:choose>
                                            <xsl:when test="peci:Personal/peci:Preferred_Name/peci:Country = 'JP'">
                                                <xsl:value-of select="peci:Personal/peci:Preferred_Name/peci:Last_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Personal/peci:Preferred_Name/peci:Last_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of select="peci:Personal/peci:Legal_Name/peci:Last_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:Last_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </xsl:otherwise>
                                        </xsl:choose>            
                                    </hr:FamilyName>
                                    <xsl:if test="peci:Personal/peci:Legal_Name/peci:Secondary_Last_Name and peci:Personal/peci:Legal_Name/peci:Country = $secondaryLastName/value">
                                        <hr:FamilyName>
                                            <xsl:attribute name="primaryIndicator" select="'false'"/>
                                            <xsl:value-of select="peci:Personal/peci:Legal_Name/peci:Secondary_Last_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:Secondary_Last_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </hr:FamilyName>
                                    </xsl:if>
                                    <xsl:if test="peci:Personal/peci:Additional_Name[peci:Country != 'JP']/peci:Name_Type = 'Maiden'">
                                        <hr:FormerFamilyName>
                                            <xsl:value-of select="peci:Personal/peci:Additional_Name/peci:Last_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Personal/peci:Additional_Name/peci:Last_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </hr:FormerFamilyName>
                                    </xsl:if>
                                    <xsl:variable name="saluteCode">
                                        <xsl:call-template name="templatePrefSaluteCode">
                                            <xsl:with-param name="prefSaluteCode"
                                                select="peci:Personal/peci:Legal_Name/peci:Title"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:variable name="altSaluteCode">
                                        <xsl:call-template name="templatePrefSaluteCode">
                                            <xsl:with-param name="prefSaluteCode"
                                                select="peci:Personal/peci:Legal_Name/peci:Salutation"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:if test="string-length($saluteCode)>0 or string-length($altSaluteCode) > 0">
                                        <hr:PreferredSalutationCode>
                                            <xsl:choose>
                                                <xsl:when test="string-length($saluteCode) > 0">
                                                    <xsl:value-of select="peci:Personal/peci:Legal_Name/peci:Title[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:Title[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>  
                                                </xsl:when>
                                                <xsl:when test="string-length($altSaluteCode) > 0">
                                                    <xsl:value-of select="peci:Personal/peci:Legal_Name/peci:Salutation[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:Salutation[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>  
                                                </xsl:when>
                                            </xsl:choose>
                                        </hr:PreferredSalutationCode>
                                    </xsl:if>
                                    <xsl:variable name="generationCode">
                                        <xsl:call-template name="templateGenAffixCode">
                                            <xsl:with-param name="genAffixCode"
                                                select="peci:Personal/peci:Legal_Name/peci:Social_Suffix"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:if test="string-length($generationCode) > 0">
                                        <hr:GenerationAffixCode>
                                            <xsl:value-of select="peci:Personal/peci:Legal_Name/peci:Social_Suffix[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:Social_Suffix[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </hr:GenerationAffixCode>
                                    </xsl:if>
                                    <xsl:variable name="qualificationCode">
                                        <xsl:call-template name="templateQualAffixCode">
                                            <xsl:with-param name="qualAffixCode"
                                                select="peci:Personal/peci:Legal_Name/peci:Social_Suffix"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:variable name="addQualificationCode">
                                        <xsl:call-template name="templateAddQualAffixCode">
                                            <xsl:with-param name="addQualAffixCode"
                                                select="peci:Personal/peci:Legal_Name/peci:Title"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:choose>
                                        <xsl:when test="string-length($addQualificationCode) > 0">
                                            <hr:QualificationAffixCode>
                                                <xsl:value-of select="peci:Personal/peci:Legal_Name/peci:Title[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:Title[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </hr:QualificationAffixCode>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:if test="string-length($qualificationCode) > 0">
                                                <hr:QualificationAffixCode>
                                                    <xsl:value-of
                                                        select="peci:Personal/peci:Legal_Name/peci:Social_Suffix[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:Social_Suffix[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>  
                                                </hr:QualificationAffixCode>
                                            </xsl:if>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                    <xsl:variable name="titleCode">
                                        <xsl:call-template name="templateTitleAffixCode">
                                            <xsl:with-param name="titleAffixCode"
                                                select="peci:Personal/peci:Legal_Name/peci:Social_Suffix"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:if test="string-length($titleCode) > 0">
                                        <hr:TitleAffixCode>
                                            <xsl:value-of select="peci:Personal/peci:Legal_Name/peci:Social_Suffix[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:Social_Suffix[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </hr:TitleAffixCode>
                                    </xsl:if>       
                                    <xsl:if test="string-length(peci:Personal/peci:Legal_Name/peci:Secondary_Last_Name[@*[local-name()]]) > 0 and peci:Personal/peci:Legal_Name/peci:Country = ('NL','ZA')">
                                        <hr:PersonNameInitials>
                                            <xsl:value-of select="peci:Personal/peci:Legal_Name/peci:Secondary_Last_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:Secondary_Last_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </hr:PersonNameInitials>
                                    </xsl:if>
                                    <xsl:variable name="localNameFlag">
                                        <xsl:value-of select="concat(peci:Personal/peci:Legal_Name[peci:Country != 'JP']/peci:First_Name_Local,peci:Personal/peci:Legal_Name/peci:Middle_Name_Local,peci:Personal/peci:Legal_Name[peci:Country != 'JP']/peci:Last_Name_Local,peci:Personal/peci:Legal_Name/peci:Name_in_Local_Script)"/>
                                    </xsl:variable>
                                    <xsl:if test="string-length($localNameFlag) > 0">
                                        <hr:AlternateScriptPersonName>
                                            <xsl:if test="string-length(peci:Personal/peci:Legal_Name/peci:Name_in_Local_Script) > 0">
                                                <hr:FormattedName>
                                                    <xsl:value-of select="peci:Personal/peci:Legal_Name/peci:Name_in_Local_Script"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:Name_in_Local_Script">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>  
                                                </hr:FormattedName>
                                            </xsl:if>
                                            <xsl:if test="string-length(peci:Personal/peci:Legal_Name[peci:Country != 'JP']/peci:First_Name_Local) > 0">
                                                <oa:GivenName>
                                                    <xsl:value-of select="peci:Personal/peci:Legal_Name/peci:First_Name_Local[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:First_Name_Local[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>  
                                                </oa:GivenName>
                                            </xsl:if>
                                            <xsl:if test="string-length(peci:Personal/peci:Legal_Name/peci:Middle_Name_Local) > 0">
                                                <hr:MiddleName>
                                                    <xsl:value-of select="peci:Personal/peci:Legal_Name/peci:Middle_Name_Local[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:Middle_Name_Local[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>  
                                                </hr:MiddleName>
                                            </xsl:if>
                                            <xsl:if test="string-length(peci:Personal/peci:Legal_Name[peci:Country != 'JP']/peci:Last_Name_Local) > 0">
                                                <hr:FamilyName>
                                                    <xsl:value-of select="peci:Personal/peci:Legal_Name/peci:Last_Name_Local[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:Last_Name_Local[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>  
                                                </hr:FamilyName>
                                            </xsl:if>                                                
                                        </hr:AlternateScriptPersonName>
                                    </xsl:if>                                        
                                </hr:PersonName>                                
                                <!-- Remove Phone Details as not needed for PECI -->
                                <!-- <xsl:for-each select="peci:Person_Communication/peci:Phone">
                                        <xsl:variable name="RemoveChars" select="' []()-/.,'"/>
                                        <hr:Communication>
                                            <hr:ChannelCode>Telephone</hr:ChannelCode>
                                            <hr:UseCode>
                                                <xsl:value-of select="lower-case(peci:Usage_Type)"/>
                                            </hr:UseCode>
                                            <xsl:if test="string-length(peci:Area_Code) > 0">
                                                <oa:AreaDialing>
                                                    <xsl:value-of select="peci:Area_Code"/>
                                                </oa:AreaDialing>
                                            </xsl:if>
                                            <oa:DialNumber>
                                                <xsl:value-of select="translate(normalize-space(peci:Phone_Number_With_Country_Code),$RemoveChars,'')"/>
                                            </oa:DialNumber>
                                            <xsl:if test="string-length(peci:Extension) > 0">
                                                <oa:Extension>
                                                    <xsl:value-of select="peci:Extension"/>
                                                </oa:Extension>
                                            </xsl:if>
                                        </hr:Communication>
                                    </xsl:for-each> -->
                                    <xsl:for-each select="peci:Person_Communication/peci:Email">
                                        <xsl:if test="peci:Usage_Type = 'WORK'">
                                            <hr:Communication>
                                                <hr:ChannelCode>Email</hr:ChannelCode>
                                                <hr:UseCode>Business</hr:UseCode>
                                                <oa:URI>
                                                    <xsl:value-of select=".[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]/peci:Email_Address"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:call-template name="print-field-xpath">                                       
                                                            </xsl:call-template>
                                                        </xsl:with-param>
                                                    </xsl:call-template>
                                                </oa:URI>
                                            </hr:Communication>
                                        </xsl:if>
                                    </xsl:for-each>     
                                    <!--   Country Specific Basic Address Mapping   -->
                                    <xsl:for-each select="peci:Person_Communication/peci:Address">
                                        <xsl:variable name="addressPosiiton" select="."/>   
                                        <xsl:choose>
                                            <xsl:when test="count(peci:Usage) = 0">
                                                <xsl:variable name="tempUsage" select="lower-case(concat(peci:Usage_Type,'_'))"/>
                                                <xsl:variable name="type" select="$addressUsageBehavior/Rows[KEY = $tempUsage]/VALUE"/>    
                                                <xsl:if test="string-length($type) > 0">
                                                    <xsl:choose>
                                                        <xsl:when test="$addressPosiiton/peci:Country = $checkCountry">
                                                            <xsl:call-template name="PECICountrySpecificAddress">
                                                                <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                                                <xsl:with-param name="country" select="$addressPosiiton/peci:Country"/>                                                        
                                                                <xsl:with-param name="validFrom" select="$effectiveMomentDate"/>                                                       
                                                                <xsl:with-param name="addressPosiiton" select="$addressPosiiton"/>
                                                                <xsl:with-param name="type" select="$type"/>                                                             
                                                            </xsl:call-template>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <xsl:call-template name="PECIGenericAddress">
                                                                <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                                                <xsl:with-param name="type" select="$type"/>
                                                            </xsl:call-template>
                                                        </xsl:otherwise>
                                                    </xsl:choose>               
                                                </xsl:if>
                                                </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:for-each select="peci:Usage">
                                                    <xsl:variable name="usage" select="lower-case(concat(../peci:Usage_Type,'_',translate(peci:Usage_Behavior_ID,' ','_')))"/>
                                                    <xsl:variable name="type" select="$addressUsageBehavior/Rows[KEY = $usage]/VALUE"/>     
                                                    <xsl:if test="string-length($type) > 0">
                                                        <xsl:choose>
                                                            <xsl:when test="$addressPosiiton/peci:Country = $checkCountry">
                                                                <xsl:call-template name="PECICountrySpecificAddress">
                                                                    <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                                                    <xsl:with-param name="country" select="$addressPosiiton/peci:Country"/>                                                        
                                                                    <xsl:with-param name="validFrom" select="$effectiveMomentDate"/>                                                       
                                                                    <xsl:with-param name="addressPosiiton" select="$addressPosiiton"/>
                                                                    <xsl:with-param name="type" select="$type"/>
                                                                </xsl:call-template>
                                                            </xsl:when>
                                                            <xsl:otherwise>
                                                                <xsl:call-template name="PECIGenericAddress">
                                                                    <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                                                    <xsl:with-param name="type" select="$type"/>
                                                                </xsl:call-template>
                                                            </xsl:otherwise>
                                                        </xsl:choose>
                                                    </xsl:if>                                          
                                                </xsl:for-each>     
                                            </xsl:otherwise>
                                        </xsl:choose>
                                        
                                
                                        <!--   Country Specific Local Address Mapping   -->
                                        <xsl:if test="peci:Country = distinct-values($countryAddressMapping/Rows[MAPPING='PECILocalAddress']/COUNTRY)">
                                            <xsl:call-template name="LocalAddressMapping">
                                                <xsl:with-param name="validFrom" select="$effectiveMomentDate"/>
                                                <xsl:with-param name="country" select="peci:Country"/>    
                                                <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                                <xsl:with-param name="addressPosiiton" select="$addressPosiiton"/>
                                            </xsl:call-template>
                                        </xsl:if>                                   
                                    </xsl:for-each>
                                    <xsl:if test="string-length(peci:Personal/peci:Date_of_Birth) > 0">
                                        <hr:BirthDate>
                                            <xsl:value-of select="substring(peci:Personal/peci:Date_of_Birth,1,10)"/>  
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Personal/peci:Date_of_Birth">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </hr:BirthDate>                                      
                                    </xsl:if>
                                    <xsl:variable name="birthPlace">
                                        <xsl:value-of select="concat(peci:Personal/peci:City_of_Birth,peci:Personal/peci:Region_of_Birth,peci:Personal/peci:Country_of_Birth)"/>
                                    </xsl:variable>
                                    <xsl:if test="string-length($birthPlace) > 0">
                                        <hr:BirthPlace>                                            
                                            <xsl:if test="string-length(peci:Personal/peci:City_of_Birth) > 0">
                                                <oa:CityName>
                                                    <xsl:value-of select="peci:Personal/peci:City_of_Birth[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Personal/peci:City_of_Birth[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>
                                                </oa:CityName>
                                            </xsl:if>
                                            <xsl:if test="string-length(peci:Personal/peci:Region_of_Birth) > 0">
                                                <oa:CountrySubDivisionCode>
                                                    <xsl:value-of select="substring-after(peci:Personal/peci:Region_of_Birth[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0],'-')"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Personal/peci:Region_of_Birth[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>
                                                </oa:CountrySubDivisionCode>
                                            </xsl:if>
                                            <xsl:if test="string-length(peci:Personal/peci:Country_of_Birth) > 0">
                                                <hr:CountryCode>
                                                    <xsl:value-of select="peci:Personal/peci:Country_of_Birth[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Personal/peci:Country_of_Birth[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>
                                                </hr:CountryCode>
                                            </xsl:if>
                                        </hr:BirthPlace>
                                    </xsl:if>
                                    <xsl:if test="string-length(peci:Personal/peci:Gender) > 0">
                                        <hr:GenderCode>
                                            <xsl:call-template name="templateGender">
                                                <xsl:with-param name="GenderCode" select="peci:Personal/peci:Gender[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                            </xsl:call-template>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Personal/peci:Gender[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </hr:GenderCode>
                                    </xsl:if>
                                    <xsl:if test="peci:Personal/peci:Marital_Status">
                                        <hr:CertifiedMaritalStatus>
                                            <xsl:if test="peci:Personal/peci:Marital_Status_Date[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                <xsl:attribute name="certifiedDate" select="substring(peci:Personal/peci:Marital_Status_Date[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0],1,10)"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Personal/peci:Marital_Status_Date[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                            </xsl:if>                                
                                            <hr:MaritalStatusCode>
                                                <xsl:call-template name="templateMaritalStatus">
                                                    <xsl:with-param name="Marital_Status"
                                                        select="peci:Personal/peci:Marital_Status[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                </xsl:call-template>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Personal/peci:Marital_Status[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                            </hr:MaritalStatusCode>
                                        </hr:CertifiedMaritalStatus>
                                    </xsl:if>
                                    <xsl:if test="string-length(peci:Personal/peci:Preferred_Language)>0">
                                        <hr:PrimaryLanguageCode>
                                            <xsl:variable name="tempLanguageCode">
                                                <xsl:call-template name="templateLanguageCode">
                                                    <xsl:with-param name="language" select="peci:Personal/peci:Preferred_Language[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                </xsl:call-template> 
                                            </xsl:variable>
                                            <xsl:choose>
                                                <xsl:when test="string-length($tempLanguageCode) > 0">
                                                    <xsl:value-of select="$tempLanguageCode"/>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:value-of select="peci:Personal/peci:Preferred_Language[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Personal/peci:Preferred_Language[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>                                                                                    
                                        </hr:PrimaryLanguageCode>
                                    </xsl:if>
                                    <xsl:if test="string-length(peci:Personal/peci:Nationality) > 0">
                                        <hr:CitizenshipCountryCode>
                                            <xsl:value-of select="peci:Personal/peci:Nationality[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Personal/peci:Nationality[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>          
                                        </hr:CitizenshipCountryCode>
                                    </xsl:if>
                            </hr:IndicativePerson>                            
                            <hr:IndicativeEmployee>
                                <xsl:attribute name="validFrom">
                                    <xsl:value-of select="$effectiveMomentDate"/>
                                </xsl:attribute>
                                <hr:EmployeeID>
                                    <xsl:value-of select="$employeeID"/>
                                </hr:EmployeeID>
                                <xsl:choose>
                                    <xsl:when test="peci:Position/ptdf:EmployeeGroupCode">
                                        <hr:EmployeeGroupCode>
                                            <xsl:value-of select="peci:Position/ptdf:EmployeeGroupCode"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Position/ptdf:EmployeeGroupCode">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>          
                                        </hr:EmployeeGroupCode>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <hr:EmployeeGroupCode>
                                            <xsl:value-of select="peci:Additional_Information/ptdf:EmployeeGroupCode"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Additional_Information/ptdf:EmployeeGroupCode">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>          
                                        </hr:EmployeeGroupCode>
                                    </xsl:otherwise>
                                </xsl:choose>                                
                            </hr:IndicativeEmployee>
                            <hr:IndicativeEmployment>
                                <xsl:if test="string-length(peci:Worker_Status/peci:First_Day_of_Work) > 0">
                                    <hr:ProposedHire>
                                        <hr:ExpectedDutyEntryDate>
                                            <xsl:value-of select="substring(peci:Worker_Status/peci:First_Day_of_Work,1,10)"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Worker_Status/peci:First_Day_of_Work">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>   
                                        </hr:ExpectedDutyEntryDate>
                                    </hr:ProposedHire>
                                </xsl:if>
                                <hr:EmploymentLifecycle>
                                    <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    <hr:Hire>
                                        <hr:HireTypeCode>                                         
                                            <xsl:choose>
                                                <xsl:when test="(substring(peci:Worker_Status/peci:Original_Hire_Date,1,10) &lt; $effectiveMomentDate) and peci:Derived_Event_Code = 'HIR'">
                                                    <xsl:value-of select="'ReHire'"/>
                                                </xsl:when>                                              
                                                <xsl:when test="peci:Derived_Event_Code = ('HIR','HIR-R') and $rehireRescindFlag != 'Y'">
                                                    <xsl:value-of select="'NewHire'"/>
                                                </xsl:when>
                                                <xsl:when test="peci:Derived_Event_Code = 'HIR-R' and $rehireRescindFlag = 'Y'">
                                                    <xsl:value-of select="'ReHire'"/>
                                                </xsl:when>
                                                <xsl:when test="peci:Derived_Event_Code ='ORG' and $compTransRescindFlag != 'Y' and $compTransLaterDateFlag !='Y' and $compTransEarlierDateFlag !='Y'">
                                                    <xsl:value-of select="'CompanyTransfer'"/>
                                                </xsl:when>                                              
                                                <xsl:when test="peci:Derived_Event_Code ='PCI' and $compTransRescindFlag != 'Y' and $compTransLaterDateFlag !='Y' and $compTransEarlierDateFlag !='Y'">
                                                    <xsl:value-of select="'CompanyTransfer'"/>
                                                </xsl:when>                                                  
                                                <xsl:when test="$checkPGIEvent = 'Y'">
                                                    <xsl:value-of select="'CompanyTransfer'"/>
                                                </xsl:when>
                                                <xsl:when test="$compTransRescindFlag = 'Y'">
                                                    <xsl:value-of select="'CompanyTransferRescind'"/>
                                                </xsl:when>    
                                                <xsl:when test="$compTransLaterDateFlag !='Y'  or $compTransEarlierDateFlag !='Y'">
                                                    <xsl:value-of select="'CompanyTransferChange'"/>
                                                </xsl:when>   
                                            </xsl:choose>
                                        </hr:HireTypeCode>
                                        <xsl:if test="string-length($effectiveMomentDate) > 0">
                                            <hr:HireDate>
                                                <xsl:choose>
                                                    <xsl:when test="($compTransRescindFlag = 'Y') and $rehireRescindFlag != 'Y' and $actionCode != 'ADD'">
                                                        <xsl:value-of select="$pciWMTableDate"/>
                                                    </xsl:when>                                                          
                                                    <xsl:otherwise>
                                                        <xsl:value-of select="$effectiveMomentDate"/>
                                                    </xsl:otherwise>
                                                </xsl:choose>                                               
                                            </hr:HireDate>
                                        </xsl:if>
                                        <xsl:if test="string-length(peci:Worker_Status/peci:Original_Hire_Date) > 0">
                                            <hr:OriginalHireDate>
                                                <xsl:value-of select="substring(peci:Worker_Status/peci:Original_Hire_Date,1,10)"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Worker_Status/peci:Original_Hire_Date">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>   
                                            </hr:OriginalHireDate>
                                        </xsl:if>
                                    </hr:Hire>
                                </hr:EmploymentLifecycle>
                            </hr:IndicativeEmployment>
                            <hr:IndicativeDeployment>
                                <xsl:attribute name="validFrom">
                                    <xsl:value-of select="$effectiveMomentDate"/>
                                </xsl:attribute>
                                <hr:DeploymentOrganization>
                                    <hr:OrganizationIdentifiers>
                                        <hr:OrganizationID>
                                            <xsl:choose>
                                                <xsl:when test="peci:Position/ptdf:OrganizationID">
                                                    <xsl:value-of select="peci:Position/ptdf:OrganizationID"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Position/ptdf:OrganizationID">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>   
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:value-of select="peci:Additional_Information/ptdf:OrganizationID"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Additional_Information/ptdf:OrganizationID">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>   
                                                </xsl:otherwise>
                                            </xsl:choose>                                           
                                        </hr:OrganizationID>                                       
                                    </hr:OrganizationIdentifiers>
                                    <xsl:choose>
                                        <xsl:when test="peci:Position/ptdf:OrganizationName">
                                            <hr:OrganizationalIdentifiers>
                                                <hr:OrganizationalName>
                                                    <xsl:value-of select="peci:Position/ptdf:OrganizationName"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Position/ptdf:OrganizationName">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>  
                                                </hr:OrganizationalName>                                            
                                            </hr:OrganizationalIdentifiers>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:if test="string-length(peci:Additional_Information/ptdf:OrganizationName) > 0">
                                                <hr:OrganizationalIdentifiers>
                                                    <hr:OrganizationalName>
                                                        <xsl:value-of select="peci:Additional_Information/ptdf:OrganizationName"/>
                                                        <xsl:call-template name="usedPECIData">
                                                            <xsl:with-param name="xpath">
                                                                <xsl:for-each select="peci:Additional_Information/ptdf:OrganizationID">
                                                                    <xsl:call-template name="print-field-xpath"/>            
                                                                </xsl:for-each>   
                                                            </xsl:with-param>
                                                        </xsl:call-template>  
                                                    </hr:OrganizationalName>                                            
                                                </hr:OrganizationalIdentifiers>
                                            </xsl:if>
                                        </xsl:otherwise>
                                    </xsl:choose>                                    
                                </hr:DeploymentOrganization>
                                <hr:WorkLocation>
                                    <xsl:choose>
                                        <xsl:when test="peci:Position/ptdf:LocationID">
                                            <hr:LocationID>
                                                <xsl:value-of select="normalize-space(peci:Position/ptdf:LocationID)"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Position/ptdf:LocationID">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>   
                                            </hr:LocationID>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:if test="string-length(peci:Additional_Information/ptdf:LocationID) > 0">
                                                <hr:LocationID>
                                                    <xsl:value-of select="normalize-space(peci:Additional_Information/ptdf:LocationID)"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Additional_Information/ptdf:LocationID">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>   
                                                </hr:LocationID>
                                            </xsl:if>      
                                        </xsl:otherwise>
                                    </xsl:choose>
                                    
                                    <xsl:variable name="workLocationPosition">
                                        <xsl:for-each select="tokenize(peci:Position/ptdf:WorkAddress,'\|')">
                                            <position>
                                                <xsl:value-of select="."/>
                                            </position>
                                        </xsl:for-each>
                                    </xsl:variable>        
                                    <xsl:variable name="workLocationAddInfo">
                                        <xsl:for-each select="tokenize(peci:Additional_Information/ptdf:WorkAddress,'\|')">
                                            <position>
                                                <xsl:value-of select="."/>
                                            </position>
                                        </xsl:for-each>
                                    </xsl:variable>       
                                    <xsl:choose>
                                        <xsl:when test="peci:Position/ptdf:WorkAddress">
                                            <hr:Address>                                          
                                                <oa:CityName>
                                                    <xsl:value-of select="normalize-space($workLocationPosition/position[1])"/>
                                                </oa:CityName>
                                                <oa:CountrySubDivisionCode>
                                                    <xsl:value-of select="normalize-space($workLocationPosition/position[2])"/>
                                                </oa:CountrySubDivisionCode>
                                                <oa:PostalCode>
                                                    <xsl:value-of select="normalize-space($workLocationPosition/position[3])"/>
                                                </oa:PostalCode>                                   
                                            </hr:Address>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Position/ptdf:WorkAddress">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:if test="string-length(peci:Additional_Information/ptdf:WorkAddress) > 0">
                                                <hr:Address>                                          
                                                    <oa:CityName>
                                                        <xsl:value-of select="normalize-space($workLocationAddInfo/position[1])"/>
                                                    </oa:CityName>
                                                    <oa:CountrySubDivisionCode>
                                                        <xsl:value-of select="normalize-space($workLocationAddInfo/position[2])"/>
                                                    </oa:CountrySubDivisionCode>
                                                    <oa:PostalCode>
                                                        <xsl:value-of select="normalize-space($workLocationAddInfo/position[3])"/>
                                                    </oa:PostalCode>                                   
                                                </hr:Address>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Additional_Information/ptdf:WorkAddress">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                            </xsl:if>
                                        </xsl:otherwise>
                                    </xsl:choose>            
                                </hr:WorkLocation>
                                
                                <xsl:choose>
                                    <xsl:when test="peci:Position/ptdf:JobTitle">
                                        <hr:Job>
                                            <oa:JobTitle>
                                                <xsl:value-of select="normalize-space(peci:Position/ptdf:JobTitle)"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Position/ptdf:JobTitle">
                                                            <xsl:call-template name="print-field-xpath"/> 
                                                        </xsl:for-each>                       
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                            </oa:JobTitle>
                                        </hr:Job>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="peci:Additional_Information/ptdf:JobTitle">
                                            <hr:Job>
                                                <oa:JobTitle>
                                                    <xsl:value-of select="normalize-space(peci:Additional_Information/ptdf:JobTitle)"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Additional_Information/ptdf:JobTitle">
                                                                <xsl:call-template name="print-field-xpath"/> 
                                                            </xsl:for-each>                       
                                                        </xsl:with-param>
                                                    </xsl:call-template>
                                                </oa:JobTitle>
                                            </hr:Job>
                                        </xsl:if>
                                    </xsl:otherwise>
                                </xsl:choose>
                                
                                <xsl:if test="string-length(peci:Position[not(peci:Position_End_Date)]/peci:Business_Title) > 0">
                                    <hr:IndicativePosition>
                                        <hr:PositionTitle>
                                            <xsl:value-of select="peci:Position[not(peci:Position_End_Date)]/peci:Business_Title[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Position[not(peci:Position_End_Date)]/peci:Business_Title[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>   
                                        </hr:PositionTitle>
                                    </hr:IndicativePosition>
                                </xsl:if>
                                <xsl:variable name="scheduleFlag">
                                    <xsl:value-of select="concat(peci:Position[not(peci:Position_End_Date)]/peci:Scheduled_Weekly_Hours,peci:Position[not(peci:Position_End_Date)]/peci:Pay_Cycle_Hours)"/>
                                </xsl:variable>
                                <xsl:if test="string-length($scheduleFlag) > 0">
                                    <hr:Schedule>
                                        <xsl:if
                                            test="string-length(peci:Position[not(peci:Position_End_Date)]/peci:Scheduled_Weekly_Hours) > 0">
                                            <hr:ScheduledHours scheduleBasis="Week">
                                                <xsl:value-of select="peci:Position[not(peci:Position_End_Date)]/peci:Scheduled_Weekly_Hours[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Position[not(peci:Position_End_Date)]/peci:Scheduled_Weekly_Hours[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </hr:ScheduledHours>
                                        </xsl:if>
                                        <xsl:if
                                            test="string-length(peci:Position[not(peci:Position_End_Date)]/peci:Pay_Cycle_Hours) > 0">
                                            <hr:ScheduledHours scheduleBasis="PayCycle">
                                                <xsl:value-of
                                                    select="peci:Position[not(peci:Position_End_Date)]/peci:Pay_Cycle_Hours[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Position[not(peci:Position_End_Date)]/peci:Pay_Cycle_Hours[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </hr:ScheduledHours>
                                        </xsl:if>
                                        
                                        <xsl:choose>
                                            <xsl:when test="peci:Position/ptdf:ScheduledDays">
                                                <hr:ScheduledDays scheduleBasis="Week">
                                                    <xsl:value-of select="peci:Position/ptdf:ScheduledDays"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Position/ptdf:ScheduledDays">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>  
                                                </hr:ScheduledDays>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:if test="string-length(peci:Additional_Information/ptdf:ScheduledDays) > 0">
                                                    <hr:ScheduledDays scheduleBasis="Week">
                                                        <xsl:value-of select="peci:Additional_Information/ptdf:ScheduledDays"/>
                                                        <xsl:call-template name="usedPECIData">
                                                            <xsl:with-param name="xpath">
                                                                <xsl:for-each select="peci:Additional_Information/ptdf:ScheduledDays">
                                                                    <xsl:call-template name="print-field-xpath"/>            
                                                                </xsl:for-each>   
                                                            </xsl:with-param>
                                                        </xsl:call-template>  
                                                    </hr:ScheduledDays>
                                                </xsl:if>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                      
                                        <xsl:if test="string-length(peci:Position[not(peci:Position_End_Date)]/peci:Work_Shift) > 0">
                                            <hr:DaySchedule>
                                                <hr:ID>
                                                    <xsl:value-of select="peci:Position[not(peci:Position_End_Date)]/peci:Work_Shift[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Position[not(peci:Position_End_Date)]/peci:Work_Shift[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>  
                                                </hr:ID>
                                            </hr:DaySchedule>
                                        </xsl:if>
                                    </hr:Schedule>
                                </xsl:if>
                                <xsl:if test="peci:Position[not(peci:Position_End_Date)]/peci:Position_Time_Type">
                                    <xsl:variable name="workLevelCode">
                                        <xsl:choose>
                                            <xsl:when test="peci:Position[not(peci:Position_End_Date)][@*[local-name() != 'isDeleted']]/peci:Position_Time_Type[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0] = 'Full_time'">
                                                <xsl:value-of select="'FullTime'"/>
                                            </xsl:when>
                                            <xsl:when test="peci:Position[not(peci:Position_End_Date)][@*[local-name() != 'isDeleted']]/peci:Position_Time_Type[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0] = 'Part_time'">
                                                <xsl:value-of select="'PartTime'"/>
                                            </xsl:when>
                                            <xsl:when test="peci:Position[not(peci:Position_End_Date)][@*[local-name() != 'isDeleted']]/peci:Position_Time_Type[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0] = ('PartTime','FullTime')">
                                                <xsl:value-of select="peci:Position[not(peci:Position_End_Date)][@*[local-name() != 'isDeleted']]/peci:Position_Time_Type[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                            </xsl:when>
                                        </xsl:choose>
                                    </xsl:variable>
                                    <xsl:if test="string-length($workLevelCode) > 0">
                                        <hr:WorkLevelCode>                                        
                                            <xsl:value-of select="$workLevelCode"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Position[not(peci:Position_End_Date)]/peci:Position_Time_Type">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </hr:WorkLevelCode>
                                    </xsl:if>                                    
                                </xsl:if>
                                <xsl:if test="peci:Position[not(peci:Position_End_Date)]/peci:Full_Time_Equivalent_Percentage">
                                    <hr:FullTimeEquivalentRatio>
                                        <xsl:call-template name="templateFTE">
                                            <xsl:with-param name="FullTimeEq" select="peci:Position[not(peci:Position_End_Date)]/peci:Full_Time_Equivalent_Percentage"/>
                                        </xsl:call-template>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Position[not(peci:Position_End_Date)]/peci:Full_Time_Equivalent_Percentage">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </hr:FullTimeEquivalentRatio>
                                </xsl:if>
                            </hr:IndicativeDeployment>
                            <hr:PayCycleRemuneration>
                                <xsl:attribute name="validFrom">
                                    <xsl:value-of select="$effectiveMomentDate"/>
                                </xsl:attribute>
                                <hr:PayGroupCode>               
                                    <xsl:value-of select="$payGroupID"/>
                                </hr:PayGroupCode>
                            </hr:PayCycleRemuneration>     
                        </hr:IndicativePersonDossier>
                    </hr:IndicativeData>
                    <nga:PayServEmpExtension>
                        <xsl:variable name="countSection" select="count(peci:Payment_Election[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]/peci:Order)"/>  
                     
                        <!--   Main Bank Processing   -->
                        <xsl:for-each select="peci:Payment_Election[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                            <xsl:sort select="peci:Order" order="descending"/>
                            <xsl:variable name="paymentMethod">
                                <xsl:call-template name="templatePaymentType">
                                    <xsl:with-param name="Country">
                                        <xsl:choose>                          
                                            <xsl:when test="string-length(peci:Country) > 0">
                                                <xsl:value-of select="peci:Country"/>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of select="'*'"/>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:with-param>
                                    <xsl:with-param name="PaymentType" select="peci:Payment_Type"/>
                                </xsl:call-template>
                            </xsl:variable>     
                            <xsl:if test="number(peci:Order) >= $countSection">
                                <nga:PaymentInstructions>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>
                                    <nga:PaymentType>
                                        <xsl:value-of select="'MAIN'"/>
                                    </nga:PaymentType>
                                    <nga:PaymentMethod>
                                        <xsl:value-of select="$paymentMethod"/>
                                    </nga:PaymentMethod>
                                    <xsl:choose>
                                        <xsl:when test="peci:Distribution_Amount != 0">
                                            <hr:PaymentTypeCode>AMOUNT</hr:PaymentTypeCode>
                                        </xsl:when>
                                        <xsl:when test="peci:Distribution_Percentage != 0">
                                            <hr:PaymentTypeCode>PERCENTAGE</hr:PaymentTypeCode>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <hr:PaymentTypeCode/>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                    <xsl:if test="peci:Distribution_Amount != 0">
                                        <nga:Amount>
                                            <xsl:value-of select="peci:Distribution_Amount"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Distribution_Amount">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>   
                                        </nga:Amount>
                                    </xsl:if>
                                    <xsl:if test="peci:Distribution_Percentage != 0">
                                        <nga:PaymentPercentage>
                                            <hr:Percentage>
                                                <xsl:value-of select="xs:decimal(peci:Distribution_Percentage) * 100"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Distribution_Percentage">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>   
                                            </hr:Percentage>
                                        </nga:PaymentPercentage>
                                    </xsl:if>
                                    <xsl:if test="starts-with($paymentMethod, 'BANK')">
                                        <nga:DirectDepositAccount>
                                            <xsl:if test="string-length(peci:Account_Type)>0">
                                                <xsl:variable name="typeCode">
                                                    <xsl:choose>
                                                        <xsl:when test="peci:Account_Type = 'DDA'">
                                                            <xsl:value-of select="'CHECKING'"/>
                                                        </xsl:when>
                                                        <xsl:when test="peci:Account_Type = 'SA'">
                                                            <xsl:value-of select="'SAVINGS'"/>
                                                        </xsl:when>
                                                    </xsl:choose>
                                                </xsl:variable>
                                                <xsl:choose>
                                                    <xsl:when test="peci:Country = 'US'">
                                                        <hr:TypeCode>
                                                            <xsl:value-of select="$typeCode"/>
                                                        </hr:TypeCode>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <hr:TypeCode>
                                                            <xsl:value-of select="peci:Account_Type"/>
                                                            <xsl:call-template name="usedPECIData">
                                                                <xsl:with-param name="xpath">
                                                                    <xsl:for-each select="peci:Account_Type">
                                                                        <xsl:call-template name="print-field-xpath"/>            
                                                                    </xsl:for-each>   
                                                                </xsl:with-param>
                                                            </xsl:call-template>   
                                                        </hr:TypeCode>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:if>
                                            <xsl:if test="string-length(peci:Bank_Account_Name) > 0">
                                                <oa:NameOnAccount>
                                                    <xsl:value-of select="peci:Bank_Account_Name"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Bank_Account_Name">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>   
                                                </oa:NameOnAccount>
                                            </xsl:if>                                        
                                            <xsl:if test="string-length(peci:Bank_ID) > 0">
                                                <hr:BankRoutingID>
                                                    <xsl:value-of select="peci:Bank_ID"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Bank_ID">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>   
                                                </hr:BankRoutingID>
                                            </xsl:if>
                                            <xsl:if test="peci:BIC">
                                                <hr:BankRoutingID schemeName="SWIFT">
                                                    <xsl:value-of select="peci:BIC"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:BIC">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>   
                                                </hr:BankRoutingID>
                                            </xsl:if>                                           
                                            <xsl:if test="string-length(peci:Account_Number)>0">
                                                <hr:AccountID>
                                                    <xsl:value-of select="peci:Account_Number"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Account_Number">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>   
                                                </hr:AccountID>
                                            </xsl:if>
                                            <xsl:if test="string-length(peci:Branch_ID) > 0 and peci:Country != 'CH'">
                                                <nga:AdditionalAccountID>
                                                    <xsl:value-of select="peci:Branch_ID"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Branch_ID">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>   
                                                </nga:AdditionalAccountID>
                                            </xsl:if>
                                            <xsl:if test="string-length(peci:IBAN)>0">
                                                <nga:IBAN>
                                                    <xsl:value-of select="peci:IBAN"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:IBAN">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>   
                                                </nga:IBAN>
                                            </xsl:if>
                                            <xsl:if test="string-length(peci:Country)>0">
                                                <hr:CountryCode>
                                                    <xsl:value-of select="peci:Country"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Country">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>   
                                                </hr:CountryCode>
                                            </xsl:if>
                                            <xsl:if test="string-length(peci:Currency)>0">
                                                <hr:CurrencyCode>
                                                    <xsl:value-of select="peci:Currency"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Currency">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>   
                                                </hr:CurrencyCode>
                                            </xsl:if>
                                            <xsl:if test="peci:Country = 'CH'">
                                                <xsl:if test="peci:Check_Digit">
                                                    <oa:PostalCode>
                                                        <xsl:value-of select="peci:Check_Digit"/>
                                                        <xsl:call-template name="usedPECIData">
                                                            <xsl:with-param name="xpath">
                                                                <xsl:for-each select="peci:Check_Digit">
                                                                    <xsl:call-template name="print-field-xpath"/>            
                                                                </xsl:for-each>   
                                                            </xsl:with-param>
                                                        </xsl:call-template>   
                                                    </oa:PostalCode>
                                                </xsl:if>
                                                <xsl:if test="peci:Branch_ID">
                                                    <oa:CityName>
                                                        <xsl:value-of select="peci:Branch_ID"/>
                                                        <xsl:call-template name="usedPECIData">
                                                            <xsl:with-param name="xpath">
                                                                <xsl:for-each select="peci:Branch_ID">
                                                                    <xsl:call-template name="print-field-xpath"/>            
                                                                </xsl:for-each>   
                                                            </xsl:with-param>
                                                        </xsl:call-template>   
                                                    </oa:CityName>
                                                </xsl:if>                                              
                                            </xsl:if>
                                        </nga:DirectDepositAccount>
                                    </xsl:if>
                                </nga:PaymentInstructions>                                
                            </xsl:if>
                        </xsl:for-each>  
                        
                        <!-- OTHER Bank Processing  -->
                        <xsl:for-each select="peci:Payment_Election[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                            <xsl:sort select="peci:Order" order="ascending"/>
                            <xsl:variable name="paymentMethod">
                                <xsl:call-template name="templatePaymentType">
                                    <xsl:with-param name="Country">
                                        <xsl:choose>                          
                                            <xsl:when test="string-length(peci:Country) > 0">
                                                <xsl:value-of select="peci:Country"/>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of select="'*'"/>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:with-param>
                                    <xsl:with-param name="PaymentType" select="peci:Payment_Type"/>
                                </xsl:call-template>
                            </xsl:variable>     
                            <xsl:if test="number(peci:Order) &lt; $countSection">
                                <nga:PaymentInstructions>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>
                                    <nga:PaymentType>
                                        <xsl:value-of select="'OTHER'"/>
                                    </nga:PaymentType>
                                    <nga:PaymentMethod>
                                        <xsl:value-of select="$paymentMethod"/>
                                    </nga:PaymentMethod>
                                    <xsl:choose>
                                        <xsl:when test="peci:Distribution_Amount != 0">
                                            <hr:PaymentTypeCode>AMOUNT</hr:PaymentTypeCode>
                                        </xsl:when>
                                        <xsl:when test="peci:Distribution_Percentage != 0">
                                            <hr:PaymentTypeCode>PERCENTAGE</hr:PaymentTypeCode>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <hr:PaymentTypeCode/>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                    <xsl:if test="peci:Distribution_Amount != 0">
                                        <nga:Amount>
                                            <xsl:value-of select="peci:Distribution_Amount"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Distribution_Amount">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>   
                                        </nga:Amount>
                                    </xsl:if>
                                    <xsl:if test="peci:Distribution_Percentage != 0">
                                        <nga:PaymentPercentage>
                                            <hr:Percentage>
                                                <xsl:value-of select="xs:decimal(peci:Distribution_Percentage) * 100"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Distribution_Percentage">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>   
                                            </hr:Percentage>
                                        </nga:PaymentPercentage>
                                    </xsl:if>
                                    <xsl:if test="starts-with($paymentMethod, 'BANK')">
                                        <nga:DirectDepositAccount>
                                            <xsl:if test="string-length(peci:Account_Type)>0">
                                                <xsl:variable name="typeCode">
                                                    <xsl:choose>
                                                        <xsl:when test="peci:Account_Type = 'DDA'">
                                                            <xsl:value-of select="'CHECKING'"/>
                                                        </xsl:when>
                                                        <xsl:when test="peci:Account_Type = 'SA'">
                                                            <xsl:value-of select="'SAVINGS'"/>
                                                        </xsl:when>
                                                    </xsl:choose>
                                                </xsl:variable>
                                                <xsl:choose>
                                                    <xsl:when test="peci:Country = 'US'">
                                                        <hr:TypeCode>
                                                            <xsl:value-of select="$typeCode"/>
                                                        </hr:TypeCode>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <hr:TypeCode>
                                                            <xsl:value-of select="peci:Account_Type"/>
                                                            <xsl:call-template name="usedPECIData">
                                                                <xsl:with-param name="xpath">
                                                                    <xsl:for-each select="peci:Account_Type">
                                                                        <xsl:call-template name="print-field-xpath"/>            
                                                                    </xsl:for-each>   
                                                                </xsl:with-param>
                                                            </xsl:call-template>   
                                                        </hr:TypeCode>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:if>
                                            <xsl:if test="string-length(peci:Bank_Account_Name) > 0">
                                                <oa:NameOnAccount>
                                                    <xsl:value-of select="peci:Bank_Account_Name"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Bank_Account_Name">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>   
                                                </oa:NameOnAccount>
                                            </xsl:if>                                        
                                            <xsl:if test="string-length(peci:Bank_ID) > 0">
                                                <hr:BankRoutingID>
                                                    <xsl:value-of select="peci:Bank_ID"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Bank_ID">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>   
                                                </hr:BankRoutingID>
                                            </xsl:if>
                                            <xsl:if test="peci:BIC">
                                                <hr:BankRoutingID schemeName="SWIFT">
                                                    <xsl:value-of select="peci:BIC"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:BIC">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>   
                                                </hr:BankRoutingID>
                                            </xsl:if>       
                                            <xsl:if test="string-length(peci:Account_Number)>0">
                                                <hr:AccountID>
                                                    <xsl:value-of select="peci:Account_Number"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Account_Number">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>   
                                                </hr:AccountID>
                                            </xsl:if>
                                            <xsl:if test="string-length(peci:Branch_ID) > 0 and peci:Country != 'CH'">
                                                <nga:AdditionalAccountID>
                                                    <xsl:value-of select="peci:Branch_ID"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Branch_ID">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>   
                                                </nga:AdditionalAccountID>
                                            </xsl:if>
                                            <xsl:if test="string-length(peci:IBAN)>0">
                                                <nga:IBAN>
                                                    <xsl:value-of select="peci:IBAN"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:IBAN">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>   
                                                </nga:IBAN>
                                            </xsl:if>
                                            <xsl:if test="string-length(peci:Country)>0">
                                                <hr:CountryCode>
                                                    <xsl:value-of select="peci:Country"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Country">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>  
                                                </hr:CountryCode>
                                            </xsl:if>
                                            <xsl:if test="string-length(peci:Currency)>0">
                                                <hr:CurrencyCode>
                                                    <xsl:value-of select="peci:Currency"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Currency">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>  
                                                </hr:CurrencyCode>
                                            </xsl:if>
                                            <xsl:if test="peci:Country = 'CH'">
                                                <xsl:if test="peci:Check_Digit">
                                                    <oa:PostalCode>
                                                        <xsl:value-of select="peci:Check_Digit"/>
                                                        <xsl:call-template name="usedPECIData">
                                                            <xsl:with-param name="xpath">
                                                                <xsl:for-each select="peci:Check_Digit">
                                                                    <xsl:call-template name="print-field-xpath"/>            
                                                                </xsl:for-each>   
                                                            </xsl:with-param>
                                                        </xsl:call-template>  
                                                    </oa:PostalCode>
                                                </xsl:if>
                                                <xsl:if test="peci:Branch_ID">
                                                    <oa:CityName>
                                                        <xsl:value-of select="peci:Branch_ID"/>
                                                        <xsl:call-template name="usedPECIData">
                                                            <xsl:with-param name="xpath">
                                                                <xsl:for-each select="peci:Branch_ID">
                                                                    <xsl:call-template name="print-field-xpath"/>            
                                                                </xsl:for-each>   
                                                            </xsl:with-param>
                                                        </xsl:call-template>  
                                                    </oa:CityName>
                                                </xsl:if>                                              
                                            </xsl:if>
                                        </nga:DirectDepositAccount>
                                    </xsl:if>
                                </nga:PaymentInstructions>                                
                            </xsl:if>
                        </xsl:for-each>  
                        <xsl:if test="not(peci:Costing_Allocation[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0][not(peci:Allocation_End_Date)])">
                            <xsl:for-each select="peci:Position[not(peci:Position_End_Date)]/peci:Organization[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                <xsl:if test="peci:Organization_Type = 'COST_CENTER'">
                                    <nga:CostAssignment>
                                        <xsl:if test="string-length($effectiveMomentDate) > 0">
                                            <xsl:attribute name="validFrom">
                                                <xsl:value-of select="$effectiveMomentDate"/>
                                            </xsl:attribute>
                                        </xsl:if>
                                        <nga:CostCenterCode>
                                            <xsl:value-of select="peci:Organization_Code"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Organization_Code">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </nga:CostCenterCode>
                                        <xsl:if test="string-length($costCenterName) > 0">
                                            <nga:CostCenterName>
                                                <xsl:value-of select="peci:Organization_Name"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Organization_Name">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </nga:CostCenterName>
                                        </xsl:if>
                                        <oa:Percentage>
                                            <xsl:value-of select="100"/>
                                        </oa:Percentage>      
                                    </nga:CostAssignment>
                                </xsl:if>                            
                            </xsl:for-each>      
                        </xsl:if>
                        <xsl:for-each select="peci:Costing_Allocation[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0][not(peci:Allocation_End_Date)]">
                            <xsl:if test="string-length(peci:Costing_Worktag/peci:Worktag_Code) > 0">
                                <nga:CostAssignment>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom">
                                            <xsl:value-of select="$effectiveMomentDate"/>
                                        </xsl:attribute>
                                    </xsl:if>
                                    <nga:CostCenterCode>
                                        <xsl:value-of select="peci:Costing_Worktag/peci:Worktag_Code"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Costing_Worktag/peci:Worktag_Code">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:CostCenterCode>
                                    <oa:Percentage>
                                        <xsl:value-of select="xs:decimal(peci:Allocation_Percentage) * 100"/>
                                    </oa:Percentage>      
                                </nga:CostAssignment>         
                            </xsl:if>                    
                        </xsl:for-each>
                        
                        <xsl:variable name="payScalePositionFlag">
                            <xsl:value-of select="concat(peci:Position/ptdf:PayScaleType,peci:Position/ptdf:PayScaleGroup,peci:Position/ptdf:PayScaleLevel)"/>
                        </xsl:variable>
                         <xsl:variable name="payScaleAddInfoFlag">
                            <xsl:value-of select="concat(peci:Additional_Information/ptdf:PayScaleType,peci:Additional_Information/ptdf:PayScaleGroup,peci:Additional_Information/ptdf:PayScaleLevel)"/>
                        </xsl:variable>
                        <xsl:if test="string-length($payScalePositionFlag) > 0 or string-length($payScaleAddInfoFlag) > 0">
                            <nga:PayScales>
                                <xsl:if test="string-length($effectiveMomentDate) > 0">
                                    <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                </xsl:if>
                                <xsl:choose>
                                    <xsl:when test="peci:Position/ptdf:PayScaleType and peci:Position/ptdf:PayScaleType != 'N/A'">
                                        <nga:PayScaleType>
                                            <xsl:value-of select="normalize-space(peci:Position/ptdf:PayScaleType/ptdf:PayScaleType)"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Position/ptdf:PayScaleType/ptdf:PayScaleType">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </nga:PayScaleType>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="string-length(peci:Additional_Information/ptdf:PayScaleType) > 0 and peci:Additional_Information/ptdf:PayScaleType != 'N/A'">
                                            <nga:PayScaleType>
                                                <xsl:value-of select="normalize-space(peci:Additional_Information/ptdf:PayScaleType)"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Additional_Information/ptdf:PayScaleType">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </nga:PayScaleType>
                                        </xsl:if>
                                    </xsl:otherwise>
                                </xsl:choose>
                              
                                <xsl:choose>
                                    <xsl:when test="peci:Position/ptdf:PayScaleGroup">
                                        <nga:PayScaleGroup>
                                            <xsl:value-of select="normalize-space(peci:Position/ptdf:PayScaleGroup)"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Position/ptdf:PayScaleGroup">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </nga:PayScaleGroup>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="string-length(peci:Additional_Information/ptdf:PayScaleGroup) > 0">
                                            <nga:PayScaleGroup>
                                                <xsl:value-of select="normalize-space(peci:Additional_Information/ptdf:PayScaleGroup)"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Additional_Information/ptdf:PayScaleGroup">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </nga:PayScaleGroup>
                                        </xsl:if>
                                    </xsl:otherwise>
                                </xsl:choose>
                                
                                <xsl:choose>
                                    <xsl:when test="peci:Position/ptdf:PayScaleLevel">
                                        <nga:PayScaleLevel>
                                            <xsl:value-of select="normalize-space(peci:Position/ptdf:PayScaleLevel)"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Position/ptdf:PayScaleLevel">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </nga:PayScaleLevel>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="string-length(peci:Additional_Information/ptdf:PayScaleLevel) > 0">
                                            <nga:PayScaleLevel>
                                                <xsl:value-of select="normalize-space(peci:Additional_Information/ptdf:PayScaleLevel)"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Additional_Information/ptdf:PayScaleLevel">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </nga:PayScaleLevel>
                                        </xsl:if>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </nga:PayScales>
                        </xsl:if>
                        
                        <xsl:variable name="dateFlag">
                            <xsl:value-of select="concat(peci:Worker_Status/peci:Active_Status_Date,peci:Worker_Status/peci:Hire_Date,peci:Worker_Status/peci:End_Employment_Date,peci:Worker_Status/peci:Continuous_Service_Date,
                                peci:Worker_Status/peci:Seniority_Date,peci:Worker_Status/peci:Severance_Date,peci:Worker_Status/peci:Retirement_Date,peci:Worker_Status/peci:Benefits_Service_Date,peci:Worker_Status/peci:Company_Service_Date,
                                peci:Worker_Status/peci:Time_Off_Service_Date,peci:Worker_Status/peci:Vesting_Date,peci:Worker_Status/peci:Resignation_Date,peci:Worker_Status/peci:Termination_Last_Day_of_Work,peci:Worker_Status/peci:Date_Entered_Workforce,
                                peci:Worker_Status/peci:Last_Date_for_Which_Paid,peci:Worker_Status/peci:Expected_Date_of_Return,peci:Personal/peci:Date_of_Death,peci:Position[not(peci:Position_End_Date)]/peci:Probation_Start_Date,peci:Position[not(peci:Position_End_Date)]/peci:Probation_End_Date)"/>
                        </xsl:variable>
                        <xsl:if test="string-length($dateFlag) > 0">
                            <nga:DateSpecifications>
                                <xsl:if test="string-length(peci:Worker_Status/peci:Active_Status_Date) > 0">
                                    <nga:Date>
                                        <xsl:attribute name="DateType">
                                            <xsl:value-of select="'Active_Status_Date'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="substring(peci:Worker_Status/peci:Active_Status_Date,1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worker_Status/peci:Active_Status_Date">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:Date>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Worker_Status/peci:Hire_Date) > 0">
                                    <nga:Date>
                                        <xsl:attribute name="DateType">
                                            <xsl:value-of select="'Hire_Date'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="substring(peci:Worker_Status/peci:Hire_Date,1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worker_Status/peci:Hire_Date">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:Date>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Worker_Status/peci:End_Employment_Date) > 0">
                                    <nga:Date>
                                        <xsl:attribute name="DateType">
                                            <xsl:value-of select="'End_Employment_Date'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="substring(peci:Worker_Status/peci:End_Employment_Date,1,10)"/>   
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worker_Status/peci:End_Employment_Date">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:Date>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Worker_Status/peci:Continuous_Service_Date) > 0">
                                    <nga:Date>
                                        <xsl:attribute name="DateType">
                                            <xsl:value-of select="'ContinuousServiceDate'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="substring(peci:Worker_Status/peci:Continuous_Service_Date,1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worker_Status/peci:Continuous_Service_Date">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:Date>
                                </xsl:if> 
                                <xsl:if test="string-length(peci:Worker_Status/peci:Seniority_Date) > 0">
                                    <nga:Date>
                                        <xsl:attribute name="DateType">
                                            <xsl:value-of select="'SeniorityDate'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="substring(peci:Worker_Status/peci:Seniority_Date,1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worker_Status/peci:Seniority_Date">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:Date>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Worker_Status/peci:Severance_Date) > 0">
                                   <nga:Date>
                                       <xsl:attribute name="DateType">
                                           <xsl:value-of select="'Severance_Date'"/>
                                       </xsl:attribute>
                                       <xsl:value-of select="substring(peci:Worker_Status/peci:Severance_Date,1,10)"/>
                                       <xsl:call-template name="usedPECIData">
                                           <xsl:with-param name="xpath">
                                               <xsl:for-each select="peci:Worker_Status/peci:Severance_Date">
                                                   <xsl:call-template name="print-field-xpath"/>            
                                               </xsl:for-each>   
                                           </xsl:with-param>
                                       </xsl:call-template>  
                                   </nga:Date>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Worker_Status/peci:Retirement_Date) > 0">
                                    <nga:Date>
                                        <xsl:attribute name="DateType">
                                            <xsl:value-of select="'Retirement_Date'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="substring(peci:Worker_Status/peci:Retirement_Date,1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worker_Status/peci:Retirement_Date">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:Date>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Worker_Status/peci:Benefits_Service_Date) > 0">
                                    <nga:Date>
                                        <xsl:attribute name="DateType">
                                            <xsl:value-of select="'Benefits_Service_Date'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="substring(peci:Worker_Status/peci:Benefits_Service_Date,1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worker_Status/peci:Benefits_Service_Date">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:Date>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Worker_Status/peci:Company_Service_Date) > 0">
                                    <nga:Date>
                                        <xsl:attribute name="DateType">
                                            <xsl:value-of select="'Company_Service_Date'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="substring(peci:Worker_Status/peci:Company_Service_Date,1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worker_Status/peci:Company_Service_Date">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:Date>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Worker_Status/peci:Time_Off_Service_Date) > 0">
                                    <nga:Date>
                                        <xsl:attribute name="DateType">
                                            <xsl:value-of select="'Time_Off_Service_Date'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="substring(peci:Worker_Status/peci:Time_Off_Service_Date,1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worker_Status/peci:Time_Off_Service_Date">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:Date>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Worker_Status/peci:Vesting_Date) > 0">
                                    <nga:Date>
                                        <xsl:attribute name="DateType">
                                            <xsl:value-of select="'Vesting_Date'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="substring(peci:Worker_Status/peci:Vesting_Date,1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worker_Status/peci:Vesting_Date">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:Date>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Worker_Status/peci:Resignation_Date) > 0">
                                    <nga:Date>
                                        <xsl:attribute name="DateType">
                                            <xsl:value-of select="'Resignation_Date'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="substring(peci:Worker_Status/peci:Resignation_Date,1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worker_Status/peci:Resignation_Date">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:Date>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Worker_Status/peci:Termination_Last_Day_of_Work) > 0">
                                    <nga:Date>
                                        <xsl:attribute name="DateType">
                                            <xsl:value-of select="'Termination_Last_Day_of_Work'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="substring(peci:Worker_Status/peci:Termination_Last_Day_of_Work,1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worker_Status/peci:Termination_Last_Day_of_Work">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:Date>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Worker_Status/peci:Date_Entered_Workforce) > 0">
                                    <nga:Date>
                                        <xsl:attribute name="DateType">
                                            <xsl:value-of select="'Date_Entered_Workforce'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="substring(peci:Worker_Status/peci:Date_Entered_Workforce,1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worker_Status/peci:Date_Entered_Workforce">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:Date>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Worker_Status/peci:Last_Date_for_Which_Paid) > 0">
                                    <nga:Date>
                                        <xsl:attribute name="DateType">
                                            <xsl:value-of select="'Last_Date_for_Which_Paid'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="substring(peci:Worker_Status/peci:Last_Date_for_Which_Paid,1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worker_Status/peci:Last_Date_for_Which_Paid">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:Date>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Worker_Status/peci:Expected_Date_of_Return) > 0">
                                    <nga:Date>
                                        <xsl:attribute name="DateType">
                                            <xsl:value-of select="'Expected_Date_of_Return'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="substring(peci:Worker_Status/peci:Expected_Date_of_Return,1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worker_Status/peci:Expected_Date_of_Return">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:Date>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Personal/peci:Date_of_Death) > 0">
                                    <nga:Date>
                                        <xsl:attribute name="DateType">
                                            <xsl:value-of select="'Date_of_Death'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="substring(peci:Personal/peci:Date_of_Death,1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Personal/peci:Date_of_Death">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:Date>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Position[not(peci:Position_End_Date)]/peci:Probation_Start_Date) > 0">
                                    <nga:Date>
                                        <xsl:attribute name="DateType">
                                            <xsl:value-of select="'Probation_Start_Date'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="substring(peci:Position[not(peci:Position_End_Date)]/peci:Probation_Start_Date,1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Position[not(peci:Position_End_Date)]/peci:Probation_Start_Date">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:Date>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Position[not(peci:Position_End_Date)]/peci:Probation_End_Date) > 0">
                                    <nga:Date>
                                        <xsl:attribute name="DateType">
                                            <xsl:value-of select="'Probation_End_Date'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="substring(peci:Position[not(peci:Position_End_Date)]/peci:Probation_End_Date,1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Position[not(peci:Position_End_Date)]/peci:Probation_End_Date">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:Date>
                                </xsl:if>
                            </nga:DateSpecifications>
                        </xsl:if>
                        <xsl:for-each select="peci:Employee_Contract">
                            <xsl:variable name="contractValidFrom">
                                <xsl:choose>
                                    <xsl:when test="../peci:Derived_Event_Code = ('PCI','ORG') or $checkPGIEvent = 'Y'">
                                        <xsl:value-of select="substring(../peci:Effective_Moment,1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Start_Date">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:call-template name="insertDateWithDash">
                                            <xsl:with-param name="date"
                                                select="substring(peci:Start_Date,1,10)"/>
                                        </xsl:call-template>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Start_Date">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </xsl:otherwise>                                        
                                </xsl:choose>
                            </xsl:variable>
                            <nga:ContractElements>
                                <xsl:if test="string-length($contractValidFrom) > 0">
                                    <xsl:attribute name="validFrom" select="$contractValidFrom"/>                                     
                                </xsl:if>
                                <xsl:if test="string-length(peci:Contract_Type)>0">
                                    <nga:ContractType>
                                        <xsl:value-of select="peci:Contract_Type"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Contract_Type">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </nga:ContractType>
                                </xsl:if>               
                                <xsl:if test="string-length(peci:Start_Date)>0">
                                    <nga:ContractStartDate>
                                        <xsl:call-template name="insertDateWithDash">
                                            <xsl:with-param name="date" select="substring(peci:Start_Date,1,10)"/>
                                        </xsl:call-template>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Start_Date">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </nga:ContractStartDate>                                      
                                </xsl:if>
                                <xsl:if test="string-length(peci:End_Date)>0">
                                    <nga:ContractEndDate>
                                        <xsl:call-template name="insertDateWithDash">
                                            <xsl:with-param name="date" select="substring(peci:End_Date,1,10)"/>
                                        </xsl:call-template>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:End_Date">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </nga:ContractEndDate>
                                </xsl:if>
                            </nga:ContractElements>
                        </xsl:for-each>
                        <xsl:if test="peci:Additional_Information/*[contains(name(),'ptdf:PayrollSpecificGrouping')] or peci:Position/*[contains(name(),'ptdf:PayrollSpecificGrouping')]">                             
                            <nga:PayrollSpecificGroupings>
                                <!--    nga:PayrollSpecificGrouping1        -->
                                <xsl:choose>
                                    <xsl:when test="peci:Position/ptdf:PayrollSpecificGrouping1 and (peci:Person_Identification/peci:Visa/peci:Country != 'CH' or count(peci:Person_Identification/peci:Visa) =0)">
                                        <nga:PayrollSpecificGrouping1>
                                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                            </xsl:if>                                                
                                            <xsl:value-of select="normalize-space(peci:Position/ptdf:PayrollSpecificGrouping1)"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Position/ptdf:PayrollSpecificGrouping1">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </nga:PayrollSpecificGrouping1>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="string-length(peci:Additional_Information/ptdf:PayrollSpecificGrouping1) > 0 and (peci:Person_Identification/peci:Visa/peci:Country != 'CH' or count(peci:Person_Identification/peci:Visa) =0)">
                                            <nga:PayrollSpecificGrouping1>
                                                <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                    <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                                </xsl:if>                                                
                                                <xsl:value-of select="normalize-space(peci:Additional_Information/ptdf:PayrollSpecificGrouping1)"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Additional_Information/ptdf:PayrollSpecificGrouping1">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </nga:PayrollSpecificGrouping1>
                                        </xsl:if>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <!--    nga:PayrollSpecificGrouping2        -->
                                <xsl:choose>
                                    <xsl:when test="peci:Position/ptdf:PayrollSpecificGrouping2">
                                        <nga:PayrollSpecificGrouping2>
                                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                            </xsl:if>                                      
                                            <xsl:value-of select="normalize-space(peci:Position/ptdf:PayrollSpecificGrouping2)"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Position/ptdf:PayrollSpecificGrouping2">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </nga:PayrollSpecificGrouping2>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="string-length(peci:Additional_Information/ptdf:PayrollSpecificGrouping2) >0">
                                            <nga:PayrollSpecificGrouping2>
                                                <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                    <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                                </xsl:if>                                      
                                                <xsl:value-of select="normalize-space(peci:Additional_Information/ptdf:PayrollSpecificGrouping2)"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Additional_Information/ptdf:PayrollSpecificGrouping2">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </nga:PayrollSpecificGrouping2>
                                        </xsl:if>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <!--        nga:PayrollSpecificGrouping3        -->
                                <xsl:choose>
                                    <xsl:when test="peci:Position/ptdf:PayrollSpecificGrouping3">
                                        <nga:PayrollSpecificGrouping3>
                                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                            </xsl:if>                                         
                                            <xsl:value-of select="normalize-space(peci:Position/ptdf:PayrollSpecificGrouping3)"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Position/ptdf:PayrollSpecificGrouping3">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </nga:PayrollSpecificGrouping3>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="string-length(peci:Additional_Information/ptdf:PayrollSpecificGrouping3) > 0">
                                            <nga:PayrollSpecificGrouping3>
                                                <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                    <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                                </xsl:if>                                         
                                                <xsl:value-of select="normalize-space(peci:Additional_Information/ptdf:PayrollSpecificGrouping3)"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Additional_Information/ptdf:PayrollSpecificGrouping3">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </nga:PayrollSpecificGrouping3>
                                        </xsl:if>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <!--        nga:PayrollSpecificGrouping4            -->
                                <xsl:choose>
                                    <xsl:when test="peci:Position/ptdf:PayrollSpecificGrouping4">
                                        <nga:PayrollSpecificGrouping4>
                                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                            </xsl:if>                                      
                                            <xsl:value-of select="normalize-space(peci:Position/ptdf:PayrollSpecificGrouping4)"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Position/ptdf:PayrollSpecificGrouping4">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </nga:PayrollSpecificGrouping4>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="string-length(peci:Additional_Information/ptdf:PayrollSpecificGrouping4) > 0">
                                            <nga:PayrollSpecificGrouping4>
                                                <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                    <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                                </xsl:if>                                      
                                                <xsl:value-of select="normalize-space(peci:Additional_Information/ptdf:PayrollSpecificGrouping4)"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Additional_Information/ptdf:PayrollSpecificGrouping4">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </nga:PayrollSpecificGrouping4>
                                        </xsl:if>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <!--        nga:PayrollSpecificGrouping5            -->
                                <xsl:choose>
                                    <xsl:when test="peci:Position/ptdf:PayrollSpecificGrouping5">
                                        <nga:PayrollSpecificGrouping5>
                                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                            </xsl:if>                                      
                                            <xsl:value-of select="normalize-space(peci:Position/ptdf:PayrollSpecificGrouping5)"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Position/ptdf:PayrollSpecificGrouping5">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </nga:PayrollSpecificGrouping5>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="string-length(peci:Additional_Information/ptdf:PayrollSpecificGrouping5) > 0">
                                            <nga:PayrollSpecificGrouping5>
                                                <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                    <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                                </xsl:if>                                      
                                                <xsl:value-of select="normalize-space(peci:Additional_Information/ptdf:PayrollSpecificGrouping5)"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Additional_Information/ptdf:PayrollSpecificGrouping5">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </nga:PayrollSpecificGrouping5>
                                        </xsl:if>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <!--        nga:PayrollSpecificGrouping6        -->
                                <xsl:choose>
                                    <xsl:when test="peci:Position/ptdf:PayrollSpecificGrouping6">
                                        <nga:PayrollSpecificGrouping6>
                                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                            </xsl:if>                                       
                                            <xsl:value-of select="normalize-space(peci:Position/ptdf:PayrollSpecificGrouping6)"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Position/ptdf:PayrollSpecificGrouping6">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </nga:PayrollSpecificGrouping6>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="string-length(peci:Additional_Information/ptdf:PayrollSpecificGrouping6) > 0">
                                            <nga:PayrollSpecificGrouping6>
                                                <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                    <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                                </xsl:if>                                       
                                                <xsl:value-of select="normalize-space(peci:Additional_Information/ptdf:PayrollSpecificGrouping6)"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Additional_Information/ptdf:PayrollSpecificGrouping6">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </nga:PayrollSpecificGrouping6>
                                        </xsl:if>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <!--            nga:PayrollSpecificGrouping7        -->
                                <xsl:choose>
                                    <xsl:when test="peci:Position/ptdf:PayrollSpecificGrouping7">
                                        <nga:PayrollSpecificGrouping7>
                                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                            </xsl:if>                                      
                                            <xsl:value-of select="normalize-space(peci:Position/ptdf:PayrollSpecificGrouping7)"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Position/ptdf:PayrollSpecificGrouping7">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </nga:PayrollSpecificGrouping7>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="string-length(peci:Additional_Information/ptdf:PayrollSpecificGrouping7) > 0">
                                            <nga:PayrollSpecificGrouping7>
                                                <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                    <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                                </xsl:if>                                      
                                                <xsl:value-of select="normalize-space(peci:Additional_Information/ptdf:PayrollSpecificGrouping7)"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Additional_Information/ptdf:PayrollSpecificGrouping7">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </nga:PayrollSpecificGrouping7>
                                        </xsl:if>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <!--        nga:PayrollSpecificGrouping8         -->
                                <xsl:choose>
                                    <xsl:when test="peci:Position/ptdf:PayrollSpecificGrouping8">
                                        <nga:PayrollSpecificGrouping8>
                                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                            </xsl:if>                                         
                                            <xsl:value-of select="normalize-space(peci:Position/ptdf:PayrollSpecificGrouping8)"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Position/ptdf:PayrollSpecificGrouping8">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </nga:PayrollSpecificGrouping8>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="string-length(peci:Additional_Information/ptdf:PayrollSpecificGrouping8) > 0">
                                            <nga:PayrollSpecificGrouping8>
                                                <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                    <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                                </xsl:if>                                         
                                                <xsl:value-of select="normalize-space(peci:Additional_Information/ptdf:PayrollSpecificGrouping8)"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Additional_Information/ptdf:PayrollSpecificGrouping8">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </nga:PayrollSpecificGrouping8>
                                        </xsl:if>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <!--        nga:PayrollSpecificGrouping9         -->
                                <xsl:choose>
                                    <xsl:when test="peci:Position/ptdf:PayrollSpecificGrouping9">
                                        <nga:PayrollSpecificGrouping9>
                                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                            </xsl:if>                                        
                                            <xsl:value-of select="normalize-space(peci:Position/ptdf:PayrollSpecificGrouping9)"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Position/ptdf:PayrollSpecificGrouping9">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </nga:PayrollSpecificGrouping9>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="string-length(peci:Additional_Information/ptdf:PayrollSpecificGrouping9) > 0">
                                            <nga:PayrollSpecificGrouping9>
                                                <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                    <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                                </xsl:if>                                        
                                                <xsl:value-of select="normalize-space(peci:Additional_Information/ptdf:PayrollSpecificGrouping9)"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Additional_Information/ptdf:PayrollSpecificGrouping9">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </nga:PayrollSpecificGrouping9>
                                        </xsl:if>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <!--            nga:PayrollSpecificGrouping10           -->
                                <xsl:choose>
                                    <xsl:when test="peci:Position/ptdf:PayrollSpecificGrouping10">
                                        <nga:PayrollSpecificGrouping10>
                                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                            </xsl:if>                                        
                                            <xsl:value-of select="normalize-space(peci:Position/ptdf:PayrollSpecificGrouping10)"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Position/ptdf:PayrollSpecificGrouping10">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </nga:PayrollSpecificGrouping10>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="string-length(peci:Additional_Information/ptdf:PayrollSpecificGrouping10) > 0">
                                            <nga:PayrollSpecificGrouping10>
                                                <xsl:if test="string-length($effectiveMomentDate) > 0">
                                                    <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                                </xsl:if>                                        
                                                <xsl:value-of select="normalize-space(peci:Additional_Information/ptdf:PayrollSpecificGrouping10)"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Additional_Information/ptdf:PayrollSpecificGrouping10">
                                                            <xsl:call-template name="print-field-xpath"/>            
                                                        </xsl:for-each>   
                                                    </xsl:with-param>
                                                </xsl:call-template>  
                                            </nga:PayrollSpecificGrouping10>
                                        </xsl:if>
                                    </xsl:otherwise>
                                </xsl:choose>                                
                            </nga:PayrollSpecificGroupings>
                        </xsl:if> 
                        <nga:AlternateIdentifiers>
                            <nga:AlternateID>
                                <xsl:value-of select="$personID"/>
                            </nga:AlternateID>
                            <xsl:for-each select="peci:Person_Identification/peci:National_Identifier">                               
                                <xsl:variable name="alternateID">
                                    <xsl:call-template name="templateNationalIDType">
                                        <xsl:with-param name="NationalIDType" select="peci:National_ID_Type"/>
                                    </xsl:call-template>
                                </xsl:variable>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:National_ID_Type">
                                            <xsl:call-template name="print-field-xpath"/>            
                                        </xsl:for-each>   
                                    </xsl:with-param>
                                </xsl:call-template>  
                                <xsl:if test="string-length($alternateID) = 0">
                                    <xsl:element name="nga:AlternateID">
                                        <xsl:attribute name="Type" select="peci:National_ID_Type"/>
                                        <xsl:value-of select="translate(peci:National_ID,$removeChars,'')"/>
                                    </xsl:element>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:National_ID_Type">
                                                <xsl:call-template name="print-field-xpath"/>            
                                            </xsl:for-each>   
                                        </xsl:with-param>
                                    </xsl:call-template>  
                                </xsl:if>                                  
                            </xsl:for-each>  
                            <!-- Government Identifier Mapping -->
                            <xsl:for-each select="peci:Person_Identification/peci:Government_Identifier">
                                <xsl:variable name="governmentID">
                                    <xsl:call-template name="templateNationalIDType">
                                        <xsl:with-param name="NationalIDType" select="peci:Government_ID_Type"/>
                                    </xsl:call-template>
                                </xsl:variable>
                                <xsl:if test="string-length($governmentID) = 0">
                                    <xsl:element name="nga:AlternateID">
                                        <xsl:attribute name="Type" select="peci:Government_ID_Type"/>
                                        <xsl:value-of select="translate(peci:Government_ID,$removeChars,'')"/>
                                    </xsl:element>
                                </xsl:if>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Government_ID_Type">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Government_ID">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:for-each>
                            <!-- Other Identifier Mapping -->
                            <xsl:for-each select="peci:Person_Identification/peci:Other_Identifier">
                                <xsl:variable name="otherID">
                                    <xsl:call-template name="templateNationalIDType">
                                        <xsl:with-param name="NationalIDType" select="peci:Custom_ID_Type"/>
                                    </xsl:call-template>
                                </xsl:variable>
                                <xsl:if test="string-length($otherID) = 0">
                                    <xsl:element name="nga:AlternateID">
                                        <xsl:attribute name="Type" select="peci:Custom_ID_Type"/>
                                        <xsl:value-of select="translate(peci:Custom_ID,$removeChars,'')"/>
                                    </xsl:element>
                                </xsl:if>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Custom_ID_Type">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Custom_ID">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:for-each>
                            <!--<xsl:variable name="empIDLength" select="string-length($personID)"/>
                            <xsl:variable name="varEmpID" select="$personID"/>
                            <xsl:variable name="payservID">
                                <xsl:for-each select="//Employment/results[LCC = $employeeLCC]">                                        
                                    <xsl:variable name="varhrisID" select="substring(HRIS_EE_ID,1,$empIDLength)"/>                                       
                                    <xsl:if test="$varhrisID = $varEmpID">
                                        <xsl:value-of select="PAYROLL_SERVICE_ID"/>
                                        <xsl:text >± </xsl:text>
                                    </xsl:if>
                                </xsl:for-each>
                            </xsl:variable>
                            <xsl:if test="peci:Derived_Event_Code = ('PCI','ORG','HIR') and string-length($payservID) > 0">
                                <nga:PayServID>
                                    <xsl:value-of select="substring-before($payservID, '± ')" />
                                </nga:PayServID>                                
                            </xsl:if>-->
                        </nga:AlternateIdentifiers>  
                        <nga:AlternateDescriptions>
                            <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                            <nga:Description>
                                <xsl:attribute name="Type" select="'HireReason'"/>
                                 <xsl:choose>
                                    <xsl:when test="(substring(peci:Worker_Status/peci:Original_Hire_Date,1,10) &lt; $effectiveMomentDate) and peci:Derived_Event_Code = 'HIR'">
                                        <xsl:value-of select="peci:Worker_Status/peci:Hire_Reason"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worker_Status/peci:Hire_Reason">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </xsl:when>
                                    <xsl:when test="peci:Derived_Event_Code = ('HIR','HIR-R')">
                                        <xsl:value-of select="peci:Worker_Status/peci:Hire_Reason"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worker_Status/peci:Hire_Reason">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </xsl:when>
                                    <xsl:when test="peci:Derived_Event_Code ='ORG'">
                                        <xsl:value-of select="'CompanyTransfer'"/>
                                    </xsl:when>                                              
                                    <xsl:when test="peci:Derived_Event_Code ='PCI'">
                                        <xsl:value-of select="'CompanyTransfer'"/>
                                    </xsl:when>                                                  
                                    <xsl:when test="peci:Derived_Event_Code = ('DTA','PGI')">
                                        <xsl:choose>
                                            <xsl:when test="peci:Position/ptdf:OrganizationID/@peci:priorValue and (peci:Position/ptdf:OrganizationID/@peci:priorValue != peci:Position/ptdf:OrganizationID)">
                                                <xsl:value-of select="'CompanyTransfer'"/>
                                            </xsl:when>
                                            <xsl:when test="string-length(peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue) > 0 and (peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue != peci:Additional_Information/ptdf:OrganizationID)">
                                                <xsl:value-of select="'CompanyTransfer'"/>
                                            </xsl:when>
                                        </xsl:choose>
                                    </xsl:when>
                                </xsl:choose> 
                            </nga:Description>
                            <xsl:if test="string-length(peci:Position[not(peci:Position_End_Date)]/peci:Job_Change_Reason) > 0">
                                <nga:Description>
                                    <xsl:attribute name="Type" select="'JobChangeReason'"/>
                                    <xsl:value-of select="normalize-space(peci:Position[not(peci:Position_End_Date)]/peci:Job_Change_Reason)"/>
                                </nga:Description>
                            </xsl:if>     
                            <xsl:if test="string-length(peci:Compensation[not(peci:Position_End_Date)]/peci:Compensation_Change_Reason) > 0">
                                <nga:Description>
                                    <xsl:attribute name="Type" select="'CompensationChangeReason'"/>
                                    <xsl:value-of select="normalize-space(peci:Compensation[not(peci:Position_End_Date)]/peci:Compensation_Change_Reason)"/>
                                </nga:Description>
                            </xsl:if>      
                        </nga:AlternateDescriptions>                           
                    </nga:PayServEmpExtension>   
                    <nga:PayServEmpPayElements>
                        <xsl:for-each select="peci:Compensation_Plans[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                            <xsl:for-each select="peci:Allowance_Plan">
                                <xsl:if test="peci:Compensation_Plan != 'N/A' and string-length(peci:Percentage) > 0">
                                    <nga:PayElement>
                                        <xsl:if test="string-length(peci:Start_Date) > 0">
                                            <xsl:attribute name="validFrom" select="substring(peci:Start_Date,1,10)"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Start_Date">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </xsl:if>
                                        <xsl:if test="string-length(peci:End_Date) > 0">
                                            <xsl:attribute name="validTo" select="substring(peci:End_Date,1,10)"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:End_Date">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </xsl:if>
                                        <hr:ID>
                                            <xsl:value-of select="peci:Compensation_Plan"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Compensation_Plan">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </hr:ID>
                                        <nga:PayElementType>RECURRING</nga:PayElementType>
                                        <xsl:choose>
                                            <xsl:when test="$vGcc = 'THA' and $vLcc = 'AU001'">       
                                                <nga:Amount>
                                                    <xsl:call-template name="percentageFormatting">
                                                        <xsl:with-param name="value" select="peci:Percentage"/>
                                                    </xsl:call-template>
                                                </nga:Amount>
                                            </xsl:when>                                            
                                            <xsl:otherwise>
                                                <nga:Units>
                                                    <xsl:value-of select="format-number(xs:decimal(peci:Percentage) * 100, '0.00')"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Percentage">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>  
                                                </nga:Units>
                                                <nga:UnitType>
                                                    <xsl:value-of select="'PERCENT'"/>
                                                </nga:UnitType>
                                                <hr:CurrencyCode>
                                                    <xsl:value-of select="peci:Currency"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Currency">
                                                                <xsl:call-template name="print-field-xpath"/>            
                                                            </xsl:for-each>   
                                                        </xsl:with-param>
                                                    </xsl:call-template>
                                                </hr:CurrencyCode>
                                            </xsl:otherwise>
                                        </xsl:choose>                            
                                    </nga:PayElement>       
                                </xsl:if>
                            </xsl:for-each>
                        </xsl:for-each>         
                        <xsl:for-each select="peci:Compensation_Earnings_and_Deductions[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                            <nga:PayElement>
                                <xsl:if test="string-length($effectiveMomentDate) > 0">
                                    <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                </xsl:if>
                                <hr:ID>
                                    <xsl:value-of select="peci:External_Payroll_Code"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:External_Payroll_Code">
                                                <xsl:call-template name="print-field-xpath"/>            
                                            </xsl:for-each>   
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:ID>
                                <nga:PayElementType>RECURRING</nga:PayElementType>    
                                <nga:Amount>
                                    <xsl:choose>
                                        <xsl:when test="string-length(peci:Non_Prorated_Amount) > 0">
                                            <xsl:choose>
                                                <xsl:when test="contains(peci:Non_Prorated_Amount,'.')">
                                                    <xsl:value-of select="peci:Non_Prorated_Amount"/>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:value-of select="format-number(xs:decimal(peci:Non_Prorated_Amount), '0.00')"/>
                                                </xsl:otherwise>
                                            </xsl:choose>                                            
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Non_Prorated_Amount">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </xsl:when>
                                        <xsl:when test="string-length(peci:Amount) > 0">
                                            <xsl:choose>
                                                <xsl:when test="contains(peci:Amount,'.')">
                                                    <xsl:value-of select="peci:Amount"/>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:value-of select="format-number(xs:decimal(peci:Amount),'0.00')"/>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Amount">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </xsl:when>
                                    </xsl:choose>
                                </nga:Amount>
                                <hr:CurrencyCode>
                                    <xsl:value-of select="peci:Currency"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Currency">
                                                <xsl:call-template name="print-field-xpath"/>            
                                            </xsl:for-each>   
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:CurrencyCode>
                            </nga:PayElement>       
                        </xsl:for-each>        
                        <xsl:for-each select="peci:Compensation_One_Time_Payment[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                            <nga:PayElement>
                                <xsl:if test="string-length($effectiveMomentDate) > 0">
                                    <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                </xsl:if>
                                <hr:ID>
                                    <xsl:value-of select="peci:External_Payroll_Code"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:External_Payroll_Code">
                                                <xsl:call-template name="print-field-xpath"/>            
                                            </xsl:for-each>   
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:ID>
                                <nga:PayElementType>ADDITIONAL</nga:PayElementType>
                                <xsl:if test="string-length(peci:Amount) > 0">
                                    <nga:Amount>
                                        <xsl:choose>
                                            <xsl:when test="contains(peci:Amount,'.')">
                                                <xsl:value-of select="peci:Amount"/>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of select="format-number(xs:decimal(peci:Amount), '0.00')"/>
                                            </xsl:otherwise>
                                        </xsl:choose>                                        
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Amount">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </nga:Amount>
                                </xsl:if>
                                <hr:CurrencyCode>
                                    <xsl:value-of select="peci:Currency"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Currency">
                                                <xsl:call-template name="print-field-xpath"/>            
                                            </xsl:for-each>   
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:CurrencyCode>
                            </nga:PayElement>       
                        </xsl:for-each>
                        <xsl:for-each select="peci:Payroll_Input_Earnings_and_Deductions[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                            <nga:PayElement>
                                <xsl:if test="string-length(peci:Start_Date) > 0">
                                    <xsl:attribute name="validFrom" select="substring(peci:Start_Date,1,10)"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Start_Date">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:if>   
                                <xsl:if test="string-length(peci:End_Date) > 0">
                                    <xsl:attribute name="validTo" select="substring(peci:End_Date,1,10)"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:End_Date">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:if>                                    
                                <hr:ID>
                                    <xsl:value-of select="peci:External_Payroll_Code"/>   
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:External_Payroll_Code">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:ID>
                                <nga:PayElementType>RECURRING</nga:PayElementType>
                                <nga:Amount>
                                    <xsl:choose>
                                        <xsl:when test="contains(peci:Amount,'.')">
                                            <xsl:value-of select="peci:Amount"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:value-of select="format-number(xs:decimal(peci:Amount), '0.00')"/>
                                        </xsl:otherwise>
                                    </xsl:choose>                                    
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Amount">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>         
                                </nga:Amount>      
                                <xsl:if test="string-length(peci:Worktag/peci:Worktag_Code) > 0 and peci:Worktag/peci:Worktag_Dimension = 'COST_CENTER'">
                                    <nga:CostCenterCode>
                                        <xsl:value-of select="peci:Worktag/peci:Worktag_Code"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worktag/peci:Worktag_Code">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </nga:CostCenterCode>
                                </xsl:if>      
                                <hr:CurrencyCode>
                                    <xsl:value-of select="peci:Currency"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Currency">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:CurrencyCode>        
                            </nga:PayElement>       
                        </xsl:for-each>
                        <xsl:for-each select="peci:Benefits_Earnings_and_Deductions[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                            <nga:PayElement>
                                <xsl:if test="string-length($effectiveMomentDate) > 0">
                                    <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                </xsl:if>
                                <hr:ID>
                                    <xsl:value-of select="peci:External_Payroll_Code"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:External_Payroll_Code">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:ID>
                                <nga:PayElementType>RECURRING</nga:PayElementType>   
                                <xsl:choose>
                                    <xsl:when test="$vGcc = 'THA' and $vLcc = 'AU001'">
                                        <xsl:choose>
                                            <xsl:when test="peci:Percentage > 0">
                                                <nga:Amount>
                                                    <xsl:call-template name="percentageFormatting">
                                                        <xsl:with-param name="value" select="peci:Percentage"/>
                                                    </xsl:call-template>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Percentage">
                                                                <xsl:call-template name="print-field-xpath"/> 
                                                            </xsl:for-each>                       
                                                        </xsl:with-param>
                                                    </xsl:call-template>
                                                </nga:Amount>
                                            </xsl:when>
                                            <xsl:when test="peci:Amount > 0">
                                                <nga:Amount>      
                                                    <xsl:choose>
                                                        <xsl:when test="contains(peci:Amount,'.')">
                                                            <xsl:value-of select="peci:Amount"/>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <xsl:value-of select="format-number(xs:decimal(peci:Amount), '0.00')"/>     
                                                        </xsl:otherwise>
                                                    </xsl:choose>       
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Amount">
                                                                <xsl:call-template name="print-field-xpath"/> 
                                                            </xsl:for-each>                       
                                                        </xsl:with-param>
                                                    </xsl:call-template>
                                                </nga:Amount>                                                    
                                            </xsl:when>
                                        </xsl:choose>                          
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="peci:Amount > 0">
                                            <nga:Amount>
                                                <xsl:choose>
                                                    <xsl:when test="contains(peci:Amount,'.')">
                                                        <xsl:value-of select="peci:Amount"/>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <xsl:value-of select="format-number(xs:decimal(peci:Amount), '0.00')"/>     
                                                    </xsl:otherwise>
                                                </xsl:choose>                                        
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Amount">
                                                            <xsl:call-template name="print-field-xpath"/> 
                                                        </xsl:for-each>                       
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                            </nga:Amount>
                                        </xsl:if>
                                        <xsl:if test="peci:Percentage > 0">
                                            <nga:Units>
                                                <xsl:value-of select="format-number(xs:decimal(peci:Percentage) * 100, '0.00')"/>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Percentage">
                                                            <xsl:call-template name="print-field-xpath"/> 
                                                        </xsl:for-each>                       
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                            </nga:Units>
                                            <nga:UnitType>PERCENT</nga:UnitType> 
                                        </xsl:if>                                        
                                    </xsl:otherwise>                                    
                                </xsl:choose>
                                <xsl:if test="string-length(peci:Worktag/peci:Worktag_Code) > 0 and peci:Worktag/peci:Worktag_Dimension = 'COST_CENTER'">
                                    <nga:CostCenterCode>
                                        <xsl:value-of select="peci:Worktag/peci:Worktag_Code"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worktag/peci:Worktag_Code">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </nga:CostCenterCode>
                                </xsl:if>        
                                <hr:CurrencyCode>
                                    <xsl:value-of select="peci:Currency"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Currency">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:CurrencyCode>                   
                            </nga:PayElement>     
                        </xsl:for-each>
                        <xsl:for-each select="peci:Payroll_One_Time_Payment[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                            <nga:PayElement>
                                <xsl:if test="string-length($effectiveMomentDate) > 0">
                                    <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                </xsl:if>
                                <hr:ID>
                                    <xsl:value-of select="peci:External_Payroll_Code"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:External_Payroll_Code">
                                                <xsl:call-template name="print-field-xpath"/>            
                                            </xsl:for-each>   
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:ID>
                                <nga:PayElementType>ADDITIONAL</nga:PayElementType>
                                <xsl:if test="string-length(peci:Amount) > 0">
                                    <nga:Amount>
                                        <xsl:choose>
                                            <xsl:when test="contains(peci:Amount,'.')">
                                                <xsl:value-of select="peci:Amount"/>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of select="format-number(xs:decimal(peci:Amount), '0.00')"/>
                                            </xsl:otherwise>
                                        </xsl:choose>                                       
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Amount">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </nga:Amount>
                                </xsl:if>
                                <hr:CurrencyCode>
                                    <xsl:value-of select="peci:Currency"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Currency">
                                                <xsl:call-template name="print-field-xpath"/>            
                                            </xsl:for-each>   
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:CurrencyCode>
                            </nga:PayElement>       
                        </xsl:for-each>
                    </nga:PayServEmpPayElements>     
                </nga:PayServEmp>
            </nga:DataArea>
        </nga:ProcessPayServEmp>
    </xsl:template>
    
    <!-- Data Change Template -->   
    <xsl:template name="peci:ProcessPayServEmpDataChange">
        <xsl:param name="bodid"/>
        <xsl:param name="creationDateTime"/>
        <xsl:param name="bodType"/>
        <xsl:param name="actionCode"/>
        <xsl:param name="attribute"/>
        <xsl:param name="personID"/>
        <xsl:param name="employeeID"/>
        <xsl:param name="payGroupID"/>
        <xsl:param name="effectiveMomentDate"/> 
        <xsl:param name="node"/>
        <xsl:param name="countryAddressMapping"/>
        <xsl:param name="checkCountry"/>
        <xsl:param name="paymentElection"/>
        <xsl:param name="addressUsageBehavior"/>
        <xsl:param name="countSection"/>
        <xsl:param name="checkLogicalID"/>   
        <xsl:param name="checkDTAEvent"/>
        <xsl:param name="checkPGIEvent"/>
        <xsl:param name="checkisAddedDTA"/>
        <xsl:param name="tableAbsenceType"/>
        <xsl:param name="tableAbsenceID"/>
        <xsl:param name="tableLocalData"/>
        <xsl:param name="relatedPerson"/>
        <nga:ProcessPayServEmp releaseID="{$releaseID}"
            systemEnvironmentCode="{$systemEnvironmentCode}" languageCode="{$languageCode}">
            <xsl:call-template name="oa:ApplicationAreaTemplate">
                <xsl:with-param name="bodid" select="$bodid"/>
                <xsl:with-param name="bodType" select="$bodType"/>
                <xsl:with-param name="creationDateTime" select="$creationDateTime"/>
                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
            </xsl:call-template>          
            
            <nga:DataArea>
                <oa:Process>
                    <oa:ActionCriteria>
                        <oa:ActionExpression>
                            <xsl:attribute name="actionCode" select="$actionCode"/>
                        </oa:ActionExpression> 
                    </oa:ActionCriteria>
                </oa:Process>            
                <nga:PayServEmp>                    
                    <xsl:if test="$bodType = ('multiPositionSectionRejection')">
                        <xsl:call-template name="nga:PayServEmpPositionRejections"/>     
                    </xsl:if>
                    <hr:IndicativeData>
                        <hr:IndicativePersonDossier>                                              
                            <xsl:call-template name="hr:IndicativePersonTemplate">
                                <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>     
                                <xsl:with-param name="personID" select="$personID"/>
                                <xsl:with-param name="bodType" select="$bodType"/>
                                <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                <xsl:with-param name="checkCountry" select="$checkCountry"/>
                                <xsl:with-param name="addressUsageBehavior" select="$addressUsageBehavior"/>    
                            </xsl:call-template>
                            
                            <xsl:call-template name="hr:IndicativeEmployeeTemplate">
                                <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                <xsl:with-param name="employeeID" select="$employeeID"/>
                                <xsl:with-param name="bodType" select="$bodType"/>
                            </xsl:call-template>
                            
                            
                            <xsl:if test="$bodType = ('workerStatusTerminate','workerStatusActive','workerStatus')">
                                <xsl:call-template name="hr:IndicativeEmploymentStatusTemplate">
                                    <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                    <xsl:with-param name="bodType" select="$bodType"/>
                                </xsl:call-template>
                            </xsl:if>
                            
                            <xsl:if test="$bodType = ('timeOffRejections')">
                                <xsl:call-template name="nga:PayServEmpTimeOffRejections"/>     
                            </xsl:if>
                            
                            <xsl:if test="$bodType = 'LeaveDataChange'">
                                <xsl:call-template name="nga:PayServEmpLeaveDataChange"/> 
                            </xsl:if>
                            
                            <xsl:if test="$bodType = ('position')">
                                <xsl:call-template name="hr:IndicativeDeploymentPositionTemplate">
                                    <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                </xsl:call-template>
                            </xsl:if>
                            
                            <xsl:if test="$bodType = ('additionalInfo')">
                                <xsl:call-template name="hr:IndicativeDeploymentAddInfoTemplate">
                                    <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                </xsl:call-template>
                            </xsl:if>
                            
                            <xsl:if test="$bodType = ('additionalInfo','position')">
                                <xsl:call-template name="hr:PayCycleRemunerationTemplate">
                                    <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                    <xsl:with-param name="payGroupID" select="$payGroupID"/>
                                    <xsl:with-param name="bodType" select="$bodType"/>
                                </xsl:call-template>
                            </xsl:if>                           
                        </hr:IndicativePersonDossier>
                    </hr:IndicativeData>
                    <xsl:if test="$bodType = ('paymentElection','costAssignment','workerStatusActive','workerStatusTerminate','personal','position','additionalInfo',
                        'workerStatus','costAssignmentPosition','employeeContract','payrollSpecificGrouping','costAssignmentHomeOrg','costAssignmentDeleteHomeOrg',
                        'personLegalIdMain','personLegalIdAdd','personLegalIdUpdate','personLegalIdDelete')">
                        <nga:PayServEmpExtension>
                            <xsl:if test="$bodType = 'paymentElection'">
                                <xsl:call-template name="nga:PaymentInstructionsTemplate">
                                    <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>         
                                    <xsl:with-param name="paymentElection" select="$paymentElection"/>
                                    <xsl:with-param name="countSection" select="$countSection"/>
                                </xsl:call-template>
                            </xsl:if>
                            <xsl:if test="$bodType = ('position','costAssignmentPosition','costAssignmentHomeOrg','costAssignmentDeleteHomeOrg')">
                                <xsl:call-template name="nga:OrganizationTemplate">
                                    <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                    <xsl:with-param name="bodType" select="$bodType"/>
                                    <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                </xsl:call-template>
                            </xsl:if>             
                            <xsl:if test="$bodType = 'costAssignment'">
                                <xsl:call-template name="nga:CostAssignmentTemplate">
                                    <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                </xsl:call-template>
                            </xsl:if>   
                            <xsl:if test="$bodType = ('additionalInfo','position')">
                                <xsl:call-template name="nga:PayScalesTemplate">
                                    <xsl:with-param name="bodType" select="$bodType"/>
                                    <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                </xsl:call-template>
                            </xsl:if>
                            <xsl:if test="$bodType = ('workerStatusActive','workerStatusTerminate','personal','position','workerStatus')">
                                <xsl:call-template name="nga:DateSpecificationsTemplate">
                                    <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                </xsl:call-template>
                            </xsl:if>
                            <xsl:if test="$bodType ='employeeContract'">
                                <xsl:call-template name="nga:ContractElements"/>  
                            </xsl:if>
                            <xsl:if test="$bodType = ('payrollSpecificGrouping','position')">
                                <xsl:call-template name="nga:PayrollSpecificGroupingTemplate">
                                    <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                    <xsl:with-param name="attribute" select="$attribute"/>
                                    <xsl:with-param name="bodType" select="$bodType"/>
                                </xsl:call-template>
                            </xsl:if> 
                            <xsl:if test="$bodType = ('personLegalIdMain','personLegalIdAdd','personLegalIdUpdate','personLegalIdDelete')">
                                <xsl:call-template name="nga:AlternateIDTemplate">
                                    <xsl:with-param name="bodType" select="$bodType"/>
                                </xsl:call-template>    
                            </xsl:if>
                            <xsl:if test="$bodType = 'position'">
                                <xsl:call-template name="nga:AlternateDescriptions">
                                    <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                </xsl:call-template>
                            </xsl:if>
                        </nga:PayServEmpExtension>
                    </xsl:if>
                    <xsl:variable name="localPayrollFlag">
                        <xsl:choose>
                            <xsl:when test="$bodType = 'localJppdJP'">
                                <xsl:value-of select="'JPPD'"/>
                            </xsl:when>
                            <xsl:when test="$bodType = 'localJpaddrJP'">
                                <xsl:value-of select="'JPADDR'"/>
                            </xsl:when>
                            <xsl:when test="$bodType = 'localJpfaJP'">
                                <xsl:value-of select="'JPFA'"/>
                            </xsl:when>
                            <xsl:when test="$bodType = 'localReligionCH'">
                                <xsl:value-of select="'CH'"/>
                            </xsl:when> 
                            <xsl:when test="$bodType = 'localVisaCH'">
                                <xsl:value-of select="'CH'"/>
                            </xsl:when>   
                            <xsl:when test="$bodType = 'localPassportBR'">
                                <xsl:value-of select="'BR'"/>
                            </xsl:when>   
                            <xsl:when test="$bodType = 'localScriptNameKR'">
                                <xsl:value-of select="'KR'"/>
                            </xsl:when>
                            <xsl:when test="$bodType = 'localPersonalInfoSG'">
                                <xsl:value-of select="'SG'"/>
                            </xsl:when>
                            <xsl:when test="$bodType = 'localDepChildPH'">
                                <xsl:value-of select="'PHDC'"/>
                            </xsl:when>
                            <xsl:when test="$bodType = 'localMXPI'">
                                <xsl:value-of select="'MXPI'"/>
                            </xsl:when>
                            <xsl:when test="$bodType = 'localParentsNameGR'">
                                <xsl:value-of select="'GRAPD'"/>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:if test="string-length($localPayrollFlag)  > 0">
                        <nga:PayServEmpExtension>
                            <xsl:call-template name="peciLocalPayrollDataToBOD">
                                <xsl:with-param name="country" select="$localPayrollFlag"/> 
                                <xsl:with-param name="bodType" select="$bodType"/>
                                <xsl:with-param name="validFrom" select="$effectiveMomentDate"/>
                                <xsl:with-param name="checkDTAEvent" select="$checkDTAEvent"/>
                                <xsl:with-param name="checkPGIEvent" select="$checkPGIEvent"/>
                                <xsl:with-param name="checkisAddedDTA" select="$checkisAddedDTA"/>
                                <xsl:with-param name="tableLocalData" select="$tableLocalData"/>
                                <xsl:with-param name="relatedPerson" select="$relatedPerson"/>
                            </xsl:call-template> 
                        </nga:PayServEmpExtension>
                    </xsl:if>
                    <xsl:if test="$bodType = ('compensationEarningsDeductions','payrollInputEarningsDeductions','allowancePlan','benefits','oneTimeCompensation','oneTimePayment','compensationPlan')">
                        <nga:PayServEmpPayElements>
                            <xsl:choose>
                                <xsl:when test="$bodType = ('compensationEarningsDeductions','payrollInputEarningsDeductions')">
                                    <xsl:call-template name="nga:PayElementTemplate">
                                        <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                        <xsl:with-param name="bodType" select="$bodType"/>
                                    </xsl:call-template>
                                </xsl:when>
                                <xsl:when test="$bodType = ('allowancePlan','benefits','oneTimeCompensation','oneTimePayment','compensationPlan')">
                                    <xsl:call-template name="nga:PayElementTemplateNonGrouping">
                                        <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                        <xsl:with-param name="bodType" select="$bodType"/>
                                        <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
                                        <xsl:with-param name="actionCode" select="$actionCode"/>
                                    </xsl:call-template>
                                </xsl:when>
                            </xsl:choose>    
                        </nga:PayServEmpPayElements>
                    </xsl:if>
                    <xsl:if test="$bodType = ('LOATimeOff', 'RFLTimeOffAdd','RFLTimeOffDelete')">
                        <nga:PayServEmpTimeElements>
                            <xsl:call-template name="nga:PayServEmpTimeElements">
                                <xsl:with-param name="tableAbsenceType" select="$tableAbsenceType"/>
                                <xsl:with-param name="tableAbsenceID" select="$tableAbsenceID"/>
                                <xsl:with-param name="bodType" select="$bodType"/>                               
                            </xsl:call-template>
                        </nga:PayServEmpTimeElements>
                    </xsl:if>
                </nga:PayServEmp>
            </nga:DataArea>
        </nga:ProcessPayServEmp>
    </xsl:template>
    
    <!-- Leaves Template -->
    <xsl:template name="peci:TransformPECI2BODLeaves">
        <xsl:param name="bodid"/>
        <xsl:param name="actionCode"/>
        <xsl:param name="creationDateTime"/>        
        <xsl:param name="personID"/>
        <xsl:param name="employeeID"/>
        <xsl:param name="payGroupID"/>       
        <xsl:param name="checkLogicalID"/>
        <xsl:param name="bodType"/>
        <nga:ProcessPayServEmp releaseID="{$releaseID}"
            systemEnvironmentCode="{$systemEnvironmentCode}" languageCode="{$languageCode}">          
            <xsl:call-template name="oa:ApplicationAreaTemplate">
                <xsl:with-param name="bodid" select="$bodid"/>
                <xsl:with-param name="creationDateTime" select="$creationDateTime"/>
                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
            </xsl:call-template>            
            <xsl:variable name="effectiveMomentDate">
                <xsl:call-template name="insertDateWithDash">
                    <xsl:with-param name="date" select="../peci:Effective_Moment"/>
                </xsl:call-template> 
            </xsl:variable>         
          <nga:DataArea>
                <oa:Process>
                    <oa:ActionCriteria>
                        <oa:ActionExpression>
                            <xsl:attribute name="actionCode" select="$actionCode"/>
                        </oa:ActionExpression>
                    </oa:ActionCriteria>
                </oa:Process>
                <nga:PayServEmp>
                    <hr:IndicativeData>
                        <hr:IndicativePersonDossier>                            
                            <hr:IndicativePerson>
                               <!-- <xsl:if test="string-length($effectiveMomentDate) > 0">
                                    <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                </xsl:if>-->
                                <hr:PersonID>
                                    <xsl:value-of select="$personID"/>
                                </hr:PersonID>
                            </hr:IndicativePerson>                            
                            <hr:IndicativeEmployee>                            
                                <hr:EmployeeID>
                                    <xsl:value-of select="$employeeID"/>
                                </hr:EmployeeID>
                            </hr:IndicativeEmployee>
                            <hr:IndicativeEmployment>
                                <hr:EmploymentLifecycle> 
                                    <xsl:choose>
                                        <xsl:when test="$actionCode='ADD'">
                                            <hr:Leave>
                                                <xsl:variable name="payrollEffect">
                                                    <xsl:choose>
                                                        <xsl:when test="peci:Payroll_Effect = '0'">
                                                            <xsl:value-of select="'Paid'"/>
                                                        </xsl:when>
                                                        <xsl:when test="peci:Payroll_Effect = '1'">
                                                            <xsl:value-of select="'Unpaid'"/>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <xsl:value-of select="'Paid'"/>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </xsl:variable>
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Payroll_Effect">
                                                            <xsl:call-template name="print-field-xpath"/> 
                                                        </xsl:for-each>                       
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                                <hr:LeaveReasonCode>
                                                    <xsl:value-of select="concat($payrollEffect,'_',peci:Leave_of_Absence_Type)"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Leave_of_Absence_Type">
                                                                <xsl:call-template name="print-field-xpath"/> 
                                                            </xsl:for-each>                       
                                                        </xsl:with-param>
                                                    </xsl:call-template>
                                                </hr:LeaveReasonCode>
                                                <xsl:if test="string-length(peci:Leave_Start_Date) > 0">
                                                    <hr:LeaveStartDate>
                                                        <xsl:value-of select="substring(peci:Leave_Start_Date,1,10)"/>
                                                        <xsl:call-template name="usedPECIData">
                                                            <xsl:with-param name="xpath">
                                                                <xsl:for-each select="peci:Leave_Start_Date">
                                                                    <xsl:call-template name="print-field-xpath"/> 
                                                                </xsl:for-each>                       
                                                            </xsl:with-param>
                                                        </xsl:call-template>
                                                    </hr:LeaveStartDate>
                                                </xsl:if>
                                                <xsl:if test="string-length(peci:Leave_Last_Day_of_Work) > 0">
                                                    <hr:LastWorkedDate>
                                                        <xsl:value-of select="substring(peci:Leave_Last_Day_of_Work,1,10)"/>
                                                        <xsl:call-template name="usedPECIData">
                                                            <xsl:with-param name="xpath">
                                                                <xsl:for-each select="peci:Leave_Last_Day_of_Work">
                                                                    <xsl:call-template name="print-field-xpath"/> 
                                                                </xsl:for-each>                       
                                                            </xsl:with-param>
                                                        </xsl:call-template>
                                                    </hr:LastWorkedDate>
                                                </xsl:if>
                                                <xsl:if test="string-length(peci:Estimated_Leave_End_Date) > 0">
                                                    <hr:ScheduledWorkReturnDate>
                                                        <xsl:value-of select="xs:date(substring(peci:Estimated_Leave_End_Date,1,10)) + xs:dayTimeDuration('P1D')"/>
                                                        <xsl:call-template name="usedPECIData">
                                                            <xsl:with-param name="xpath">
                                                                <xsl:for-each select="peci:Estimated_Leave_End_Date">
                                                                    <xsl:call-template name="print-field-xpath"/> 
                                                                </xsl:for-each>                       
                                                            </xsl:with-param>
                                                        </xsl:call-template>
                                                    </hr:ScheduledWorkReturnDate>                                                
                                                </xsl:if>
                                                <xsl:if test="string-length(peci:Leave_End_Date) > 0">
                                                    <hr:WorkReturnDate>
                                                        <xsl:value-of select="xs:date(substring(peci:Leave_End_Date,1,10)) + xs:dayTimeDuration('P1D')"/>
                                                        <xsl:call-template name="usedPECIData">
                                                            <xsl:with-param name="xpath">
                                                                <xsl:for-each select="peci:Leave_End_Date">
                                                                    <xsl:call-template name="print-field-xpath"/> 
                                                                </xsl:for-each>                       
                                                            </xsl:with-param>
                                                        </xsl:call-template>
                                                    </hr:WorkReturnDate>  
                                                </xsl:if>   
                                            </hr:Leave>                                            
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <hr:Leave>
                                                <xsl:variable name="payrollEffect">
                                                    <xsl:choose>
                                                        <xsl:when test="peci:Payroll_Effect = '0'">
                                                            <xsl:value-of select="'Paid'"/>
                                                        </xsl:when>
                                                        <xsl:when test="peci:Payroll_Effect = '1'">
                                                            <xsl:value-of select="'Unpaid'"/>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <xsl:value-of select="'Paid'"/>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </xsl:variable>
                                                <xsl:choose>
                                                    <xsl:when test="$bodType = 'LOA-C'">
                                                        <xsl:variable name="nodePath">
                                                            <xsl:value-of select="concat(nga:XPath,'/',name(peci:Payroll_Effect))"/>
                                                        </xsl:variable>
                                                        <xsl:call-template name="usedPECIData">
                                                            <xsl:with-param name="xpath" select="$nodePath">                                                               
                                                            </xsl:with-param>
                                                        </xsl:call-template>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <xsl:call-template name="usedPECIData">
                                                            <xsl:with-param name="xpath">
                                                                <xsl:for-each select="peci:Payroll_Effect">
                                                                    <xsl:call-template name="print-field-xpath"/> 
                                                                </xsl:for-each>                       
                                                            </xsl:with-param>
                                                        </xsl:call-template>
                                                    </xsl:otherwise>
                                                </xsl:choose>       
                                                <hr:LeaveReasonCode>
                                                    <xsl:value-of select="concat($payrollEffect,'_',peci:Leave_of_Absence_Type)"/>
                                                    <xsl:choose>
                                                        <xsl:when test="$bodType = 'LOA-C'">
                                                            <xsl:variable name="nodePath">
                                                                <xsl:value-of select="concat(nga:XPath,'/',name(peci:Leave_of_Absence_Type))"/>
                                                            </xsl:variable>
                                                            <xsl:call-template name="usedPECIData">
                                                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                                                </xsl:with-param>
                                                            </xsl:call-template>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <xsl:call-template name="usedPECIData">
                                                                <xsl:with-param name="xpath">
                                                                    <xsl:for-each select="peci:Leave_of_Absence_Type">
                                                                        <xsl:call-template name="print-field-xpath"/> 
                                                                    </xsl:for-each>                       
                                                                </xsl:with-param>
                                                            </xsl:call-template>
                                                        </xsl:otherwise>
                                                    </xsl:choose>       
                                                </hr:LeaveReasonCode>
                                                <xsl:if test="string-length(peci:Leave_Start_Date) > 0">
                                                    <hr:LeaveStartDate>
                                                        <xsl:value-of select="substring(peci:Leave_Start_Date[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0],1,10)"/>
                                                    </hr:LeaveStartDate>
                                                    <xsl:choose>
                                                        <xsl:when test="$bodType = 'LOA-C'">
                                                            <xsl:variable name="nodePath">
                                                                <xsl:value-of select="concat(nga:XPath,'/',name(peci:Leave_Start_Date))"/>
                                                            </xsl:variable>
                                                            <xsl:call-template name="usedPECIData">
                                                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                                                </xsl:with-param>
                                                            </xsl:call-template>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <xsl:call-template name="usedPECIData">
                                                                <xsl:with-param name="xpath">
                                                                    <xsl:for-each select="peci:Leave_Start_Date">
                                                                        <xsl:call-template name="print-field-xpath"/> 
                                                                    </xsl:for-each>                       
                                                                </xsl:with-param>
                                                            </xsl:call-template>
                                                        </xsl:otherwise>
                                                    </xsl:choose>       
                                                </xsl:if>
                                                <xsl:if test="string-length(peci:Leave_Last_Day_of_Work) > 0">
                                                    <hr:LastWorkedDate>
                                                        <xsl:value-of select="substring(peci:Leave_Last_Day_of_Work[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0],1,10)"/>
                                                    </hr:LastWorkedDate>
                                                    <xsl:choose>
                                                        <xsl:when test="$bodType = 'LOA-C'">
                                                            <xsl:variable name="nodePath">
                                                                <xsl:value-of select="concat(nga:XPath,'/',name(peci:Leave_Last_Day_of_Work))"/>
                                                            </xsl:variable>
                                                            <xsl:call-template name="usedPECIData">
                                                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                                                </xsl:with-param>
                                                            </xsl:call-template>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <xsl:call-template name="usedPECIData">
                                                                <xsl:with-param name="xpath">
                                                                    <xsl:for-each select="peci:Leave_Last_Day_of_Work">
                                                                        <xsl:call-template name="print-field-xpath"/> 
                                                                    </xsl:for-each>                       
                                                                </xsl:with-param>
                                                            </xsl:call-template>
                                                        </xsl:otherwise>
                                                    </xsl:choose>       
                                                </xsl:if>
                                                <xsl:if test="string-length(peci:Estimated_Leave_End_Date) > 0">
                                                    <hr:ScheduledWorkReturnDate>
                                                        <xsl:choose>
                                                            <xsl:when test="peci:Estimated_Leave_End_Date[@*[local-name() = 'isDeleted']]">
                                                                <xsl:value-of select="peci:Estimated_Leave_End_Date[@*[local-name() != 'isDeleted']]"/>
                                                            </xsl:when>
                                                            <xsl:otherwise>
                                                                <xsl:value-of select="xs:date(substring(peci:Estimated_Leave_End_Date[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0],1,10)) + xs:dayTimeDuration('P1D')"/>
                                                            </xsl:otherwise>
                                                        </xsl:choose>  
                                                    </hr:ScheduledWorkReturnDate>       
                                                    <xsl:choose>
                                                        <xsl:when test="$bodType = 'LOA-C'">
                                                            <xsl:variable name="nodePath">
                                                                <xsl:value-of select="concat(nga:XPath,'/',name(peci:Estimated_Leave_End_Date))"/>
                                                            </xsl:variable>
                                                            <xsl:call-template name="usedPECIData">
                                                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                                                </xsl:with-param>
                                                            </xsl:call-template>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <xsl:call-template name="usedPECIData">
                                                                <xsl:with-param name="xpath">
                                                                    <xsl:for-each select="peci:Estimated_Leave_End_Date">
                                                                        <xsl:call-template name="print-field-xpath"/> 
                                                                    </xsl:for-each>                       
                                                                </xsl:with-param>
                                                            </xsl:call-template>
                                                        </xsl:otherwise>
                                                    </xsl:choose>      
                                                </xsl:if>
                                                <xsl:if test="string-length(peci:Leave_End_Date) > 0">
                                                    <hr:WorkReturnDate>
                                                        <xsl:choose>
                                                            <xsl:when test="peci:Leave_End_Date[@*[local-name() = 'isDeleted']]">
                                                                <xsl:value-of select="peci:Leave_End_Date[@*[local-name() != 'isDeleted']]"/>
                                                            </xsl:when>
                                                            <xsl:otherwise>
                                                                <xsl:value-of select="xs:date(substring(peci:Leave_End_Date[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0],1,10)) + xs:dayTimeDuration('P1D')"/>
                                                            </xsl:otherwise>
                                                        </xsl:choose>     
                                                        <xsl:choose>
                                                            <xsl:when test="$bodType = 'LOA-C'">
                                                                <xsl:variable name="nodePath">
                                                                    <xsl:value-of select="concat(nga:XPath,'/',name(peci:Leave_End_Date))"/>
                                                                </xsl:variable>
                                                                <xsl:call-template name="usedPECIData">
                                                                    <xsl:with-param name="xpath" select="$nodePath">                                                               
                                                                    </xsl:with-param>
                                                                </xsl:call-template>
                                                            </xsl:when>
                                                            <xsl:otherwise>
                                                                <xsl:call-template name="usedPECIData">
                                                                    <xsl:with-param name="xpath">
                                                                        <xsl:for-each select="peci:Leave_End_Date">
                                                                            <xsl:call-template name="print-field-xpath"/> 
                                                                        </xsl:for-each>                       
                                                                    </xsl:with-param>
                                                                </xsl:call-template>
                                                            </xsl:otherwise>
                                                        </xsl:choose>                                                        
                                                    </hr:WorkReturnDate>  
                                                </xsl:if>   
                                                <xsl:if test="../peci:Derived_Event_Code = 'RFL-R'">
                                                    <hr:WorkReturnDate>
                                                        <xsl:value-of select="'9999-12-31'"/>
                                                    </hr:WorkReturnDate>                                                    
                                                </xsl:if>
                                            </hr:Leave>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </hr:EmploymentLifecycle>
                            </hr:IndicativeEmployment>
                        </hr:IndicativePersonDossier>
                    </hr:IndicativeData>
                </nga:PayServEmp>
            </nga:DataArea>
        </nga:ProcessPayServEmp>
    </xsl:template>
    
    <!-- Leave Data Change Template -->
    <xsl:template name="nga:PayServEmpLeaveDataChange">        
        <hr:IndicativeEmployment>
            <hr:EmploymentLifecycle>
                <hr:Leave>
                    <xsl:if test="string-length(peci:Leave_Last_Day_of_Work[@*[local-name()]]) > 0">
                        <hr:LastWorkedDate>
                            <xsl:choose>
                                <xsl:when test="peci:Leave_Last_Day_of_Work[@*[local-name() = 'isDeleted']]">
                                    <xsl:value-of select="''"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="substring(peci:Leave_Last_Day_of_Work[@*[local-name() != 'isDeleted']],1,10)"></xsl:value-of>
                                </xsl:otherwise>
                            </xsl:choose>           
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Leave_Last_Day_of_Work">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </hr:LastWorkedDate>
                    </xsl:if>
                    <xsl:if test="string-length(peci:Estimated_Leave_End_Date[@*[local-name()]]) > 0">
                        <hr:ScheduledWorkReturnDate>
                            <xsl:choose>
                                <xsl:when test="peci:Estimated_Leave_End_Date[@*[local-name() = 'isDeleted']]">
                                    <xsl:value-of select="peci:Estimated_Leave_End_Date[@*[local-name() != 'isDeleted']]"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="xs:date(substring(peci:Estimated_Leave_End_Date[@*[local-name() != 'isDeleted']],1,10)) + xs:dayTimeDuration('P1D')"/>
                                </xsl:otherwise>
                            </xsl:choose>  
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Estimated_Leave_End_Date">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </hr:ScheduledWorkReturnDate>      
                    </xsl:if>                    
                </hr:Leave>
            </hr:EmploymentLifecycle>
        </hr:IndicativeEmployment>
    </xsl:template>

    <!-- Termination Template -->
    <xsl:template name="peci:TransfromPECI2BODTermination">
        <xsl:param name="actionCode"/>
        <xsl:param name="bodid"/>
        <xsl:param name="creationDateTime"/>        
        <xsl:param name="personID"/>
        <xsl:param name="employeeID"/>
        <xsl:param name="payGroupID"/>
        <xsl:param name="checkLogicalID"/>
        <nga:ProcessPayServEmp releaseID="{$releaseID}"
            systemEnvironmentCode="{$systemEnvironmentCode}" languageCode="{$languageCode}">          
            <xsl:call-template name="oa:ApplicationAreaTemplate">
                <xsl:with-param name="bodid" select="$bodid"/>
                <xsl:with-param name="creationDateTime" select="$creationDateTime"/>
                <xsl:with-param name="checkLogicalID" select="$checkLogicalID"/>
            </xsl:call-template>            
            <xsl:variable name="effectiveMomentDate">
                <xsl:call-template name="insertDateWithDash">
                    <xsl:with-param name="date" select="peci:Effective_Moment"/>
                </xsl:call-template> 
            </xsl:variable>
            <xsl:call-template name="usedPECIData">
                <xsl:with-param name="xpath">
                    <xsl:for-each select="peci:Effective_Moment">
                        <xsl:call-template name="print-field-xpath"/> 
                    </xsl:for-each>                       
                </xsl:with-param>
            </xsl:call-template>
            <xsl:variable name="validFromDate" select="xs:date($effectiveMomentDate) - xs:dayTimeDuration('P1D')"/>
            <nga:DataArea>
                <oa:Process>
                    <oa:ActionCriteria>
                        <oa:ActionExpression>
                            <xsl:attribute name="actionCode">
                                <xsl:value-of select="$actionCode"/>
                            </xsl:attribute>
                        </oa:ActionExpression>
                    </oa:ActionCriteria>
                </oa:Process>
                <nga:PayServEmp>
                    <hr:IndicativeData>
                        <hr:IndicativePersonDossier>
                            <hr:IndicativePerson>                               
                                <xsl:if test="string-length(xs:string($validFromDate)) > 0" >
                                    <xsl:attribute name="validFrom" select="$validFromDate"/>
                                </xsl:if>                                            
                                <hr:PersonID>
                                    <xsl:value-of select="$personID"/>
                                </hr:PersonID>
                            </hr:IndicativePerson>
                            <hr:IndicativeEmployee>
                                <xsl:if test="string-length(xs:string($validFromDate)) > 0" >
                                    <xsl:attribute name="validFrom" select="$validFromDate"/>
                                </xsl:if>        
                                <hr:EmployeeID> 
                                    <xsl:value-of select="$employeeID"/>
                                </hr:EmployeeID>
                            </hr:IndicativeEmployee>
                            <hr:IndicativeEmployment>
                                <hr:EmploymentLifecycle>
                                    <xsl:if test="string-length(xs:string($validFromDate)) > 0" >
                                        <xsl:attribute name="validFrom" select="$validFromDate"/>
                                    </xsl:if>                                            
                                    <hr:Termination>
                                        <hr:TerminationReasonCode>
                                            <xsl:choose>
                                                <xsl:when test="starts-with(peci:Derived_Event_Code,'TERM')">
                                                    <xsl:value-of select="peci:Worker_Status/peci:Primary_Termination_Reason"/>
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Worker_Status/peci:Primary_Termination_Reason">
                                                                <xsl:call-template name="print-field-xpath"/> 
                                                            </xsl:for-each>                       
                                                        </xsl:with-param>
                                                    </xsl:call-template>
                                                </xsl:when>                                              
                                                <xsl:when test="peci:Derived_Event_Code = 'PCO' and $compTransRescindFlag != 'Y' and $compTransLaterDateFlag !='Y' and $compTransEarlierDateFlag !='Y'">
                                                    <xsl:value-of select="'CompanyTransfer'"/>
                                                </xsl:when>
                                                <xsl:when test="peci:Derived_Event_Code = 'ORG' and $compTransRescindFlag != 'Y' and $compTransLaterDateFlag !='Y' and $compTransEarlierDateFlag !='Y'">
                                                    <xsl:value-of select="'CompanyTransfer'"/>
                                                </xsl:when>
                                                <xsl:when test="peci:Derived_Event_Code = ('DTA','PGI') and string-length(peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue) > 0 and (peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue != peci:Additional_Information/ptdf:OrganizationID)">
                                                    <xsl:value-of select="'CompanyTransfer'"/>
                                                </xsl:when>    
                                                <xsl:when test="$compTransRescindFlag = 'Y'">
                                                    <xsl:value-of select="'CompanyTransferRescind'"/>
                                                </xsl:when>
                                                <xsl:when test="($compTransLaterDateFlag ='Y' or $compTransEarlierDateFlag ='Y') and $actionCode != 'ADD'">
                                                    <xsl:value-of select="'CompanyTransferChange'"/>
                                                </xsl:when>
                                                <xsl:when test="($compTransLaterDateFlag = 'Y' or $compTransEarlierDateFlag ='Y') and $actionCode = 'ADD'">
                                                    <xsl:value-of select="'CompanyTransfer'"/>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:value-of select="peci:Worker_Status/peci:Primary_Termination_Reason"/>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </hr:TerminationReasonCode> 
                                        <hr:TerminationDate>
                                            <xsl:choose>
                                                <xsl:when test="starts-with(peci:Derived_Event_Code,'TERM')">
                                                    <xsl:value-of select="substring(peci:Worker_Status/peci:Termination_Date,1,10)"/>    
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Worker_Status/peci:Termination_Date">
                                                                <xsl:call-template name="print-field-xpath"/> 
                                                            </xsl:for-each>                       
                                                        </xsl:with-param>
                                                    </xsl:call-template>
                                                </xsl:when>
                                                <xsl:when test="peci:Derived_Event_Code = 'PCO'">
                                                    <xsl:value-of select="xs:date($effectiveMomentDate) -xs:dayTimeDuration('P1D')"/>
                                                </xsl:when>
                                                <xsl:when test="peci:Derived_Event_Code = 'ORG'">
                                                    <xsl:value-of select="xs:date($effectiveMomentDate) -xs:dayTimeDuration('P1D')"/>
                                                </xsl:when>                                               
                                                <xsl:when test="peci:Derived_Event_Code = ('DTA','PGI') and string-length(peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue) > 0 and (peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue != peci:Additional_Information/ptdf:OrganizationID)">
                                                    <xsl:value-of select="xs:date($effectiveMomentDate) -xs:dayTimeDuration('P1D')"/>
                                                </xsl:when>
                                                <xsl:when test="$compTransRescindFlag = 'Y'">
                                                    <xsl:value-of select="xs:date($effectiveMomentDate) -xs:dayTimeDuration('P1D')"/>
                                                </xsl:when>
                                                <xsl:when test="$compTransLaterDateFlag ='Y' or $compTransEarlierDateFlag ='Y'">
                                                    <xsl:value-of select="$pcoWMTableDate"/>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:value-of select="substring(peci:Worker_Status/peci:Termination_Date,1,10)"/>  
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </hr:TerminationDate>
                                        <xsl:choose>
                                            <xsl:when test="string-length(peci:Worker_Status/peci:Pay_Through_Date) > 0">
                                                <hr:LastPaidDate>
                                                    <xsl:value-of select="substring(peci:Worker_Status/peci:Pay_Through_Date,1,10)"/>  
                                                    <xsl:call-template name="usedPECIData">
                                                        <xsl:with-param name="xpath">
                                                            <xsl:for-each select="peci:Worker_Status/peci:Pay_Through_Date">
                                                                <xsl:call-template name="print-field-xpath"/> 
                                                            </xsl:for-each>                       
                                                        </xsl:with-param>
                                                    </xsl:call-template>
                                                </hr:LastPaidDate>
                                            </xsl:when>
                                            <xsl:when test="peci:Derived_Event_Code = 'ORG'">
                                                <hr:LastPaidDate>
                                                    <xsl:value-of select="xs:date($effectiveMomentDate) -xs:dayTimeDuration('P1D')"/>
                                                </hr:LastPaidDate>
                                            </xsl:when>
                                            <xsl:when test="peci:Derived_Event_Code = ('DTA','PGI') and string-length(peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue) > 0 and (peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue != peci:Additional_Information/ptdf:OrganizationID)">
                                                <hr:LastPaidDate>
                                                    <xsl:value-of select="xs:date($effectiveMomentDate) -xs:dayTimeDuration('P1D')"/>
                                                </hr:LastPaidDate>
                                            </xsl:when>
                                        </xsl:choose>
                                    </hr:Termination>
                                </hr:EmploymentLifecycle>
                            </hr:IndicativeEmployment>
                        </hr:IndicativePersonDossier>
                    </hr:IndicativeData>                    
                    <nga:PayServEmpExtension> 
                        <xsl:if test="string-length(peci:Worker_Status/peci:Termination_Last_Day_of_Work) > 0">
                            <nga:DateSpecifications>
                                <nga:Date>
                                    <xsl:attribute name="DateType">
                                        <xsl:value-of select="'Termination_Last_Day_of_Work'"/>
                                    </xsl:attribute>
                                    <xsl:value-of select="substring(peci:Worker_Status/peci:Termination_Last_Day_of_Work,1,10)"/>   
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Worker_Status/peci:Termination_Last_Day_of_Work">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:Date>
                            </nga:DateSpecifications>
                        </xsl:if>
                        <nga:AlternateDescriptions>
                            <xsl:if test="string-length(xs:string($validFromDate)) > 0" >
                                <xsl:attribute name="validFrom" select="$validFromDate"/>
                            </xsl:if>      
                            <nga:Description>
                                <xsl:attribute name="Type" select="'TerminationReason'"/>
                                <xsl:choose>
                                    <xsl:when test="starts-with(peci:Derived_Event_Code,'TERM')">
                                        <xsl:value-of select="peci:Worker_Status/peci:Primary_Termination_Reason"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Worker_Status/peci:Primary_Termination_Reason">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </xsl:when>                                              
                                    <xsl:when test="peci:Derived_Event_Code = 'PCO'">
                                        <xsl:value-of select="'CompanyTransfer'"/>
                                    </xsl:when>
                                    <xsl:when test="peci:Derived_Event_Code = 'ORG'">
                                        <xsl:value-of select="'CompanyTransfer'"/>
                                    </xsl:when>
                                    <xsl:when test="peci:Derived_Event_Code = ('DTA','PGI') and string-length(peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue) > 0 and (peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue != peci:Additional_Information/ptdf:OrganizationID)">
                                        <xsl:value-of select="'CompanyTransfer'"/>
                                    </xsl:when>       
                                    <xsl:when test="($compTransLaterDateFlag ='Y' or $compTransEarlierDateFlag ='Y') and $actionCode ='ADD'">
                                        <xsl:value-of select="'CompanyTransfer'"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:value-of select="peci:Worker_Status/peci:Primary_Termination_Reason"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </nga:Description>
                            <xsl:if test="peci:Worker_Status/peci:Secondary_Termination_Reason/peci:Termination_Reason">
                                <nga:Description>                                        
                                    <xsl:attribute name="Type" select="'SecondaryTerminationReason'"/>
                                    <xsl:value-of select="peci:Worker_Status/peci:Secondary_Termination_Reason/peci:Termination_Reason"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Worker_Status/peci:Secondary_Termination_Reason/peci:Termination_Reason">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:Description>
                            </xsl:if>
                            <xsl:if test="peci:Worker_Status/peci:Local_Termination_Reason">
                                <nga:Description>                                        
                                    <xsl:attribute name="Type" select="'LocalTerminationReason'"/>
                                    <xsl:value-of select="peci:Worker_Status/peci:Local_Termination_Reason"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Worker_Status/peci:Local_Termination_Reason">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:Description>
                            </xsl:if>
                        </nga:AlternateDescriptions>
                    </nga:PayServEmpExtension>                    
                </nga:PayServEmp>
            </nga:DataArea>
        </nga:ProcessPayServEmp>
    </xsl:template>
    
     <xsl:template name="PECIGenericAddress">
        <xsl:param name="effectiveMomentDate"/>
        <xsl:param name="type"/>
        <hr:Communication>
            <hr:Address>
                <xsl:attribute name="type" select="$type"/>
                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                <xsl:variable name="addressDelete">
                    <xsl:value-of select="../../peci:Address[@*[local-name() != 'isDeleted']]"/>
                </xsl:variable>              
                <xsl:if test="string-length(../peci:Address_Line_1) > 0">
                    <oa:LineOne>
                        <xsl:value-of select="normalize-space(../../peci:Address[@*[local-name() != 'isDeleted']]/peci:Address_Line_1[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0])"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="../../peci:Address[@*[local-name() != 'isDeleted']]/peci:Address_Line_1[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                    <xsl:call-template name="print-field-xpath"/>            
                                </xsl:for-each>   
                            </xsl:with-param>
                        </xsl:call-template>
                    </oa:LineOne>
                </xsl:if>
                <xsl:if test="string-length(../peci:Address_Line_2) > 0">
                    <oa:LineTwo>
                        <xsl:value-of select="normalize-space(../../peci:Address[@*[local-name() != 'isDeleted']]/peci:Address_Line_2[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0])"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="../../peci:Address[@*[local-name() != 'isDeleted']]/peci:Address_Line_2[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                    <xsl:call-template name="print-field-xpath"/>            
                                </xsl:for-each>   
                            </xsl:with-param>
                        </xsl:call-template>
                    </oa:LineTwo>
                </xsl:if>
                <xsl:if test="string-length(../peci:Address_Line_3) > 0">
                    <oa:LineThree>
                        <xsl:value-of select="normalize-space(../../peci:Address[@*[local-name() != 'isDeleted']]/peci:Address_Line_3[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0])"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="../../peci:Address[@*[local-name() != 'isDeleted']]/peci:Address_Line_3[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                    <xsl:call-template name="print-field-xpath"/>            
                                </xsl:for-each>   
                            </xsl:with-param>
                        </xsl:call-template>
                    </oa:LineThree>
                </xsl:if>
                <xsl:if test="string-length(../peci:Address_Line_4) > 0">
                    <oa:LineFour>
                        <xsl:value-of select="normalize-space(../../peci:Address[@*[local-name() != 'isDeleted']]/peci:Address_Line_4[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0])"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="../../peci:Address[@*[local-name() != 'isDeleted']]/peci:Address_Line_4[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                    <xsl:call-template name="print-field-xpath"/>            
                                </xsl:for-each>   
                            </xsl:with-param>
                        </xsl:call-template>
                    </oa:LineFour>
                </xsl:if>
                <xsl:if test="string-length(../peci:Address_Line_5) > 0">
                    <oa:LineFive>
                        <xsl:value-of select="normalize-space(../../peci:Address[@*[local-name() != 'isDeleted']]/peci:Address_Line_5[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0])"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="../../peci:Address[@*[local-name() != 'isDeleted']]/peci:Address_Line_5[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                    <xsl:call-template name="print-field-xpath"/>            
                                </xsl:for-each>   
                            </xsl:with-param>
                        </xsl:call-template>
                    </oa:LineFive>
                </xsl:if>
                <xsl:if test="string-length(../peci:City_Subdivision) > 0">
                    <oa:CitySubDivisionName>
                        <xsl:value-of select="../../peci:Address[@*[local-name() != 'isDeleted']]/peci:City_Subdivision[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="../../peci:Address[@*[local-name() != 'isDeleted']]/peci:City_Subdivision[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                    <xsl:call-template name="print-field-xpath"/>            
                                </xsl:for-each>   
                            </xsl:with-param>
                        </xsl:call-template>
                    </oa:CitySubDivisionName>
                </xsl:if>
                <xsl:if test="string-length(../peci:City) > 0">
                    <oa:CityName>
                        <xsl:value-of select="../../peci:Address[@*[local-name() != 'isDeleted']]/peci:City[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="../../peci:Address[@*[local-name() != 'isDeleted']]/peci:City[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                    <xsl:call-template name="print-field-xpath"/>            
                                </xsl:for-each>   
                            </xsl:with-param>
                        </xsl:call-template>
                    </oa:CityName>
                </xsl:if>
                <xsl:if test="string-length(../peci:Country_Region) > 0">
                    <oa:CountrySubDivisionCode>
                        <xsl:value-of select="substring-after(../../peci:Address[@*[local-name() != 'isDeleted']]/peci:Country_Region[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0], '-')"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="../../peci:Address[@*[local-name() != 'isDeleted']]/peci:Country_Region[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                    <xsl:call-template name="print-field-xpath"/>            
                                </xsl:for-each>   
                            </xsl:with-param>
                        </xsl:call-template>                                
                    </oa:CountrySubDivisionCode>
                </xsl:if>           
                <xsl:if test="string-length(../peci:Country) > 0">
                    <hr:CountryCode>
                        <xsl:choose>
                            <xsl:when test="../peci:Country = 'GB'">
                                <xsl:value-of select="'UK'"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="../../peci:Address[@*[local-name() != 'isDeleted']]/peci:Country[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="../../peci:Address[@*[local-name() != 'isDeleted']]/peci:Country[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                            <xsl:call-template name="print-field-xpath"/>            
                                        </xsl:for-each>   
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:otherwise>
                        </xsl:choose>
                    </hr:CountryCode>
                </xsl:if>
                <xsl:if test="string-length(../peci:Postal_Code) > 0">
                    <oa:PostalCode>
                        <xsl:value-of select="../../peci:Address[@*[local-name() != 'isDeleted']]/peci:Postal_Code"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="../../peci:Address[@*[local-name() != 'isDeleted']]/peci:Postal_Code">
                                    <xsl:call-template name="print-field-xpath"/>            
                                </xsl:for-each>   
                            </xsl:with-param>
                        </xsl:call-template>
                    </oa:PostalCode>
                </xsl:if>                   
            </hr:Address>
        </hr:Communication>   
    </xsl:template>
    
    <xsl:template name="PECICountrySpecificAddress">
        <xsl:param name="countryAddressMapping"/>
        <xsl:param name="country"/>        
        <xsl:param name="validFrom"/>       
        <xsl:param name="addressPosiiton"/>
        <xsl:param name="type"/>
        <xsl:variable name="careOfNameList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECIHomeAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:CareOfName']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="lineOneList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECIHomeAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:LineOne']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="lineTwoList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECIHomeAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:LineTwo']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="lineThreeList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECIHomeAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:LineThree']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="lineFourList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECIHomeAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:LineFour']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="citySubDivNameList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECIHomeAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:CitySubDivisionName']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="cityNameList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECIHomeAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:CityName']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="countrySubDivCodeList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECIHomeAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:CountrySubDivisionCode']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="postalCodeList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECIHomeAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:PostalCode']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="bldgNumberList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECIHomeAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:BuildingNumber']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="bldgNameList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECIHomeAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:BuildingName']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="streetNameList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECIHomeAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:StreetName']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="unitList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECIHomeAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:Unit']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="delvryPointList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECIHomeAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:DeliveryPointCode']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="floorList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECIHomeAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:Floor']/normalize-space(VALUE),'\|')"/>        
        <xsl:variable name="rootElementPointer" select="$addressPosiiton"/>
      
        <!-- Mapping for oa:CareOfName -->            
        <xsl:variable name="tempCareOfName">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$careOfNameList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:LineOne -->            
        <xsl:variable name="tempLineOne">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$lineOneList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:LineTwo -->
        <xsl:variable name="tempLineTwo">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$lineTwoList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:LineThree -->
        <xsl:variable name="tempLineThree">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$lineThreeList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:LineFour -->
        <xsl:variable name="tempLineFour">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$lineFourList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:CitySubDivisionName -->
        <xsl:variable name="tempCitySubDivNameList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$citySubDivNameList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:CityName -->
        <xsl:variable name="tempCityNameList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$cityNameList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>                   
        
        <!-- Mapping for oa:CountrySubDivisionCode -->
        <xsl:variable name="tempCountrySubDivCodeList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$countrySubDivCodeList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:PostalCode -->
        <xsl:variable name="tempPostalCodeList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$postalCodeList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:BuildingNumber -->
        <xsl:variable name="tempBldgNumberList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$bldgNumberList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:BuildingName -->
        <xsl:variable name="tempBldgNameList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$bldgNameList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:StreetName -->
        <xsl:variable name="tempStreetNameList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$streetNameList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:Unit -->
        <xsl:variable name="tempUnitList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$unitList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:DeliveryPoint -->
        <xsl:variable name="tempDelvryPointList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$delvryPointList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:Floor -->
        <xsl:variable name="tempFloorList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$floorList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!--  Extended Address Mapping   -->
        <hr:Communication>
            <hr:Address>
                <xsl:attribute name="type" select="$type"/>
                <xsl:attribute name="validFrom" select="$validFrom"/>
               
                <xsl:if test="string-length($tempCareOfName) > 0">
                    <oa:CareOfName>
                        <xsl:call-template name="templateRemoveEndSpace">
                            <xsl:with-param name="stringValue" select="$tempCareOfName"/>
                        </xsl:call-template>
                    </oa:CareOfName>	
                </xsl:if>   
                <xsl:if test="string-length($tempLineOne) > 0">
                    <oa:LineOne>
                        <xsl:call-template name="templateRemoveEndSpace">
                            <xsl:with-param name="stringValue" select="$tempLineOne"/>
                        </xsl:call-template>
                    </oa:LineOne>
                </xsl:if> 
                <xsl:if test="string-length($tempLineTwo) > 0">
                    <oa:LineTwo>
                        <xsl:call-template name="templateRemoveEndSpace">
                            <xsl:with-param name="stringValue" select="$tempLineTwo"/>
                        </xsl:call-template>
                    </oa:LineTwo>
                </xsl:if>  
                <xsl:if test="string-length($tempLineThree) > 0">
                    <oa:LineThree>
                        <xsl:call-template name="templateRemoveEndSpace">
                            <xsl:with-param name="stringValue" select="$tempLineThree"/>
                        </xsl:call-template>
                    </oa:LineThree>
                </xsl:if>           
                <xsl:if test="string-length($tempLineFour) > 0">
                    <oa:LineFour>
                        <xsl:call-template name="templateRemoveEndSpace">
                            <xsl:with-param name="stringValue" select="$tempLineFour"/>
                        </xsl:call-template>
                    </oa:LineFour>
                </xsl:if>                         
                <xsl:if test="string-length($tempCitySubDivNameList)>0">
                    <oa:CitySubDivisionName>
                        <xsl:call-template name="templateRemoveEndSpace">
                            <xsl:with-param name="stringValue" select="$tempCitySubDivNameList"/>
                        </xsl:call-template>                               
                    </oa:CitySubDivisionName>
                </xsl:if>
                <xsl:if test="string-length($tempCityNameList) > 0">
                    <oa:CityName>
                        <xsl:call-template name="templateRemoveEndSpace">
                            <xsl:with-param name="stringValue" select="$tempCityNameList"/>
                        </xsl:call-template>
                    </oa:CityName>
                </xsl:if>
                <xsl:if test="string-length($tempCountrySubDivCodeList) > 0">
                    <oa:CountrySubDivisionCode>
                        <xsl:call-template name="templateRemoveEndSpace">
                            <xsl:with-param name="stringValue" select="$tempCountrySubDivCodeList"/>
                        </xsl:call-template>                          
                    </oa:CountrySubDivisionCode>
                </xsl:if>
                <hr:CountryCode>
                    <xsl:value-of select="$country"/>
                    <xsl:call-template name="usedPECIData">
                        <xsl:with-param name="xpath">
                            <xsl:for-each select="$country">
                                <xsl:call-template name="print-field-xpath"/> 
                            </xsl:for-each>                       
                        </xsl:with-param>
                    </xsl:call-template>
                </hr:CountryCode>
                <xsl:if test="string-length($tempPostalCodeList) > 0">
                    <oa:PostalCode>
                        <xsl:call-template name="templateRemoveEndSpace">
                            <xsl:with-param name="stringValue" select="$tempPostalCodeList"/>
                        </xsl:call-template>
                    </oa:PostalCode>
                </xsl:if>
            </hr:Address>
        </hr:Communication>
        <xsl:variable name="extendedFlag" select="concat($tempBldgNameList,$tempBldgNumberList,$tempDelvryPointList,$tempFloorList,$tempStreetNameList,$tempUnitList)"/>
        <xsl:if test="string-length($extendedFlag) > 0">
            <hr:Communication>
                <hr:Address>
                    <xsl:attribute name="type" select="$type"/>
                    <xsl:attribute name="validFrom" select="$validFrom"/>
                    
                    <xsl:if test="string-length($tempBldgNumberList) > 0">
                        <oa:BuildingNumber>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempBldgNumberList"/>
                            </xsl:call-template>
                        </oa:BuildingNumber>
                    </xsl:if>
                    <xsl:if test="string-length($tempBldgNameList) > 0">
                        <oa:BuildingName>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempBldgNameList"/>
                            </xsl:call-template>
                        </oa:BuildingName>
                    </xsl:if>
                    <xsl:if test="string-length($tempStreetNameList) > 0">
                        <oa:StreetName>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempStreetNameList"/>
                            </xsl:call-template>
                        </oa:StreetName>
                    </xsl:if>
                    <xsl:if test="string-length($tempUnitList) > 0">
                        <oa:Unit>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempUnitList"/>
                            </xsl:call-template>
                        </oa:Unit>
                    </xsl:if>
                    <xsl:if test="string-length($tempFloorList) > 0">
                        <oa:Floor>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempFloorList"/>
                            </xsl:call-template>
                        </oa:Floor>
                    </xsl:if>
                    <xsl:if test="string-length($tempDelvryPointList) > 0">
                        <oa:DeliveryPointCode>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempDelvryPointList"/>
                            </xsl:call-template>
                        </oa:DeliveryPointCode>
                    </xsl:if>
                    <hr:CountryCode>
                        <xsl:value-of select="$country"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="$country">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </hr:CountryCode>
                </hr:Address>
            </hr:Communication>
        </xsl:if>
      <!--  <xsl:if test="$country = distinct-values($countryAddressMapping/Rows[MAPPING='PECILocalAddress']/COUNTRY)">
            <xsl:call-template name="LocalAddressMapping">
                <xsl:with-param name="validFrom" select="$validFrom"/>
                <xsl:with-param name="country" select="$country"/>    
                <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                <xsl:with-param name="addressPosiiton" select="$addressPosiiton"/>
            </xsl:call-template>
        </xsl:if>-->
    </xsl:template>
    
    <xsl:template name="LocalAddressMapping">
        <xsl:param name="country"/>        
        <xsl:param name="validFrom"/>        
        <xsl:param name="countryAddressMapping"/>
        <xsl:param name="addressPosiiton"/>
        <xsl:variable name="lineOneLocalList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECILocalAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:LineOne']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="lineTwoLocalList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECILocalAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:LineTwo']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="lineThreeLocalList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECILocalAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:LineThree']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="lineFourLocalList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECILocalAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:LineFour']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="citySubDivNameLocalList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECILocalAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:CitySubDivisionName']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="cityNameLocalList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECILocalAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:CityName']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="countrySubDivCodeLocalList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECILocalAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:CountrySubDivisionCode']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="postalCodeLocalList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECILocalAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:PostalCode']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="bldgNumberLocalList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECILocalAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:BuildingNumber']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="bldgNameLocalList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECILocalAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:BuildingName']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name='streetNameLocalList' select="tokenize($countryAddressMapping/Rows[MAPPING='PECILocalAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:StreetName']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name='unitLocalList' select="tokenize($countryAddressMapping/Rows[MAPPING='PECILocalAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:Unit']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="delvryPointLocalList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECILocalAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:DeliveryPointCode']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="floorLocalList" select="tokenize($countryAddressMapping/Rows[MAPPING='PECILocalAddress' and COUNTRY = $country and normalize-space(KEY)= 'oa:Floor']/normalize-space(VALUE),'\|')"/>
        <xsl:variable name="rootElementPointer" select="$addressPosiiton"/>
        
        <!-- Mapping for oa:LineOne -->
        <xsl:variable name="tempLineOneLocalList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$lineOneLocalList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:LineTwo -->
        <xsl:variable name="tempLineTwoLocalList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$lineTwoLocalList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:LineThree -->
        <xsl:variable name="tempLineThreeLocalList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$lineThreeLocalList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:LineFour -->
        <xsl:variable name="tempLineFourLocalList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$lineFourLocalList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:CitySubDivisionName -->
        <xsl:variable name="tempCitySubDivNameLocalList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$citySubDivNameLocalList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:CityName -->
        <xsl:variable name="tempCityNameLocalList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$cityNameLocalList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>                   
        
        <!-- Mapping for oa:CountrySubDivisionCode -->
        <xsl:variable name="tempCountrySubDivCodeLocalList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$countrySubDivCodeLocalList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:PostalCode -->
        <xsl:variable name="tempPostalCodeLocalList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$postalCodeLocalList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:BuildingNumber -->
        <xsl:variable name="tempBldgNumberLocalList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$bldgNumberLocalList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:BuildingName -->
        <xsl:variable name="tempBldgNameLocalList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$bldgNameLocalList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:StreetName -->
        <xsl:variable name="tempStreetNameLocalList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$streetNameLocalList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:Unit -->
        <xsl:variable name="tempUnitLocalList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$unitLocalList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:DeliveryPoint -->
        <xsl:variable name="tempDelvryPointLocalList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$delvryPointLocalList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for oa:Floor -->
        <xsl:variable name="tempFloorLocalList">
            <xsl:call-template name="addressMapping">
                <xsl:with-param name="valueList" select="$floorLocalList"/>
                <xsl:with-param name="rootElementPointer" select="$rootElementPointer"/>
            </xsl:call-template>
        </xsl:variable>
        
        <!-- Mapping for Local Address -->
        <xsl:variable name="localBasicFlag" select="concat($tempLineOneLocalList,$tempLineTwoLocalList,$tempLineThreeLocalList,$tempLineFourLocalList,$tempCitySubDivNameLocalList,$tempCityNameLocalList,$tempCountrySubDivCodeLocalList,$tempPostalCodeLocalList)"/>
        <xsl:if test="string-length($localBasicFlag) > 0">
            <hr:Communication>
                <hr:Address type="local" validFrom="{$validFrom}">
                    <xsl:if test="string-length($tempLineOneLocalList) > 0">                    
                        <oa:LineOne>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempLineOneLocalList"/>
                            </xsl:call-template>
                        </oa:LineOne>
                    </xsl:if>
                    <xsl:if test="string-length($tempLineTwoLocalList) > 0">
                        <oa:LineTwo>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempLineTwoLocalList"/>
                            </xsl:call-template>
                        </oa:LineTwo>
                    </xsl:if>
                    <xsl:if test="string-length($tempLineThreeLocalList) > 0">
                        <oa:LineThree>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempLineThreeLocalList"/>
                            </xsl:call-template>
                        </oa:LineThree>
                    </xsl:if>                   
                    <xsl:if test="string-length($tempLineFourLocalList) > 0">
                        <oa:LineFour>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempLineFourLocalList"/>
                            </xsl:call-template>                       
                        </oa:LineFour>
                    </xsl:if>
                    <xsl:if test="string-length($tempCitySubDivNameLocalList)>0">
                        <oa:CitySubDivisionName>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempCitySubDivNameLocalList"/>
                            </xsl:call-template>
                        </oa:CitySubDivisionName>
                    </xsl:if>
                    <xsl:if test="string-length($tempCityNameLocalList) > 0">
                        <oa:CityName>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempCityNameLocalList"/>
                            </xsl:call-template>
                        </oa:CityName>
                    </xsl:if>
                    <xsl:if test="string-length($tempCountrySubDivCodeLocalList) > 0">
                        <oa:CountrySubDivisionCode>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempCountrySubDivCodeLocalList"/>
                            </xsl:call-template>
                        </oa:CountrySubDivisionCode>
                    </xsl:if>
                    <hr:CountryCode>
                        <xsl:value-of select="$country"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="$country">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </hr:CountryCode>
                    <xsl:if test="string-length($tempPostalCodeLocalList) > 0">
                        <oa:PostalCode>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempPostalCodeLocalList"/>
                            </xsl:call-template>
                        </oa:PostalCode>
                    </xsl:if>
                </hr:Address>
            </hr:Communication>            
        </xsl:if>
        <xsl:variable name="localExtendedFlag" select="concat($tempFloorLocalList,$tempBldgNameLocalList,$tempBldgNumberLocalList,$tempDelvryPointLocalList,$tempStreetNameLocalList,$tempUnitLocalList)"/>
        <xsl:if test="string-length($localExtendedFlag) > 0">
            <hr:Communication>
                <hr:Address type="local" validFrom="{$validFrom}">
                    <xsl:if test="string-length($tempBldgNumberLocalList) > 0">
                        <oa:BuildingNumber>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempBldgNumberLocalList"/>
                            </xsl:call-template>
                        </oa:BuildingNumber>
                    </xsl:if>
                    <xsl:if test="string-length($tempBldgNameLocalList) > 0">
                        <oa:BuildingName>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempBldgNameLocalList"/>
                            </xsl:call-template>
                        </oa:BuildingName>
                    </xsl:if>
                    <xsl:if test="string-length($tempStreetNameLocalList) > 0">
                        <oa:StreetName>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempStreetNameLocalList"/>
                            </xsl:call-template>
                        </oa:StreetName>
                    </xsl:if>
                    <xsl:if test="string-length($tempUnitLocalList) > 0">
                        <oa:Unit>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempUnitLocalList"/>
                            </xsl:call-template>
                        </oa:Unit>
                    </xsl:if>
                    <xsl:if test="string-length($tempFloorLocalList) > 0">
                        <oa:Floor>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempFloorLocalList"/>
                            </xsl:call-template>
                        </oa:Floor>
                    </xsl:if>
                    <xsl:if test="string-length($tempDelvryPointLocalList) > 0">
                        <oa:DeliveryPointCode>
                            <xsl:call-template name="templateRemoveEndSpace">
                                <xsl:with-param name="stringValue" select="$tempDelvryPointLocalList"/>
                            </xsl:call-template>
                        </oa:DeliveryPointCode>
                    </xsl:if>
                    <hr:CountryCode>
                        <xsl:value-of select="$country"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="$country">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </hr:CountryCode>
                </hr:Address>
            </hr:Communication>            
        </xsl:if>
    </xsl:template>
    
    
    <!--      Address Mapping Template        -->
    <xsl:template name="addressMapping">
        <xsl:param name="valueList"/>
        <xsl:param name="rootElementPointer"/>     
        <xsl:for-each select="$valueList">
            <xsl:variable name="value" select="."/>
            <xsl:choose>
                <xsl:when test="$value = 'peci:Country_Region'">
                    <xsl:value-of select="concat(substring-after($rootElementPointer/peci:Country_Region[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0], '-'), ' ')"/>  
                    <xsl:call-template name="usedPECIData">
                        <xsl:with-param name="xpath">
                            <xsl:for-each select="$rootElementPointer/peci:Country_Region">
                                <xsl:call-template name="print-field-xpath"/> 
                            </xsl:for-each>                       
                        </xsl:with-param>
                    </xsl:call-template>
                </xsl:when>
                <xsl:when test="string-length(normalize-space($rootElementPointer/*[name(.) = $value][@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0])) > 0">
                    <xsl:value-of select="concat(normalize-space($rootElementPointer/*[name(.) = $value][@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]),' ')"/>
                    <xsl:call-template name="usedPECIData">
                        <xsl:with-param name="xpath">
                            <xsl:for-each select="$rootElementPointer/*[name(.) = $value][@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                <xsl:call-template name="print-field-xpath"/> 
                            </xsl:for-each>                       
                        </xsl:with-param>
                    </xsl:call-template>
                </xsl:when>
                <xsl:when test="string-length(normalize-space($rootElementPointer/*[name(.) = $value][@*[local-name() = 'isDeleted']])) > 0">
                    <xsl:value-of select="' '"/>
                </xsl:when>
            </xsl:choose>            
        </xsl:for-each>
    </xsl:template>
    
    <xsl:template name="templateRemoveEndSpace">
        <xsl:param name="stringValue"/>       
        <xsl:value-of select="normalize-space($stringValue)"/>         
    </xsl:template>

 <xsl:template name="peciLocalPayrollDataToBOD">
        <xsl:param name="country"/>
        <xsl:param name="bodType"/>
        <xsl:param name="validFrom"/>
        <xsl:param name="checkDTAEvent"/>
        <xsl:param name="checkPGIEvent"/>
        <xsl:param name="checkisAddedDTA"/>
        <xsl:param name="tableLocalData"/>
        <xsl:param name="relatedPerson"/>
        <saxon:assign name="bodIdentifier" select="$bodType"/>    
        <saxon:assign name="effectiveMomentLP">
            <xsl:value-of select="$validFrom"/>
        </saxon:assign> 
        <saxon:assign name="DTAEvent">
            <xsl:value-of select="$checkDTAEvent"/>
        </saxon:assign>
        <saxon:assign name="PGIEvent">
            <xsl:value-of select="$checkPGIEvent"/>
        </saxon:assign>   
        <saxon:assign name="isAddedDTA">
            <xsl:value-of select="$checkisAddedDTA"/>
        </saxon:assign>
        <saxon:assign name="translationTable">
            <xsl:copy-of select="$tableLocalData"/>
        </saxon:assign>
        <saxon:assign name="Related_Person">
            <xsl:copy-of select="$relatedPerson"/>
        </saxon:assign>
      
        <xsl:variable name="countryList" select="('JPPD','JPADDR','JPFA','CH','BR','KR','SG','PHDC','MXPI','GRAPD')"/>
        <xsl:variable name="templateName" select="concat('peciLocalPayrollData_',$country)"/> 
        <xsl:if test="$country = $countryList">
            <saxon:call-template name = "{$templateName}"/>            
        </xsl:if>
    </xsl:template>
    
    <!--     Local Payroll Data Related Person       -->
    <xsl:template name="peci:ProcessPayServEmpRelatedPerson">
        <xsl:param name="actionCode"/>
        <xsl:param name="relatedPersonCountry"/>
        <xsl:param name="personID"/>
        <xsl:param name="employeeID"/>
        <xsl:param name="bodid"/>
        <xsl:param name="creationDateTime"/>
        <xsl:param name="effectiveMomentDate"/>
        <xsl:variable name="relatedPersonCountryList" select="'JP'"/>
        <xsl:variable name="relatedPersonTemplateName" select="concat('PECIRelatedPerson_',$relatedPersonCountry)"/> 
        <xsl:if test="$relatedPersonCountry = $relatedPersonCountryList">
            <saxon:call-template name = "{$relatedPersonTemplateName}">
                <xsl:with-param name="personID" select="$personID"/>
                <xsl:with-param name="employeeID" select="$employeeID"/>
                <xsl:with-param name="bodid" select="$bodid"/>
                <xsl:with-param name="creationDateTime" select="$creationDateTime"/>
                <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
            </saxon:call-template>      
        </xsl:if>
    </xsl:template>   
    <!--        Local Payroll Data for Japan JPPD        -->
    <xsl:template name="peciLocalPayrollData_JPPD"> 
        <nga:LocalPayrollData>
            <nga:JP>
                <nga:JPPD>     
                   <xsl:if test="string-length($effectiveMomentLP) > 0">
                       <xsl:attribute name="validFrom" select="$effectiveMomentLP"/>
                   </xsl:if>
                    <!-- nga:JPPDLastname Mapping -->
                    <xsl:choose>
                        <xsl:when test="../peci:Derived_Event_Code = ('HIR','PCI','ORG') or $DTAEvent='Y' or $PGIEvent='Y'">
                            <xsl:choose>
                                <xsl:when test="peci:Preferred_Name/peci:Last_Name_Local">
                                    <xsl:element name="nga:JPPDLastname">
                                        <xsl:value-of select="peci:Preferred_Name/peci:Last_Name_Local"/>
                                    </xsl:element>                                   
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Preferred_Name/peci:Last_Name_Local">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>
                                <xsl:when test="peci:Legal_Name/peci:Last_Name_Local">
                                    <xsl:element name="nga:JPPDLastname">
                                        <xsl:value-of select="peci:Legal_Name/peci:Last_Name_Local"/>
                                    </xsl:element>                                    
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Legal_Name/peci:Last_Name_Local">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="peci:Preferred_Name[@*[local-name()]]/peci:Last_Name_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]">
                                    <xsl:element name="nga:JPPDLastname">
                                        <xsl:value-of select="peci:Preferred_Name[@*[local-name()]]/peci:Last_Name_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                                    </xsl:element>                                    
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Preferred_Name/peci:Last_Name_Local">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>
                                <xsl:when test="peci:Legal_Name[@*[local-name()]]/peci:Last_Name_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]">
                                    <xsl:element name="nga:JPPDLastname">
                                        <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:Last_Name_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                                    </xsl:element>                                   
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Legal_Name/peci:Last_Name_Local">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>
                            </xsl:choose>
                        </xsl:otherwise>                      
                    </xsl:choose>          
                    
                    <!-- nga:JPPDFirstname Mapping -->                    
                    <xsl:choose>
                        <xsl:when test="../peci:Derived_Event_Code = ('HIR','PCI','ORG') or $DTAEvent='Y' or $PGIEvent='Y'">
                            <xsl:choose>
                                <xsl:when test="peci:Preferred_Name/peci:First_Name_Local">
                                    <xsl:element name="nga:JPPDFirstname">
                                        <xsl:value-of select="peci:Preferred_Name/peci:First_Name_Local"/>
                                    </xsl:element>                                        
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Preferred_Name/peci:First_Name_Local">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>    
                                <xsl:when test="peci:Legal_Name/peci:First_Name_Local">
                                    <xsl:element name="nga:JPPDFirstname">
                                        <xsl:value-of select="peci:Legal_Name/peci:First_Name_Local"/>
                                    </xsl:element>                                        
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Legal_Name/peci:First_Name_Local">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>
                            </xsl:choose>                                
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="peci:Preferred_Name[@*[local-name()]]/peci:First_Name_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]">
                                    <xsl:element name="nga:JPPDFirstname">
                                        <xsl:value-of select="peci:Preferred_Name[@*[local-name()]]/peci:First_Name_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                                    </xsl:element>                                       
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Preferred_Name/peci:First_Name_Local">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>    
                                <xsl:when test="peci:Legal_Name[@*[local-name()]]/peci:First_Name_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]">
                                    <xsl:element name="nga:JPPDFirstname">
                                        <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:First_Name_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                                    </xsl:element>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Legal_Name/peci:First_Name_Local">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>
                            </xsl:choose>
                        </xsl:otherwise>                                
                    </xsl:choose>
                    
                    <!-- nga:JPPDLastnameKatakana Mapping -->
                    <xsl:choose>
                        <xsl:when test="../peci:Derived_Event_Code = ('HIR','PCI','ORG') or $DTAEvent='Y' or $PGIEvent='Y'">
                            <xsl:choose>
                                <xsl:when test="peci:Preferred_Name/peci:Last_Name_Local_2">
                                    <xsl:element name="nga:JPPDLastnameKatakana">
                                        <xsl:value-of select="peci:Preferred_Name/peci:Last_Name_Local_2"/>
                                    </xsl:element>                                   
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Preferred_Name/peci:Last_Name_Local_2">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>
                                <xsl:when test="peci:Legal_Name/peci:Last_Name_Local_2">
                                    <xsl:element name="nga:JPPDLastnameKatakana">
                                        <xsl:value-of select="peci:Legal_Name/peci:Last_Name_Local_2"/>
                                    </xsl:element>                                    
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Legal_Name/peci:Last_Name_Local_2">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="peci:Preferred_Name[@*[local-name()]]/peci:Last_Name_Local_2[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]">
                                    <xsl:element name="nga:JPPDLastnameKatakana">
                                        <xsl:value-of select="peci:Preferred_Name[@*[local-name()]]/peci:Last_Name_Local_2[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                                    </xsl:element>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Preferred_Name/peci:Last_Name_Local_2">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>
                                <xsl:when test="peci:Legal_Name[@*[local-name()]]/peci:Last_Name_Local_2[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]">
                                    <xsl:element name="nga:JPPDLastnameKatakana">
                                        <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:Last_Name_Local_2[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                                    </xsl:element>                                    
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Legal_Name/peci:Last_Name_Local_2">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>
                            </xsl:choose>
                        </xsl:otherwise>                               
                    </xsl:choose>
                      
                    <!-- nga:JPPDFirstnameKatakana Mapping -->
                    <xsl:choose>
                        <xsl:when test="../peci:Derived_Event_Code = ('HIR','PCI','ORG') or $DTAEvent='Y' or $PGIEvent='Y'">
                            <xsl:choose>
                                <xsl:when test="peci:Preferred_Name/peci:First_Name_Local_2">
                                    <xsl:element name="nga:JPPDFirstnameKatakana">
                                        <xsl:value-of select="peci:Preferred_Name/peci:First_Name_Local_2"/>
                                    </xsl:element>                                        
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Preferred_Name/peci:First_Name_Local_2">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>
                                <xsl:when test="peci:Legal_Name/peci:First_Name_Local_2">
                                    <xsl:element name="nga:JPPDFirstnameKatakana">
                                        <xsl:value-of select="peci:Legal_Name/peci:First_Name_Local_2"/>
                                    </xsl:element>                                       
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Legal_Name/peci:First_Name_Local_2">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="peci:Preferred_Name[@*[local-name()]]/peci:First_Name_Local_2[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]">
                                    <xsl:element name="nga:JPPDFirstnameKatakana">
                                        <xsl:value-of select="peci:Preferred_Name[@*[local-name()]]/peci:First_Name_Local_2[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                                    </xsl:element>                                        
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Preferred_Name/peci:First_Name_Local_2">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>
                                <xsl:when test="peci:Legal_Name[@*[local-name()]]/peci:First_Name_Local_2[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]">
                                    <xsl:element name="nga:JPPDFirstnameKatakana">
                                        <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:First_Name_Local_2[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                                    </xsl:element>                                        
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Legal_Name/peci:First_Name_Local_2">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>
                            </xsl:choose>
                        </xsl:otherwise>
                    </xsl:choose>                    
                        
                    <xsl:if test="peci:Additional_Name/peci:Name_Type = 'Maiden' or peci:Additional_Name[@*[local-name()]]/peci:Name_Type[@*[local-name()]] = 'Maiden'">
                        <!-- nga:JPPDNameatBirth Mapping -->
                        <xsl:choose>
                            <xsl:when test="../peci:Derived_Event_Code = ('HIR','PCI','ORG') or $DTAEvent='Y' or $PGIEvent='Y'">
                                <xsl:if test="peci:Additional_Name/peci:Last_Name_Local">
                                    <xsl:element name="nga:JPPDNameatBirth">
                                        <xsl:value-of select="peci:Additional_Name/peci:Last_Name_Local"/>
                                    </xsl:element>  
                                </xsl:if>                                                                    
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Additional_Name/peci:Last_Name_Local">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>   
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:if test="peci:Additional_Name[@*[local-name()]]/peci:Last_Name_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]">
                                    <xsl:element name="nga:JPPDNameatBirth">
                                        <xsl:value-of select="peci:Additional_Name[@*[local-name()]]/peci:Last_Name_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                                    </xsl:element>
                                </xsl:if>                                    
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Additional_Name/peci:Last_Name_Local">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>   
                            </xsl:otherwise>                                
                        </xsl:choose>
                                                    
                        <!-- nga:JPPDNameofBirthKatakana Mapping -->
                        <xsl:choose>
                            <xsl:when test="../peci:Derived_Event_Code = ('HIR','PCI','ORG') or $DTAEvent='Y' or $PGIEvent='Y'">
                                <xsl:if test="peci:Additional_Name/peci:Last_Name_Local_2">
                                    <xsl:element name="nga:JPPDNameofBirthKatakana">
                                        <xsl:value-of select="peci:Additional_Name/peci:Last_Name_Local_2"/>
                                    </xsl:element>
                                </xsl:if>                                    
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Personal/peci:Additional_Name/peci:Last_Name_Local_2">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:if test="peci:Additional_Name[@*[local-name()]]/peci:Last_Name_Local_2[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]">
                                    <xsl:element name="nga:JPPDNameofBirthKatakana">
                                        <xsl:value-of select="peci:Additional_Name[@*[local-name()]]/peci:Last_Name_Local_2[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                                    </xsl:element>
                                </xsl:if>                                   
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Personal/peci:Additional_Name/peci:Last_Name_Local_2">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:otherwise>
                        </xsl:choose>
                                                   
                        <!-- nga:JPPDNameofBirthRomaji Mapping -->
                        <xsl:choose>
                            <xsl:when test="../peci:Derived_Event_Code = ('HIR','PCI','ORG') or $DTAEvent='Y' or $PGIEvent='Y'">
                                <xsl:if test="peci:Additional_Name/peci:Last_Name">
                                    <xsl:element name="nga:JPPDNameofBirthRomaji">
                                        <xsl:value-of select="peci:Additional_Name/peci:Last_Name"/>
                                    </xsl:element>
                                </xsl:if>                                    
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Additional_Name/peci:Last_Name">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:if test="peci:Additional_Name[@*[local-name()]]/peci:Last_Name[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]">
                                    <xsl:element name="nga:JPPDNameofBirthRomaji">
                                        <xsl:value-of select="peci:Additional_Name[@*[local-name()]]/peci:Last_Name[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                                    </xsl:element>
                                </xsl:if>                                   
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Additional_Name/peci:Last_Name">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:otherwise>
                        </xsl:choose>                      
                    </xsl:if>                        
                           
                    <!-- nga:JPPDOfficialLastNameKatakana Mapping -->
                    <xsl:choose>                           
                        <xsl:when test="../peci:Derived_Event_Code = ('HIR','PCI','ORG') or $DTAEvent='Y' or $PGIEvent='Y'">
                            <xsl:if test="peci:Legal_Name/peci:Last_Name_Local_2">
                                <xsl:element name="nga:JPPDOfficialLastNameKatakana">
                                    <xsl:value-of select="peci:Legal_Name/peci:Last_Name_Local_2"/>
                                </xsl:element>
                            </xsl:if>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Legal_Name/peci:Last_Name_Local_2">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:if test="peci:Legal_Name[@*[local-name()]]/peci:Last_Name_Local_2[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]">
                                <xsl:element name="nga:JPPDOfficialLastNameKatakana">
                                    <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:Last_Name_Local_2[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                                </xsl:element>
                            </xsl:if>                            
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Legal_Name/peci:Last_Name_Local_2">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:otherwise>
                    </xsl:choose>
                    
                      
                    <!-- nga:JPPDOfficialLastName Mapping -->
                    <xsl:choose>
                        <xsl:when test="../peci:Derived_Event_Code = ('HIR','PCI','ORG') or $DTAEvent='Y' or $PGIEvent='Y'">
                            <xsl:if test="peci:Legal_Name/peci:Last_Name">
                                <xsl:element name="nga:JPPDOfficialLastName">
                                    <xsl:value-of select="peci:Legal_Name/peci:Last_Name"/>
                                </xsl:element>
                            </xsl:if>                           
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:Last_Name">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:if test="peci:Legal_Name[@*[local-name()]]/peci:Last_Name[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]">
                                <xsl:element name="nga:JPPDOfficialLastName">
                                    <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:Last_Name[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                                </xsl:element>
                            </xsl:if>                            
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Legal_Name/peci:Last_Name">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:otherwise>
                    </xsl:choose>                    
                  
                    <!-- nga:JPPDOfficialFirstNameKanji Mapping -->
                    <xsl:choose>
                        <xsl:when test="../peci:Derived_Event_Code = ('HIR','PCI','ORG') or $DTAEvent='Y' or $PGIEvent='Y'">
                            <xsl:if test="peci:Legal_Name/peci:First_Name_Local">
                                <xsl:element name="nga:JPPDOfficialFirstNameKanji">
                                    <xsl:value-of select="peci:Legal_Name/peci:First_Name_Local"/>
                                </xsl:element>
                            </xsl:if>                            
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Legal_Name/peci:First_Name_Local">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:if test="peci:Legal_Name[@*[local-name()]]/peci:First_Name_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]">
                                <xsl:element name="nga:JPPDOfficialFirstNameKanji">
                                    <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:First_Name_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                                </xsl:element>
                            </xsl:if>                            
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Legal_Name/peci:First_Name_Local">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:otherwise>
                    </xsl:choose>   
                                          
                    <!-- nga:JPPDOfficialFirstNameKatakana Mapping -->
                    <xsl:choose>
                        <xsl:when test="../peci:Derived_Event_Code = ('HIR','PCI','ORG') or $DTAEvent='Y' or $PGIEvent='Y'">
                            <xsl:if test="peci:Legal_Name/peci:First_Name_Local_2">
                                <xsl:element name="nga:JPPDOfficialFirstNameKatakana">
                                    <xsl:value-of select="peci:Legal_Name/peci:First_Name_Local_2"/>
                                </xsl:element>
                            </xsl:if>                           
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:First_Name_Local_2">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:if test="peci:Legal_Name[@*[local-name()]]/peci:First_Name_Local_2[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]">
                                <xsl:element name="nga:JPPDOfficialFirstNameKatakana">
                                    <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:First_Name_Local_2[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                                </xsl:element>
                            </xsl:if>                            
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Legal_Name/peci:First_Name_Local_2">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:otherwise>
                    </xsl:choose>                    
                     
                    <!-- nga:JPPDOfficialFirstName Mapping -->
                    <xsl:choose>
                        <xsl:when test="../peci:Derived_Event_Code = ('HIR','PCI','ORG') or $DTAEvent='Y' or $PGIEvent='Y'">
                            <xsl:if test="peci:Legal_Name/peci:First_Name">
                                <xsl:element name="nga:JPPDOfficialFirstName">
                                    <xsl:value-of select="peci:Legal_Name/peci:First_Name"/>
                                </xsl:element>
                            </xsl:if>                               
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:First_Name">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:if test="peci:Legal_Name[@*[local-name()]]/peci:First_Name[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]">
                                <xsl:element name="nga:JPPDOfficialFirstName">
                                    <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:First_Name[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                                </xsl:element>
                            </xsl:if>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Legal_Name/peci:First_Name">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:otherwise>
                    </xsl:choose>                
                </nga:JPPD>         
            </nga:JP>
        </nga:LocalPayrollData>
    </xsl:template>
    
    <!--        Local Payroll Data for Japan JPADDR       -->
    <xsl:template name="peciLocalPayrollData_JPADDR"> 
        <nga:LocalPayrollData>
            <nga:JP>
                <nga:JPADDR>
                    <xsl:if test="string-length($effectiveMomentLP) > 0">
                        <xsl:attribute name="validFrom" select="$effectiveMomentLP"/>
                    </xsl:if>
                    <xsl:variable name="JPADDRCountryKey">
                        <xsl:choose>
                            <xsl:when test="../../peci:Derived_Event_Code = ('HIR','PCI','ORG') or ($DTAEvent='Y' or $PGIEvent='Y' or $isAddedDTA='Y')">
                                <xsl:value-of select="peci:Country"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="peci:Country[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:if test="string-length($JPADDRCountryKey) > 0">
                        <nga:JPADDRCountryKey>
                            <xsl:value-of select="$JPADDRCountryKey"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Country">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:JPADDRCountryKey>
                    </xsl:if>
                    <xsl:variable name="JPADDRPostalCode">
                        <xsl:choose>
                            <xsl:when test="../../peci:Derived_Event_Code = ('HIR','PCI','ORG') or ($DTAEvent='Y' or $PGIEvent='Y' or $isAddedDTA='Y')">
                                <xsl:value-of select="peci:Postal_Code"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="peci:Postal_Code[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:if test="string-length($JPADDRPostalCode) > 0 ">
                        <nga:JPADDRPostalCode>
                            <xsl:value-of select="$JPADDRPostalCode"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Postal_Code">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>   
                        </nga:JPADDRPostalCode>
                    </xsl:if>
                    <xsl:variable name="JPADDRRegion">
                        <xsl:choose>
                            <xsl:when test="../../peci:Derived_Event_Code = ('HIR','PCI','ORG') or ($DTAEvent='Y' or $PGIEvent='Y' or $isAddedDTA='Y')">
                                <xsl:value-of select="substring-after(peci:Country_Region,'-')"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="substring-after(peci:Country_Region[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0],'-')"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:if test="string-length($JPADDRRegion) > 0 ">
                        <nga:JPADDRRegion>
                            <xsl:value-of select="$JPADDRRegion"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Country_Region">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>   
                        </nga:JPADDRRegion>
                    </xsl:if>
                    <xsl:variable name="JPADDRFirstAddLineKanji">
                        <xsl:choose>
                            <xsl:when test="../../peci:Derived_Event_Code = ('HIR','PCI','ORG') or ($DTAEvent='Y' or $PGIEvent='Y' or $isAddedDTA='Y')">
                                <xsl:value-of select="peci:Address_Line_1_Local"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="peci:Address_Line_1_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:if test="string-length($JPADDRFirstAddLineKanji) > 0">
                        <nga:JPADDRFirstAddLineKanji>
                            <xsl:value-of select="$JPADDRFirstAddLineKanji"/>   
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Address_Line_1_Local">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:JPADDRFirstAddLineKanji>
                    </xsl:if>
                    <xsl:variable name="JPADDRSecondAddLineKanji">
                        <xsl:choose>
                            <xsl:when test="../../peci:Derived_Event_Code = ('HIR','PCI','ORG') or ($DTAEvent='Y' or $PGIEvent='Y' or $isAddedDTA='Y')">
                                <xsl:value-of select="peci:Address_Line_5_Local"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="peci:Address_Line_5_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:if test="string-length($JPADDRSecondAddLineKanji) > 0">
                        <nga:JPADDRSecondAddLineKanji>
                            <xsl:value-of select="$JPADDRSecondAddLineKanji"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Address_Line_5_Local">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:JPADDRSecondAddLineKanji>
                    </xsl:if>
                    <!--<xsl:variable name="JPADDRThirdAddLineKanji">
                        <xsl:choose>
                            <xsl:when test="../../peci:Derived_Event_Code = ('HIR','PCI','ORG') or ($DTAEvent='Y' or $PGIEvent='Y' or $isAddedDTA='Y')">
                                <xsl:value-of select="peci:City_Local"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="peci:City_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:if test="string-length($JPADDRThirdAddLineKanji) > 0">
                        <nga:JPADDRThirdAddLineKanji>
                            <xsl:value-of select="$JPADDRThirdAddLineKanji"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:City_Local">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:JPADDRThirdAddLineKanji>
                    </xsl:if>
                    -->
                    <xsl:variable name="JPADDRFirstAddLineKatakana">
                        <xsl:choose>
                            <xsl:when test="../../peci:Derived_Event_Code = ('HIR','PCI','ORG') or ($DTAEvent='Y' or $PGIEvent='Y' or $isAddedDTA='Y')">
                                <xsl:value-of select="peci:Address_Line_4_Local"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="peci:Address_Line_4_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:if test="string-length($JPADDRFirstAddLineKatakana) > 0">
                        <nga:JPADDRFirstAddLineKatakana>
                            <xsl:value-of select="$JPADDRFirstAddLineKatakana"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Address_Line_4_Local">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:JPADDRFirstAddLineKatakana>
                    </xsl:if>   
                    <xsl:variable name="JPADDRSecondAddLineKatakana">
                        <xsl:choose>
                            <xsl:when test="../../peci:Derived_Event_Code = ('HIR','PCI','ORG') or ($DTAEvent='Y' or $PGIEvent='Y' or $isAddedDTA='Y')">
                                <xsl:value-of select="peci:Address_Line_6_Local"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="peci:Address_Line_6_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:if test="string-length($JPADDRSecondAddLineKatakana) > 0">
                        <nga:JPADDRSecondAddLineKatakana>
                            <xsl:value-of select="$JPADDRSecondAddLineKatakana"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Address_Line_6_Local">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:JPADDRSecondAddLineKatakana>
                    </xsl:if>
                    <xsl:variable name="JPADDRThirdAddLineKatakana">
                        <xsl:choose>
                            <xsl:when test="../../peci:Derived_Event_Code = ('HIR','PCI','ORG') or ($DTAEvent='Y' or $PGIEvent='Y' or $isAddedDTA='Y')">
                                <xsl:value-of select="peci:Address_Line_2_Local"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="peci:Address_Line_2_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:if test="string-length($JPADDRThirdAddLineKatakana) > 0">
                        <nga:JPADDRThirdAddLineKatakana>
                            <xsl:value-of select="$JPADDRThirdAddLineKatakana"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Address_Line_2_Local">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:JPADDRThirdAddLineKatakana>
                    </xsl:if>   
                    <xsl:variable name="JPADDRMunicipalCityCode">
                        <xsl:choose>
                            <xsl:when test="../../peci:Derived_Event_Code = ('HIR','PCI','ORG') or ($DTAEvent='Y' or $PGIEvent='Y' or $isAddedDTA='Y')">
                                <xsl:value-of select="peci:City_Local"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="peci:City_Local[@*[local-name() != 'isDeleted'] and string-length(@*[local-name()]) > 0]"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:if test="string-length($JPADDRMunicipalCityCode) > 0">
                        <nga:JPADDRMunicipalCityCode>
                            <xsl:value-of select="$JPADDRMunicipalCityCode"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:City_Local">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:JPADDRMunicipalCityCode>
                    </xsl:if>                   
                </nga:JPADDR>
            </nga:JP>        
        </nga:LocalPayrollData>
    </xsl:template>   
    
    <!--    Japan Local Payroll Data for Family Details     -->
    <xsl:template name="peciLocalPayrollData_JPFA"> 
        <nga:LocalPayrollData>
            <nga:JP>
                <nga:JPFA>
                    <xsl:if test="string-length($effectiveMomentLP) > 0">
                        <xsl:attribute name="validFrom" select="$effectiveMomentLP"/>
                    </xsl:if>
                    <xsl:for-each select="current-group()">
                        <xsl:if test="position() &lt;= 10">
                            <xsl:if test="string-length(peci:Relationship_Type) > 0">
                                <xsl:element name="{concat('nga:JPFARecordType',position())}">
                                    <xsl:choose>
                                        <xsl:when test="peci:Relationship_Type = 'Spouse'">
                                            <xsl:value-of select="'1'"/>
                                        </xsl:when>
                                        <xsl:when test="peci:Relationship_Type = 'Child'">
                                            <xsl:value-of select="'2'"/>
                                        </xsl:when>
                                    </xsl:choose>     
                                </xsl:element>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Relationship_Type">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:if>
                            <xsl:if test="string-length(peci:Legal_Name/peci:Last_Name_Local) > 0">
                                <xsl:element name="{concat('nga:JPFALastNameKanji',position())}">
                                    <xsl:value-of select="peci:Legal_Name/peci:Last_Name_Local"/>
                                </xsl:element>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Legal_Name/peci:Last_Name_Local">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:if>                                 
                            <xsl:if test="string-length(peci:Legal_Name/peci:First_Name_Local) > 0">
                                <xsl:element name="{concat('nga:JPFAFirstNameKanji',position())}">
                                    <xsl:value-of select="peci:Legal_Name/peci:First_Name_Local"/>
                                </xsl:element>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Legal_Name/peci:First_Name_Local">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:if>
                            <xsl:if test="string-length(peci:Legal_Name/peci:Last_Name_Local_2) > 0">
                                <xsl:element name="{concat('nga:JPFALastnameKatakana',position())}">
                                    <xsl:value-of select="peci:Legal_Name/peci:Last_Name_Local_2"/>
                                </xsl:element>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Legal_Name/peci:Last_Name_Local_2">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>                               
                            </xsl:if>
                            <xsl:if test="string-length(peci:Legal_Name/peci:First_Name_Local_2) > 0">
                                <xsl:element name="{concat('nga:JPFAFirstnameKatakana',position())}">
                                    <xsl:value-of select="peci:Legal_Name/peci:First_Name_Local_2"/>
                                </xsl:element>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Legal_Name/peci:First_Name_Local_2">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>                              
                            </xsl:if>
                            <xsl:if test="string-length(peci:Legal_Name/peci:Last_Name) > 0">
                                <xsl:element name="{concat('nga:JPFALastName',position())}">
                                    <xsl:value-of select="peci:Legal_Name/peci:Last_Name"/>
                                </xsl:element>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Legal_Name/peci:Last_Name">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:if>
                            <xsl:if test="string-length(peci:Legal_Name/peci:First_Name) > 0">                                
                                <xsl:element name="{concat('nga:JPFAFirstName',position())}">
                                    <xsl:value-of select="peci:Legal_Name/peci:First_Name"/>
                                </xsl:element>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Legal_Name/peci:First_Name">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:if>
                            <xsl:if test="string-length(peci:Gender) > 0">
                                <xsl:element name="{concat('nga:JPFAGender',position())}">
                                    <xsl:choose>
                                        <xsl:when test="peci:Gender = 'Male'">
                                            <xsl:value-of select="'1'"/>
                                        </xsl:when>
                                        <xsl:when test="peci:Gender = 'Female'">
                                            <xsl:value-of select="'2'"/>
                                        </xsl:when>                                      
                                    </xsl:choose>    
                                </xsl:element>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Gender">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>                                  
                            </xsl:if>
                            <xsl:if test="string-length(peci:Birth_Date) > 0">
                                <xsl:element name="{concat('nga:JPFADateofbirth',position())}">    
                                    <xsl:call-template name="insertDateWithDash">
                                        <xsl:with-param name="date" select="peci:Birth_Date"/>
                                    </xsl:call-template>                                   
                                </xsl:element>          
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Birth_Date">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:if>
                            <xsl:if test="string-length(peci:Country_of_Birth) > 0">
                                <xsl:element name="{concat('nga:JPFACountryofbirth',position())}">
                                    <xsl:value-of select="peci:Country_of_Birth"/>
                                </xsl:element>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Country_of_Birth">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:if>
                            <xsl:if test="string-length(peci:City_of_Birth) > 0">
                                <xsl:element name="{concat('nga:JPFABirthPlace',position())}">
                                    <xsl:value-of select="peci:City_of_Birth"/>
                                </xsl:element>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:City_of_Birth">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:if>
                            <xsl:if test="string-length(peci:Region_of_Birth) > 0">
                                <xsl:element name="{concat('nga:JPFAState',position())}">
                                    <xsl:value-of select="peci:Region_of_Birth"/>
                                </xsl:element>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Region_of_Birth">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:if>           
                            <xsl:if test="string-length(peci:Relationship_Type) > 0">
                                <xsl:variable name="ralationshipType">
                                    <xsl:choose>
                                        <xsl:when test="peci:Relationship_Type = 'Spouse'">
                                            <xsl:value-of select="'10'"/>
                                        </xsl:when>
                                        <xsl:when test="peci:Relationship_Type = 'Child' and peci:Gender = 'Male'">
                                            <xsl:value-of select="'20'"/>
                                        </xsl:when>
                                        <xsl:when test="peci:Relationship_Type = 'Child' and peci:Gender = 'Female'">
                                            <xsl:value-of select="'30'"/>
                                        </xsl:when>
                                    </xsl:choose>
                                </xsl:variable>
                                <xsl:element name="{concat('nga:JPFARelationship',position())}">
                                    <xsl:value-of select="$ralationshipType"/>
                                </xsl:element>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Relationship_Type">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:if>
                            <xsl:if test="string-length(peci:Allowed_for_Tax_Deduction) > 0">
                                <xsl:element name="{concat('nga:JPFADependentTax',position())}">
                                    <xsl:value-of select="peci:Allowed_for_Tax_Deduction"/>
                                </xsl:element>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Allowed_for_Tax_Deduction">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:if>                                
                        </xsl:if>
                    </xsl:for-each>
                </nga:JPFA>
            </nga:JP>
        </nga:LocalPayrollData>
    </xsl:template>
    
    <!--    Local Payroll Data for CH       -->
    <xsl:template name="peciLocalPayrollData_CH">       
            <nga:LocalPayrollData>
                <nga:CH>
                    <xsl:if test="$bodIdentifier = 'localReligionCH'">
                        <nga:chelm>
                            <xsl:if test="../../peci:Effective_Moment">
                                <xsl:attribute name="validFrom">
                                    <xsl:value-of select="substring(../../peci:Effective_Moment,1,10)"/>
                                </xsl:attribute>
                            </xsl:if>                
                            <nga:chelmReligion>   
                                <xsl:choose>
                                    <xsl:when test="../../peci:Derived_Event_Code != 'DTA' or (../../peci:Derived_Event_Code = 'DTA' and string-length(../../peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue) > 0 and (../../peci:Additional_Information/ptdf:OrganizationID/@peci:priorValue != ../../peci:Additional_Information/ptdf:OrganizationID))">
                                        <xsl:value-of select="../peci:Religion"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="../peci:Religion">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:value-of select="../peci:Religion[@*[local-name()]]"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="../peci:Religion[@*[local-name()]]">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </xsl:otherwise>
                                </xsl:choose>                               
                            </nga:chelmReligion>
                        </nga:chelm>        
                    </xsl:if>
                    <xsl:if test="$bodIdentifier = 'localVisaCH'">
                        <nga:CHRS>
                            <xsl:if test="../../peci:Effective_Moment">
                                <xsl:attribute name="validFrom">
                                    <xsl:value-of select="substring(../../peci:Effective_Moment,1,10)"/>
                                </xsl:attribute>
                            </xsl:if>                
                            <xsl:if test="peci:Visa_ID_Type">
                                <nga:CHRSResidenceStatus>
                                    <xsl:value-of select="peci:Visa_ID_Type[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Visa_ID_Type[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:CHRSResidenceStatus>
                            </xsl:if>
                            <xsl:if test="peci:Visa_ID">
                                <nga:CHRSPermNum>
                                    <xsl:value-of select="peci:Visa_ID[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Visa_ID[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:CHRSPermNum>
                            </xsl:if>
                            <xsl:if test="peci:Expiration_Date">
                                <nga:CHRSExpirationDate>
                                    <xsl:value-of select="substring(peci:Expiration_Date[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0],1,10)"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Expiration_Date[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:CHRSExpirationDate>
                            </xsl:if>
                            <xsl:if test="peci:Issued_Date">
                                <nga:CHRSDateIssue>
                                    <xsl:value-of select="substring(peci:Issued_Date[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0],1,10)"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Issued_Date[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:CHRSDateIssue>
                            </xsl:if>
                            <xsl:if test="../../peci:Additional_Information/ptdf:PayrollSpecificGrouping1">
                                <nga:CHRSEntryDate>
                                    <xsl:value-of select="substring(../../peci:Additional_Information/ptdf:PayrollSpecificGrouping1[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0],1,10)"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="../../peci:Additional_Information/ptdf:PayrollSpecificGrouping1[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:CHRSEntryDate>
                            </xsl:if>                          
                        </nga:CHRS> 
                    </xsl:if>
                   </nga:CH>
            </nga:LocalPayrollData>  
       </xsl:template>
    
    <!--      LocalPayroll for Brazil Passport Issued Date -->
    <xsl:template name="peciLocalPayrollData_BR">       
        <nga:LocalPayrollData>
            <nga:BR>
                <nga:BRDP>
                    <xsl:if test="$effectiveMomentLP">
                        <xsl:attribute name="validFrom" select="$effectiveMomentLP"/>
                    </xsl:if>
                    <nga:BRDPIssueDate>                 
                        <xsl:value-of select="substring(peci:Issued_Date,1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Issued_Date">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:BRDPIssueDate>
                </nga:BRDP>               
            </nga:BR>
        </nga:LocalPayrollData>
    </xsl:template>
    
    <!--      LocalPayroll for Korean Local Script Name -->
    <xsl:template name="peciLocalPayrollData_KR">
        <nga:LocalPayrollData>
            <nga:KR>
                <nga:KRPD>
                    <xsl:if test="$effectiveMomentLP">
                        <xsl:attribute name="validFrom" select="$effectiveMomentLP"/>
                    </xsl:if>
                    <xsl:if test="string-length(peci:Last_Name_Local_2) > 0">
                        <nga:KRPDLastNameChinese>
                            <xsl:value-of select="peci:Last_Name_Local_2[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Last_Name_Local_2[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:KRPDLastNameChinese>
                    </xsl:if>
                    <xsl:if test="string-length(peci:First_Name_Local_2) > 0">
                        <nga:KRPDFirstNameChinese>
                            <xsl:value-of select="peci:First_Name_Local_2[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:First_Name_Local_2[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:KRPDFirstNameChinese>
                    </xsl:if>               
                </nga:KRPD>
            </nga:KR>            
        </nga:LocalPayrollData>
     </xsl:template>
    
    <!--      LocalPayroll for Singaporean Religion and Ethnicity    -->
    <xsl:template name="peciLocalPayrollData_SG">
        <nga:LocalPayrollData>
            <xsl:variable name="sgReligion">
                <xsl:value-of select="peci:Religion"/>
            </xsl:variable>
            <xsl:variable name="countsgEthnicity">
                <xsl:value-of select="count(peci:Ethnicity/peci:Ethnicity_ID)"/>
            </xsl:variable>
            <xsl:variable name="sgEthnicity">
                <xsl:choose>
                    <xsl:when test="$countsgEthnicity > 1">
                        <xsl:value-of select="peci:Ethnicity[@*[local-name() != 'isDeleted']]/peci:Ethnicity_ID"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="peci:Ethnicity/peci:Ethnicity_ID"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="transSGReligion">
                <xsl:if test="string-length($sgReligion) > 0">
                    <xsl:value-of select="normalize-space($translationTable/Rows[MAPPING='LocalDataReligion' and COUNTRY = 'SG' and KEY=$sgReligion]/VALUE)"/>
                </xsl:if>     
            </xsl:variable>
            <xsl:variable name="transSGEthnicity">
                <xsl:if test="string-length($sgEthnicity) > 0">
                    <xsl:value-of select="normalize-space($translationTable/Rows[MAPPING='LocalDataEthnicity' and COUNTRY = 'SG' and KEY=$sgEthnicity]/VALUE)"/>
                </xsl:if>
            </xsl:variable>
            <xsl:variable name="valSGReligion">
                <xsl:if test="string-length($transSGReligion) = 0">
                    <xsl:value-of select="normalize-space($translationTable/Rows[MAPPING='LocalDataReligion' and COUNTRY = 'SG' and VALUE = $sgReligion]/VALUE)"/>
                </xsl:if>
            </xsl:variable>
            <xsl:variable name="valSGEthinicty">
                <xsl:if test="string-length($transSGEthnicity) = 0">
                    <xsl:value-of select="normalize-space($translationTable/Rows[MAPPING='LocalDataEthnicity' and COUNTRY = 'SG' and VALUE = $sgEthnicity]/VALUE)"/>
                </xsl:if>
            </xsl:variable>          
            <nga:SG>
                <nga:SGPEI>
                    <xsl:if test="$effectiveMomentLP">
                        <xsl:attribute name="validFrom" select="$effectiveMomentLP"/>
                    </xsl:if>
                    <nga:SGPEIReligion>
                        <xsl:choose>
                            <xsl:when test="string-length($transSGReligion) > 0 and  peci:Religion[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                <xsl:value-of select="$transSGReligion"/>
                            </xsl:when>
                            <xsl:when test="string-length($valSGReligion) > 0 and peci:Religion[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                <xsl:value-of select="$valSGReligion"/>
                            </xsl:when>
                            <xsl:when test="peci:Religion[@*[local-name() = 'isDeleted']] or not(peci:Religion)">
                                <xsl:value-of select="'NON'"/>
                            </xsl:when>
                            <xsl:when test="string-length($valSGReligion) = 0">
                                <xsl:value-of select="'OTH'"/>
                            </xsl:when>
                        </xsl:choose>
                    </nga:SGPEIReligion>
                    <nga:SGPEIEthnicityRace>
                        <xsl:choose>
                            <xsl:when test="string-length($transSGEthnicity) > 0 and peci:Ethnicity[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                <xsl:value-of select="$transSGEthnicity"/>
                            </xsl:when>
                            <xsl:when test="string-length($valSGEthinicty) > 0 and peci:Ethnicity[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                <xsl:value-of select="$valSGEthinicty"/>
                            </xsl:when>
                            <xsl:when test="($countsgEthnicity = 1 and peci:Ethnicity[@*[local-name() = 'isDeleted']]) or not(peci:Ethnicity)">
                                <xsl:value-of select="'NA'"/>
                            </xsl:when>
                            <xsl:when test="string-length($valSGEthinicty) = 0">
                                <xsl:value-of select="'OTH'"/>
                            </xsl:when>
                        </xsl:choose>
                    </nga:SGPEIEthnicityRace>
                </nga:SGPEI>
            </nga:SG>
        </nga:LocalPayrollData>
    </xsl:template>
    
    <!--      LocalPayroll for Philippines Dependent Children    -->
    <xsl:template name="peciLocalPayrollData_PHDC">
        <nga:LocalPayrollData>
            <nga:PH>
                <nga:PHDC>
                    <xsl:if test="$effectiveMomentLP">
                        <xsl:attribute name="validFrom" select="$effectiveMomentLP"/>
                    </xsl:if>
                    <xsl:if test="nga:Child/nga:Count = '1'">
                        <nga:PHDCLastName1>
                            <xsl:value-of select="nga:Child[nga:Count = '1']/peci:Last_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '1']/nga:XPath,'/','peci:Legal_Name/peci:Last_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCLastName1>
                        <nga:PHDCGivenName1>
                            <xsl:value-of select="nga:Child[nga:Count = '1']/peci:First_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '1']/nga:XPath,'/','peci:Legal_Name/peci:First_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGivenName1>
                        <nga:PHDCBirthdate1>
                            <xsl:value-of select="nga:Child[nga:Count = '1']/peci:Birth_Date"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '1']/nga:XPath,'/', 'peci:Birth_Date')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCBirthdate1>
                        <nga:PHDCGender1>
                            <xsl:value-of select="nga:Child[nga:Count = '1']/peci:Gender"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '1']/nga:XPath,'/', 'peci:Gender')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGender1>
                    </xsl:if>
                    <xsl:if test="nga:Child/nga:Count = '2'">
                        <nga:PHDCLastName2>
                            <xsl:value-of select="nga:Child[nga:Count = '2']/peci:Last_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '2']/nga:XPath,'/','peci:Legal_Name/peci:Last_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCLastName2>
                        <nga:PHDCGivenName2>
                            <xsl:value-of select="nga:Child[nga:Count = '2']/peci:First_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '2']/nga:XPath,'/','peci:Legal_Name/peci:First_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGivenName2>
                        <nga:PHDCBirthdate2>
                            <xsl:value-of select="nga:Child[nga:Count = '2']/peci:Birth_Date"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '2']/nga:XPath,'/','peci:Birth_Date')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCBirthdate2>
                        <nga:PHDCGender2>
                            <xsl:value-of select="nga:Child[nga:Count = '2']/peci:Gender"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '2']/nga:XPath,'/','peci:Gender')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGender2>
                    </xsl:if>
                    <xsl:if test="nga:Child/nga:Count = '3'">
                        <nga:PHDCLastName3>
                            <xsl:value-of select="nga:Child[nga:Count = '3']/peci:Last_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '3']/nga:XPath,'/','peci:Legal_Name/peci:Last_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCLastName3>
                        <nga:PHDCGivenName3>
                            <xsl:value-of select="nga:Child[nga:Count = '3']/peci:First_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '3']/nga:XPath,'/','peci:Legal_Name/peci:First_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGivenName3>
                        <nga:PHDCBirthdate3>
                            <xsl:value-of select="nga:Child[nga:Count = '3']/peci:Birth_Date"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '3']/nga:XPath,'/','peci:Birth_Date')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCBirthdate3>
                        <nga:PHDCGender3>
                            <xsl:value-of select="nga:Child[nga:Count = '3']/peci:Gender"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '3']/nga:XPath,'/','peci:Gender')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGender3>
                    </xsl:if>
                    <xsl:if test="nga:Child/nga:Count = '4'">
                        <nga:PHDCLastName4>
                            <xsl:value-of select="nga:Child[nga:Count = '4']/peci:Last_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '4']/nga:XPath,'/','peci:Legal_Name/peci:Last_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCLastName4>
                        <nga:PHDCGivenName4>
                            <xsl:value-of select="nga:Child[nga:Count = '4']/peci:First_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '4']/nga:XPath,'/','peci:Legal_Name/peci:First_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGivenName4>
                        <nga:PHDCBirthdate4>
                            <xsl:value-of select="nga:Child[nga:Count = '4']/peci:Birth_Date"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '4']/nga:XPath,'/','peci:Birth_Date')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCBirthdate4>
                        <nga:PHDCGender4>
                            <xsl:value-of select="nga:Child[nga:Count = '4']/peci:Gender"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '4']/nga:XPath,'/','peci:Gender')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGender4>
                    </xsl:if>
                    <xsl:if test="nga:Child/nga:Count = '5'">
                        <nga:PHDCLastName5>
                            <xsl:value-of select="nga:Child[nga:Count = '5']/peci:Last_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '5']/nga:XPath,'/','peci:Legal_Name/peci:Last_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCLastName5>
                        <nga:PHDCGivenName5>
                            <xsl:value-of select="nga:Child[nga:Count = '5']/peci:First_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '5']/nga:XPath,'/','peci:Legal_Name/peci:First_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGivenName5>
                        <nga:PHDCBirthdate5>
                            <xsl:value-of select="nga:Child[nga:Count = '5']/peci:Birth_Date"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '5']/nga:XPath,'/','peci:Birth_Date')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCBirthdate5>
                        <nga:PHDCGender5>
                            <xsl:value-of select="nga:Child[nga:Count = '5']/peci:Gender"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '5']/nga:XPath,'/','peci:Gender')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGender5>
                    </xsl:if>
                    <xsl:if test="nga:Child/nga:Count = '6'">
                        <nga:PHDCLastName6>
                            <xsl:value-of select="nga:Child[nga:Count = '6']/peci:Last_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '6']/nga:XPath,'/','peci:Legal_Name/peci:Last_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCLastName6>
                        <nga:PHDCGivenName6>
                            <xsl:value-of select="nga:Child[nga:Count = '6']/peci:First_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '6']/nga:XPath,'/','peci:Legal_Name/peci:First_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGivenName6>
                        <nga:PHDCBirthdate6>
                            <xsl:value-of select="nga:Child[nga:Count = '6']/peci:Birth_Date"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '6']/nga:XPath,'/','peci:Birth_Date')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCBirthdate6>
                        <nga:PHDCGender6>
                            <xsl:value-of select="nga:Child[nga:Count = '6']/peci:Gender"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '6']/nga:XPath,'/','peci:Gender')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGender6>
                    </xsl:if>
                    <xsl:if test="nga:Child/nga:Count = '7'">
                        <nga:PHDCLastName7>
                            <xsl:value-of select="nga:Child[nga:Count = '7']/peci:Last_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '7']/nga:XPath,'/','peci:Legal_Name/peci:Last_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCLastName7>
                        <nga:PHDCGivenName7>
                            <xsl:value-of select="nga:Child[nga:Count = '7']/peci:First_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '7']/nga:XPath,'/','peci:Legal_Name/peci:First_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGivenName7>
                        <nga:PHDCBirthdate7>
                            <xsl:value-of select="nga:Child[nga:Count = '7']/peci:Birth_Date"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '7']/nga:XPath,'/','peci:Birth_Date')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCBirthdate7>
                        <nga:PHDCGender7>
                            <xsl:value-of select="nga:Child[nga:Count = '7']/peci:Gender"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '7']/nga:XPath,'/','peci:Gender')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGender7>
                    </xsl:if>
                    <xsl:if test="nga:Child/nga:Count = '8'">
                        <nga:PHDCLastName8>
                            <xsl:value-of select="nga:Child[nga:Count = '8']/peci:Last_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '8']/nga:XPath,'/','peci:Legal_Name/peci:Last_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCLastName8>
                        <nga:PHDCGivenName8>
                            <xsl:value-of select="nga:Child[nga:Count = '8']/peci:First_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '8']/nga:XPath,'/','peci:Legal_Name/peci:First_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGivenName8>
                        <nga:PHDCBirthdate8>
                            <xsl:value-of select="nga:Child[nga:Count = '8']/peci:Birth_Date"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '8']/nga:XPath,'/','peci:Birth_Date')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCBirthdate8>
                        <nga:PHDCGender8>
                            <xsl:value-of select="nga:Child[nga:Count = '8']/peci:Gender"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '8']/nga:XPath,'/','peci:Gender')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGender8>
                    </xsl:if>
                    <xsl:if test="nga:Child/nga:Count = '9'">
                        <nga:PHDCLastName9>
                            <xsl:value-of select="nga:Child[nga:Count = '9']/peci:Last_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '9']/nga:XPath,'/','peci:Legal_Name/peci:Last_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCLastName9>
                        <nga:PHDCGivenName9>
                            <xsl:value-of select="nga:Child[nga:Count = '9']/peci:First_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '9']/nga:XPath,'/','peci:Legal_Name/peci:First_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGivenName9>
                        <nga:PHDCBirthdate9>
                            <xsl:value-of select="nga:Child[nga:Count = '9']/peci:Birth_Date"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '9']/nga:XPath,'/','peci:Birth_Date')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCBirthdate9>
                        <nga:PHDCGender9>
                            <xsl:value-of select="nga:Child[nga:Count = '9']/peci:Gender"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '9']/nga:XPath,'/','peci:Gender')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGender9>
                    </xsl:if>
                    <xsl:if test="nga:Child/nga:Count = '10'">
                        <nga:PHDCLastName10>
                            <xsl:value-of select="nga:Child[nga:Count = '10']/peci:Last_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '10']/nga:XPath,'/','peci:Legal_Name/peci:Last_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCLastName10>
                        <nga:PHDCGivenName10>
                            <xsl:value-of select="nga:Child[nga:Count = '10']/peci:First_Name"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '10']/nga:XPath,'/','peci:Legal_Name/peci:First_Name')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGivenName10>
                        <nga:PHDCBirthdate10>
                            <xsl:value-of select="nga:Child[nga:Count = '10']/peci:Birth_Date"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '10']/nga:XPath,'/','peci:Birth_Date')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCBirthdate10>
                        <nga:PHDCGender10>
                            <xsl:value-of select="nga:Child[nga:Count = '10']/peci:Gender"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:Child[nga:Count = '10']/nga:XPath,'/','peci:Gender')"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PHDCGender10>
                    </xsl:if>
                </nga:PHDC>
            </nga:PH>
        </nga:LocalPayrollData>
    </xsl:template>  
    
    <!--      LocalPayroll for Mexico Personal Information -->
    <xsl:template name="peciLocalPayrollData_MXPI">        
        <nga:LocalPayrollData>
            <nga:MX>
                <nga:MXPI>
                    <xsl:if test="$effectiveMomentLP">
                        <xsl:attribute name="validFrom" select="$effectiveMomentLP"/>
                    </xsl:if>
                    <xsl:if test="string-length(peci:Personal/peci:Legal_Name/peci:Secondary_Last_Name) > 0">
                        <nga:MXPISecondLastName>
                            <xsl:value-of select="peci:Personal/peci:Legal_Name/peci:Secondary_Last_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Personal/peci:Legal_Name/peci:Secondary_Last_Name[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:MXPISecondLastName>
                    </xsl:if>
                </nga:MXPI>
            </nga:MX>            
        </nga:LocalPayrollData>
    </xsl:template>
    
    <!--      LocalPayroll for Greece Father's and Mother's Name    -->
    <xsl:template name="peciLocalPayrollData_GRAPD">
        <nga:LocalPayrollData>
            <nga:GR>
                <nga:GRAPD>       
                    <xsl:if test="$effectiveMomentLP">
                        <xsl:attribute name="validFrom" select="$effectiveMomentLP"/>
                    </xsl:if>                        
                        <nga:GRAPDFathersName>     
                            <xsl:value-of select="current-group()/nga:FathersName"/>
                        </nga:GRAPDFathersName> 
                        <nga:GRAPDMothersName>
                           <xsl:value-of select="current-group()/nga:MothersName"/>
                        </nga:GRAPDMothersName>        
                </nga:GRAPD>
            </nga:GR>
        </nga:LocalPayrollData>
    </xsl:template>
    
    <!--      Local Payroll Related Person Template    -->
    <xsl:template name="PECIRelatedPerson_JP">
        <xsl:param name="bodid"/>
        <xsl:param name="creationDateTime"/>
        <xsl:param name="personID"/>
        <xsl:param name="employeeID"/>
        <xsl:param name="effectiveMomentDate"/>      
        <xsl:param name="checkLogicalID"/>
        <xsl:variable name="relatedPersonValue">
            <xsl:call-template name="templateRelatedPerson">
                <xsl:with-param name="relatedPerson" select="peci:Relationship_Type"/>
            </xsl:call-template>            
        </xsl:variable>       
        <xsl:call-template name="usedPECIData">
            <xsl:with-param name="xpath">
                <xsl:for-each select="peci:Relationship_Type">
                    <xsl:call-template name="print-field-xpath"/> 
                </xsl:for-each>                       
            </xsl:with-param>
        </xsl:call-template>
        <nga:ProcessPayServEmp releaseID="{$releaseID}"
            systemEnvironmentCode="{$systemEnvironmentCode}" languageCode="{$languageCode}">
            <oa:ApplicationArea>
                <oa:Sender>
                    <oa:LogicalID>
                        <xsl:value-of select="$checkLogicalID"/>
                    </oa:LogicalID>
                    <oa:ComponentID>PAYROLL</oa:ComponentID>
                    <oa:ReferenceID>
                        <xsl:value-of select="$referenceID"/>
                    </oa:ReferenceID>
                    <oa:ConfirmationCode>Always</oa:ConfirmationCode>
                </oa:Sender>
                <oa:CreationDateTime>
                    <xsl:value-of select="$creationDateTime"/>
                </oa:CreationDateTime>
                <oa:BODID>
                    <xsl:value-of select="$bodid"/>
                </oa:BODID>
            </oa:ApplicationArea>
            <nga:DataArea>
                <oa:Process>
                    <oa:ActionCriteria>
                        <oa:ActionExpression actionCode="ADD"/>
                    </oa:ActionCriteria>
                </oa:Process>
                <nga:PayServEmp>
                    <hr:IndicativeData>
                        <hr:IndicativePersonDossier>
                            <hr:IndicativePerson>                                
                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                <hr:PersonID>
                                    <xsl:value-of select="$personID"/>
                                </hr:PersonID>
                            </hr:IndicativePerson>
                            <hr:IndicativeEmployee>                               
                                <hr:EmployeeID>
                                    <xsl:value-of select="$employeeID"/>
                                </hr:EmployeeID>
                            </hr:IndicativeEmployee>
                        </hr:IndicativePersonDossier>
                    </hr:IndicativeData>
                    <nga:PayServEmpExtension>
                        </nga:PayServEmpExtension>
                </nga:PayServEmp>
            </nga:DataArea>                 
        </nga:ProcessPayServEmp>
    </xsl:template>     

    
    
    
    
    
    
     <!--              Action Code           -->
    <xsl:template name="actionCodeTranslation">        
        <xsl:choose>
            <xsl:when test="@*[local-name() = 'isDeleted']">
                <xsl:value-of select="'DELETE'"/>
            </xsl:when>
            <xsl:when test="@*[local-name() = 'isAdded']">
                <xsl:value-of select="'ADD'"/>
            </xsl:when>
            <xsl:when test="@*[local-name() = 'isUpdated']">
                <xsl:value-of select="'CHANGE'"/>
            </xsl:when>
            <xsl:when test="@*[local-name() = 'priorValue']">
                <xsl:value-of select="'CHANGE'"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="'ADD'"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <!--     oa:ApplicationAreaTemplate     -->
    <xsl:template name="oa:ApplicationAreaTemplate">
        <xsl:param name="bodid"/>
        <xsl:param name="bodType"/>
        <xsl:param name="creationDateTime"/>
        <xsl:param name="checkLogicalID"/>
        <oa:ApplicationArea>
            <oa:Sender>
                <oa:LogicalID>
                    <xsl:value-of select="$checkLogicalID"/>
                </oa:LogicalID>
                <oa:ComponentID>
                    <xsl:choose>
                        <xsl:when test="$bodType = ('localReligionCH','localVisaCH','localPassportBR','localScriptNameKR','localJppdJP','localJpaddrJP','localJpfaJP','localPersonalInfoSG','localDepChildPH','localMXPI')">
                            <xsl:value-of select="'UX_ROR'"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="'PAYROLL'"/>
                        </xsl:otherwise>
                    </xsl:choose>                  
                </oa:ComponentID>
                <oa:ReferenceID>
                    <xsl:choose>
                        <xsl:when test="$bodType = 'localReligionCH'">
                            <xsl:value-of select="'CHELM'"/>
                        </xsl:when>
                        <xsl:when test="$bodType = 'localVisaCH'">
                            <xsl:value-of select="'CHRS'"/>
                        </xsl:when>
                        <xsl:when test="$bodType = 'localPassportBR'">
                            <xsl:value-of select="'BRDP'"/>
                        </xsl:when>
                        <xsl:when test="$bodType = 'localScriptNameKR'">
                            <xsl:value-of select="'KRPD'"/>
                        </xsl:when>
                        <xsl:when test="$bodType = 'localJppdJP'">
                            <xsl:value-of select="'JPPD'"/>
                        </xsl:when>
                        <xsl:when test="$bodType = 'localJpaddrJP'">
                            <xsl:value-of select="'JPADDR'"/>
                        </xsl:when>
                        <xsl:when test="$bodType = 'localJpfaJP'">
                            <xsl:value-of select="'JPFA'"/>
                        </xsl:when>
                        <xsl:when test="$bodType = 'localPersonalInfoSG'">
                            <xsl:value-of select="'SGPEI'"/>
                        </xsl:when>
                        <xsl:when test="$bodType = 'localDepChildPH'">
                            <xsl:value-of select="'PHDC'"/>
                        </xsl:when>
                        <xsl:when test="$bodType = 'localMXPI'">
                            <xsl:value-of select="'MXPI'"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="$referenceID"/>   
                        </xsl:otherwise>
                    </xsl:choose>      
                </oa:ReferenceID>
                <oa:ConfirmationCode>Always</oa:ConfirmationCode>
            </oa:Sender>
            <oa:CreationDateTime>
                <xsl:value-of select="$creationDateTime"/>
            </oa:CreationDateTime>
            <oa:BODID>
                <xsl:value-of select="$bodid"/>
            </oa:BODID>
        </oa:ApplicationArea>
    </xsl:template>

    <!--     hr:IndicativePersonTemplate     -->
    <xsl:template name="hr:IndicativePersonTemplate">
        <xsl:param name="hireDate"/>
        <xsl:param name="effectiveMomentDate"/>
        <xsl:param name="personID"/>
        <xsl:param name="bodType"/>
        <xsl:param name="countryAddressMapping"/>
        <xsl:param name="checkCountry"/>
        <xsl:param name="addressUsageBehavior"/>     
        <hr:IndicativePerson>
            <xsl:variable name="operation">
                <xsl:choose>
                    <xsl:when test="$bodType = 'personLegalIdAdd'">
                        <xsl:value-of select="'isAdded'"/>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="$bodType = 'personLegalIdUpdate'">
                        <xsl:value-of select="'isUpdated'"/>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="$bodType = 'personLegalIdDelete'">
                        <xsl:value-of select="'isDeleted'"/>
                    </xsl:when>
                </xsl:choose>
            </xsl:variable>
            <xsl:choose>
                <xsl:when test="$bodType = ('personal','personLegalIdMain','personLegalIdAdd','personLegalIdUpdate','personLegalIdDelete')">
                    <xsl:attribute name="validFrom">             
                        <xsl:value-of select="$effectiveMomentDate"/>
                    </xsl:attribute>
                </xsl:when>
                <xsl:when test="$bodType = 'workerStatusActive'">
                    <xsl:if test="peci:Hire_Date">
                        <xsl:attribute name="validFrom">             
                            <xsl:value-of select="substring(peci:Hire_Date,1,10)"/>
                        </xsl:attribute>
                    </xsl:if>            
                    <xsl:call-template name="usedPECIData">
                        <xsl:with-param name="xpath">
                            <xsl:for-each select="peci:Hire_Date">
                                <xsl:call-template name="print-field-xpath"/> 
                            </xsl:for-each>                       
                        </xsl:with-param>
                    </xsl:call-template>
                </xsl:when>
            </xsl:choose>
            <hr:PersonID>
                <xsl:value-of select="$personID"/>
            </hr:PersonID>          
            <xsl:if test="$bodType = ('personal','personLegalIdMain','personLegalIdAdd','personLegalIdUpdate','personLegalIdDelete')">
                <xsl:choose>                    
                    <xsl:when test="$bodType = 'personLegalIdMain'">
                        <!-- National Identifier Mapping -->              
                        <xsl:choose>
                            <xsl:when test="string-length($positionHomeOrHost) > 0">
                                <xsl:for-each select="peci:National_Identifier[peci:Country = $payGroupCountry]">
                                    <xsl:variable name="personalLegalID">
                                        <xsl:call-template name="templateNationalIDType">
                                            <xsl:with-param name="NationalIDType" select="peci:National_ID_Type"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:if test="string-length($personalLegalID) > 0">
                                        <xsl:element name="hr:PersonLegalID">
                                            <xsl:attribute name="schemeName" select="$personalLegalID"/>
                                            <xsl:value-of select="translate(peci:National_ID,$removeChars,'')"/>
                                        </xsl:element>
                                    </xsl:if>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:National_ID_Type">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:National_ID">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:for-each>
                                <!-- Government Identifier Mapping -->
                                <xsl:for-each select="peci:Government_Identifier[peci:Country = $payGroupCountry]">
                                    <xsl:variable name="governmentID">
                                        <xsl:call-template name="templateNationalIDType">
                                            <xsl:with-param name="NationalIDType" select="peci:Government_ID_Type"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:if test="string-length($governmentID) > 0">
                                        <xsl:element name="hr:PersonLegalID">
                                            <xsl:attribute name="schemeName" select="$governmentID"/>
                                            <xsl:value-of select="translate(peci:Government_ID,$removeChars,'')"/>
                                        </xsl:element>                                     
                                    </xsl:if>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Government_ID_Type">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Government_ID">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:for-each>                                
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:for-each select="peci:National_Identifier">
                                    <xsl:variable name="personalLegalID">
                                        <xsl:call-template name="templateNationalIDType">
                                            <xsl:with-param name="NationalIDType" select="peci:National_ID_Type"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:if test="string-length($personalLegalID) > 0">
                                        <xsl:element name="hr:PersonLegalID">
                                            <xsl:attribute name="schemeName" select="$personalLegalID"/>
                                            <xsl:value-of select="translate(peci:National_ID,$removeChars,'')"/>
                                        </xsl:element>
                                    </xsl:if>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:National_ID_Type">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:National_ID">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:for-each>
                                <!-- Government Identifier Mapping -->
                                <xsl:for-each select="peci:Government_Identifier">
                                    <xsl:variable name="governmentID">
                                        <xsl:call-template name="templateNationalIDType">
                                            <xsl:with-param name="NationalIDType" select="peci:Government_ID_Type"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:if test="string-length($governmentID) > 0">
                                        <xsl:element name="hr:PersonLegalID">
                                            <xsl:attribute name="schemeName" select="$governmentID"/>
                                            <xsl:value-of select="translate(peci:Government_ID,$removeChars,'')"/>
                                        </xsl:element>
                                    </xsl:if>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Government_ID_Type">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Government_ID">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:for-each>
                                <!-- Other Identifier Mapping -->
                                <xsl:for-each select="peci:Other_Identifier">
                                    <xsl:variable name="otherID">
                                        <xsl:call-template name="templateNationalIDType">
                                            <xsl:with-param name="NationalIDType" select="peci:Custom_ID_Type"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:if test="string-length($otherID) > 0">
                                        <xsl:element name="hr:PersonLegalID">
                                            <xsl:attribute name="schemeName" select="$otherID"/>
                                            <xsl:value-of select="translate(peci:Custom_ID,$removeChars,'')"/>
                                        </xsl:element>
                                    </xsl:if>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Custom_ID_Type">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Custom_ID">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:for-each>
                                <!-- Passport Mapping -->
                                <xsl:for-each select="peci:Passport">
                                    <xsl:element name="hr:PersonLegalID">
                                        <xsl:attribute name="schemeName" select="'GL-PPN'"/>
                                        <xsl:value-of select="peci:Passport_ID[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                    </xsl:element>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Passport_ID[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:for-each>    
                            </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>     
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="string-length($positionHomeOrHost) > 0">
                                <xsl:for-each select="../peci:National_Identifier[@*[local-name() = $operation]][peci:Country = $payGroupCountry]">
                                    <xsl:variable name="personalLegalID">
                                        <xsl:call-template name="templateNationalIDType">
                                            <xsl:with-param name="NationalIDType" select="peci:National_ID_Type"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:if test="string-length($personalLegalID) > 0">
                                        <xsl:element name="hr:PersonLegalID">
                                            <xsl:attribute name="schemeName" select="$personalLegalID"/>
                                            <xsl:value-of select="translate(peci:National_ID,$removeChars,'')"/>
                                        </xsl:element>
                                    </xsl:if>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:National_ID_Type">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:National_ID">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:for-each>
                                <!-- Government Identifier Mapping -->
                                <xsl:for-each select="../peci:Government_Identifier[@*[local-name() = $operation]][peci:Country = $payGroupCountry]">
                                    <xsl:variable name="governmentID">
                                        <xsl:call-template name="templateNationalIDType">
                                            <xsl:with-param name="NationalIDType" select="peci:Government_ID_Type"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:if test="string-length($governmentID) > 0">
                                        <xsl:element name="hr:PersonLegalID">
                                            <xsl:attribute name="schemeName" select="$governmentID"/>
                                            <xsl:value-of select="translate(peci:Government_ID,$removeChars,'')"/>
                                        </xsl:element>
                                    </xsl:if>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Government_ID_Type">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Government_ID">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:for-each>
                            </xsl:when>
                            <xsl:otherwise>
                                <!-- National Identifier Mapping -->              
                                <xsl:for-each select="../peci:National_Identifier[@*[local-name() = $operation]]">
                                    <xsl:variable name="personalLegalID">
                                        <xsl:call-template name="templateNationalIDType">
                                            <xsl:with-param name="NationalIDType" select="peci:National_ID_Type"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:if test="string-length($personalLegalID) > 0">
                                        <xsl:element name="hr:PersonLegalID">
                                            <xsl:attribute name="schemeName" select="$personalLegalID"/>
                                            <xsl:value-of select="translate(peci:National_ID,$removeChars,'')"/>
                                        </xsl:element>
                                    </xsl:if>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:National_ID_Type">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:National_ID">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:for-each>
                                <!-- Government Identifier Mapping -->
                                <xsl:for-each select="../peci:Government_Identifier[@*[local-name() = $operation]]">
                                    <xsl:variable name="governmentID">
                                        <xsl:call-template name="templateNationalIDType">
                                            <xsl:with-param name="NationalIDType" select="peci:Government_ID_Type"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:if test="string-length($governmentID) > 0">
                                        <xsl:element name="hr:PersonLegalID">
                                            <xsl:attribute name="schemeName" select="$governmentID"/>
                                            <xsl:value-of select="translate(peci:Government_ID,$removeChars,'')"/>
                                        </xsl:element>
                                    </xsl:if>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Government_ID_Type">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Government_ID">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:for-each>
                                <!-- Other Identifier Mapping -->
                                <xsl:for-each select="../peci:Other_Identifier[@*[local-name() = $operation]]">
                                    <xsl:variable name="otherID">
                                        <xsl:call-template name="templateNationalIDType">
                                            <xsl:with-param name="NationalIDType" select="peci:Custom_ID_Type"/>
                                        </xsl:call-template>
                                    </xsl:variable>
                                    <xsl:if test="string-length($otherID) > 0">
                                        <xsl:element name="hr:PersonLegalID">
                                            <xsl:attribute name="schemeName" select="$otherID"/>
                                            <xsl:value-of select="translate(peci:Custom_ID,$removeChars,'')"/>
                                        </xsl:element>
                                    </xsl:if>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Custom_ID_Type">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Custom_ID">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:for-each>
                                <!-- Passport Mapping -->
                                <xsl:for-each select="../peci:Passport[@*[local-name() = $operation]]">
                                    <xsl:element name="hr:PersonLegalID">
                                        <xsl:attribute name="schemeName" select="'GL-PPN'"/>
                                        <xsl:value-of select="peci:Passport_ID[@*[local-name() = 'isAdded'] or string-length(@*[local-name()]) = 0]"/>
                                    </xsl:element>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Passport_ID[@*[local-name() = 'isAdded'] or string-length(@*[local-name()]) = 0]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:for-each>   
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:otherwise>                     
                </xsl:choose>        
                
                <xsl:variable name="personNameFlag">
                    <xsl:value-of select="concat(peci:Preferred_Name[@*[local-name()]]/peci:First_Name[@*[local-name()]],peci:Legal_Name[@*[local-name()]]/peci:First_Name[@*[local-name()]],peci:Legal_Name[@*[local-name()]]/peci:Middle_Name[@*[local-name()]],
                        peci:Preferred_Name[@*[local-name()]]/peci:Last_Name[@*[local-name()]],peci:Legal_Name[@*[local-name()]]/peci:Last_Name[@*[local-name()]],peci:Additional_Name[@*[local-name()]]/peci:Name_Type,peci:Legal_Name[@*[local-name()]]/peci:Title[@*[local-name()]],
                        peci:Legal_Name[@*[local-name()]]/peci:Salutation[@*[local-name()]],peci:Legal_Name[@*[local-name()]]/peci:Social_Suffix[@*[local-name()]],peci:Legal_Name[@*[local-name()]]/peci:First_Name_Local[@*[local-name()]],
                        peci:Legal_Name[@*[local-name()]]/peci:Last_Name_Local[@*[local-name()]],peci:Legal_Name[@*[local-name()]]/peci:Middle_Name_Local[@*[local-name()]],peci:Legal_Name[@*[local-name()]]/peci:Secondary_Last_Name[@*[local-name()]])"/>
                </xsl:variable>               
                
                <xsl:if test="string-length($personNameFlag) > 0">
                    <hr:PersonName>
                        <xsl:if test="string-length(peci:Preferred_Name[@*[local-name()]]/peci:First_Name[@*[local-name()]]) > 0 or string-length(peci:Legal_Name[@*[local-name()]]/peci:First_Name[@*[local-name()]]) > 0">
                            <oa:GivenName>
                                <xsl:choose>
                                    <xsl:when test="peci:Preferred_Name[@*[local-name()]]/peci:Country = 'JP'">
                                        <xsl:value-of select="peci:Preferred_Name[@*[local-name()]]/peci:First_Name[@*[local-name() != 'isDeleted']]"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Preferred_Name[@*[local-name()]]/peci:First_Name[@*[local-name() != 'isDeleted']]">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="peci:Legal_Name[@*[local-name()]]/peci:First_Name[@*[local-name()]]">
                                            <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:First_Name[@*[local-name() != 'isDeleted']]"/>  
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Legal_Name[@*[local-name()]]/peci:First_Name[@*[local-name() != 'isDeleted']]">
                                                        <xsl:call-template name="print-field-xpath"/> 
                                                    </xsl:for-each>                       
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </xsl:if>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </oa:GivenName>     
                        </xsl:if>
                        
                        <xsl:if test="string-length(peci:Legal_Name[@*[local-name()]]/peci:Middle_Name[@*[local-name()]]) > 0">
                            <hr:MiddleName>
                                <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:Middle_Name[@*[local-name() != 'isDeleted']]"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Legal_Name[@*[local-name()]]/peci:Middle_Name[@*[local-name() != 'isDeleted']]">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </hr:MiddleName>
                        </xsl:if>
                        <xsl:if test="string-length(peci:Preferred_Name[@*[local-name()]]/peci:Last_Name[@*[local-name()]]) > 0 or string-length(peci:Legal_Name[@*[local-name()]]/peci:Last_Name[@*[local-name()]]) > 0">
                            <hr:FamilyName>
                                <xsl:if test="string-length(peci:Legal_Name[@*[local-name()]]/peci:Hereditary[@*[local-name() != 'isDeleted']]) > 0">
                                    <xsl:attribute name="prefix">
                                        <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:Hereditary[@*[local-name() != 'isDeleted']]"/>
                                    </xsl:attribute>
                                </xsl:if>            
                                <xsl:choose>
                                    <xsl:when test="peci:Preferred_Name[@*[local-name()]]/peci:Country = 'JP'">
                                        <xsl:value-of select="peci:Preferred_Name[@*[local-name()]]/peci:Last_Name[@*[local-name() != 'isDeleted']]"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Preferred_Name[@*[local-name()]]/peci:Last_Name[@*[local-name() != 'isDeleted']]">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="peci:Legal_Name[@*[local-name()]]/peci:Last_Name[@*[local-name()]]">
                                            <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:Last_Name[@*[local-name() != 'isDeleted']]"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Legal_Name[@*[local-name()]]/peci:Last_Name[@*[local-name() != 'isDeleted']]">
                                                        <xsl:call-template name="print-field-xpath"/> 
                                                    </xsl:for-each>                       
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </xsl:if>                                
                                    </xsl:otherwise>
                                </xsl:choose>                            
                            </hr:FamilyName>
                        </xsl:if>
                        <xsl:if test="peci:Legal_Name[@*[local-name()]]/peci:Secondary_Last_Name[@*[local-name()]] and peci:Legal_Name/peci:Country= $secondaryLastName/value">
                            <hr:FamilyName>
                                <xsl:attribute name="primaryIndicator" select="'false'"/>
                                <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:Secondary_Last_Name[@*[local-name() != 'isDeleted']]"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Legal_Name[@*[local-name()]]/peci:Secondary_Last_Name[@*[local-name() != 'isDeleted']]">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </hr:FamilyName>
                        </xsl:if>
                        <xsl:if test="peci:Additional_Name[@*[local-name()]]/peci:Name_Type = 'Maiden'">
                            <hr:FormerFamilyName>
                                <xsl:value-of select="peci:Additional_Name[@*[local-name()]]/peci:Last_Name[@*[local-name() != 'isDeleted']]"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Additional_Name[@*[local-name()]]/peci:Last_Name[@*[local-name() != 'isDeleted']]">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </hr:FormerFamilyName>
                        </xsl:if>
                        <xsl:variable name="saluteCode">
                            <xsl:call-template name="templatePrefSaluteCode">
                                <xsl:with-param name="prefSaluteCode"
                                    select="peci:Legal_Name[@*[local-name()]]/peci:Title[@*[local-name() != 'isDeleted']]"/>
                            </xsl:call-template>
                        </xsl:variable>
                        <xsl:variable name="altSaluteCode">
                            <xsl:call-template name="templatePrefSaluteCode">
                                <xsl:with-param name="prefSaluteCode"
                                    select="peci:Legal_Name[@*[local-name()]]/peci:Salutation[@*[local-name() != 'isDeleted']]"/>
                            </xsl:call-template>
                        </xsl:variable>
                        <xsl:if test="string-length($saluteCode)>0 or string-length($altSaluteCode) > 0">
                            <hr:PreferredSalutationCode>
                                <xsl:choose>
                                    <xsl:when test="string-length($saluteCode) > 0">
                                        <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:Title[@*[local-name() != 'isDeleted']]"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Legal_Name[@*[local-name()]]/peci:Title[@*[local-name() != 'isDeleted']]">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </xsl:when>
                                    <xsl:when test="string-length($altSaluteCode) > 0">
                                        <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:Salutation[@*[local-name() != 'isDeleted']]"/>
                                        <xsl:call-template name="usedPECIData"> 
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Legal_Name[@*[local-name()]]/peci:Salutation[@*[local-name() != 'isDeleted']]">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </xsl:when>
                                </xsl:choose>
                            </hr:PreferredSalutationCode>
                        </xsl:if>
                        <xsl:variable name="generationCode">
                            <xsl:call-template name="templateGenAffixCode">
                                <xsl:with-param name="genAffixCode"
                                    select="peci:Legal_Name[@*[local-name()]]/peci:Social_Suffix[@*[local-name() != 'isDeleted']]"/>
                            </xsl:call-template>
                        </xsl:variable>
                        <xsl:if test="string-length($generationCode) > 0">
                            <hr:GenerationAffixCode>
                                <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:Social_Suffix[@*[local-name() != 'isDeleted']]"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Legal_Name[@*[local-name()]]/peci:Social_Suffix[@*[local-name() != 'isDeleted']]">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </hr:GenerationAffixCode>
                        </xsl:if>
                        <xsl:variable name="qualificationCode">
                            <xsl:call-template name="templateQualAffixCode">
                                <xsl:with-param name="qualAffixCode"
                                    select="peci:Legal_Name[@*[local-name()]]/peci:Social_Suffix[@*[local-name() != 'isDeleted']]"/>
                            </xsl:call-template>
                        </xsl:variable>
                        <xsl:variable name="addQualificationCode">
                            <xsl:call-template name="templateAddQualAffixCode">
                                <xsl:with-param name="addQualAffixCode"
                                    select="peci:Legal_Name[@*[local-name()]]/peci:Title[@*[local-name() != 'isDeleted']]"/>
                            </xsl:call-template>
                        </xsl:variable>
                        <xsl:choose>
                            <xsl:when test="string-length($addQualificationCode) > 0">
                                <hr:QualificationAffixCode>
                                    <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:Title[@*[local-name() != 'isDeleted']]"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Legal_Name[@*[local-name()]]/peci:Title[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:QualificationAffixCode>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:if test="string-length($qualificationCode) > 0">
                                    <hr:QualificationAffixCode>
                                        <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:Social_Suffix[@*[local-name() != 'isDeleted']]"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Legal_Name[@*[local-name()]]/peci:Social_Suffix[@*[local-name() != 'isDeleted']]">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </hr:QualificationAffixCode>
                                </xsl:if>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:variable name="titleCode">
                            <xsl:call-template name="templateTitleAffixCode">
                                <xsl:with-param name="titleAffixCode"
                                    select="peci:Legal_Name[@*[local-name()]]/peci:Social_Suffix[@*[local-name() != 'isDeleted']]"/>
                            </xsl:call-template>
                        </xsl:variable>
                        <xsl:if test="string-length($titleCode) > 0">
                            <hr:TitleAffixCode>
                                <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:Social_Suffix[@*[local-name() != 'isDeleted']]"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Legal_Name[@*[local-name()]]/peci:Social_Suffix[@*[local-name() != 'isDeleted']]">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </hr:TitleAffixCode>
                        </xsl:if>     
                        <xsl:if test="string-length(peci:Legal_Name/peci:Secondary_Last_Name[@*[local-name()]]) > 0 and peci:Legal_Name/peci:Country = ('NL','ZA')">
                            <hr:PersonNameInitials>
                                <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:Secondary_Last_Name[@*[local-name() != 'isDeleted']]"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Legal_Name[@*[local-name()]]/peci:Secondary_Last_Name[@*[local-name() != 'isDeleted']]">
                                            <xsl:call-template name="print-field-xpath"/>            
                                        </xsl:for-each>   
                                    </xsl:with-param>
                                </xsl:call-template>  
                            </hr:PersonNameInitials>
                        </xsl:if>             
                        <xsl:variable name="localNameFlag">
                            <xsl:value-of select="concat(peci:Legal_Name[@*[local-name()]]/peci:First_Name_Local[@*[local-name()]],peci:Legal_Name[@*[local-name()]]/peci:Middle_Name_Local[@*[local-name()]],peci:Legal_Name[@*[local-name()]]/peci:Last_Name_Local[@*[local-name()]],
                                                         peci:Legal_Name[@*[local-name()]]/peci:Name_in_Local_Script[@*[local-name()]])"/>
                        </xsl:variable>
                        <xsl:if test="string-length($localNameFlag) > 0">
                            <hr:AlternateScriptPersonName>
                                <xsl:if test="string-length(peci:Legal_Name[@*[local-name()]]/peci:Name_in_Local_Script[@*[local-name()]]) > 0">
                                    <hr:FormattedName>
                                        <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:Name_in_Local_Script[@*[local-name()]]"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Legal_Name/peci:Name_in_Local_Script">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </hr:FormattedName>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Legal_Name[@*[local-name()]]/peci:First_Name_Local[@*[local-name()]]) > 0">
                                    <oa:GivenName>
                                        <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:First_Name_Local[@*[local-name() != 'isDeleted']]"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Legal_Name[@*[local-name()]]/peci:First_Name_Local[@*[local-name() != 'isDeleted']]">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </oa:GivenName>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Legal_Name[@*[local-name()]]/peci:Middle_Name_Local[@*[local-name()]]) > 0">
                                    <hr:MiddleName>
                                        <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:Middle_Name_Local[@*[local-name() != 'isDeleted']]"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Legal_Name[@*[local-name()]]/peci:Middle_Name_Local[@*[local-name() != 'isDeleted']]">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </hr:MiddleName>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Legal_Name[@*[local-name()]]/peci:Last_Name_Local[@*[local-name()]]) > 0">
                                    <hr:FamilyName>
                                        <xsl:value-of select="peci:Legal_Name[@*[local-name()]]/peci:Last_Name_Local[@*[local-name() != 'isDeleted']]"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Legal_Name[@*[local-name()]]/peci:Last_Name_Local[@*[local-name() != 'isDeleted']]">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </hr:FamilyName>
                                </xsl:if>                                                
                            </hr:AlternateScriptPersonName>
                        </xsl:if>            
                    </hr:PersonName>                    
                </xsl:if>
                <!--<xsl:for-each select="../peci:Person_Communication/peci:Phone">
                    <xsl:variable name="RemoveChars" select="' []()-/.,'"/>
                    <hr:Communication>
                        <hr:ChannelCode>Telephone</hr:ChannelCode>
                        <hr:UseCode>
                            <xsl:value-of select="lower-case(peci:Usage_Type)"/>
                        </hr:UseCode>
                        <xsl:if test="string-length(peci:Area_Code) > 0">
                            <oa:AreaDialing>
                                <xsl:value-of select="peci:Area_Code"/>
                            </oa:AreaDialing>
                        </xsl:if>
                        <oa:DialNumber>
                            <xsl:value-of select="translate(normalize-space(peci:Phone_Number_With_Country_Code),$RemoveChars,'')"/>
                        </oa:DialNumber>
                        <xsl:if test="string-length(peci:Extension) > 0">
                            <oa:Extension>
                                <xsl:value-of select="peci:Extension"/>
                            </oa:Extension>
                        </xsl:if>
                    </hr:Communication>
                </xsl:for-each>       -->
                <xsl:for-each select="../peci:Person_Communication[@*[local-name()]]/peci:Email[@*[local-name()]]">
                    <xsl:if test="peci:Usage_Type = 'WORK' and peci:Email_Address">
                        <hr:Communication>
                            <hr:ChannelCode>Email</hr:ChannelCode>
                            <hr:UseCode>Business</hr:UseCode>
                            <oa:URI>
                                <xsl:choose>
                                    <xsl:when test=".[@*[local-name() = 'isDeleted']]">
                                        <xsl:value-of select="''"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:value-of select=".[@*[local-name()]]/peci:Email_Address[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                    </xsl:otherwise>
                                </xsl:choose>                                
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select=".[@*[local-name()]]/peci:Email_Address">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </oa:URI>
                        </hr:Communication>
                    </xsl:if>
                </xsl:for-each>    
                
                <!--        Country Specific Address Mapping        -->                
                <xsl:choose>
                    <xsl:when test="$positionHomeOrHost = 'Host' and $checkHostCountry =''">
                        <xsl:for-each select="../peci:Person_Communication[@*[local-name()]]/peci:Address[@*[local-name() != 'isDeleted']][peci:Country = $payGroupCountry]">
                            <xsl:variable name="addressPosiiton" select=".[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) > 0]"/>
                            <xsl:for-each select="peci:Usage[peci:Usage_Behavior_ID = 'International Assignment']">                                
                                <xsl:variable name="usage" select="lower-case(concat(../peci:Usage_Type,'_',translate(peci:Usage_Behavior_ID,' ','_')))"/>                        
                                <xsl:variable name="type" select="$addressUsageBehavior/Rows[KEY = $usage]/VALUE"/>
                                <xsl:if test="string-length($type) > 0">
                                    <xsl:choose>
                                        <xsl:when test="../peci:Country = $checkCountry">
                                            <xsl:call-template name="PECICountrySpecificAddress">
                                                <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                                <xsl:with-param name="country" select="../peci:Country"/>                                                        
                                                <xsl:with-param name="validFrom" select="$effectiveMomentDate"/>                                                       
                                                <xsl:with-param name="addressPosiiton" select="$addressPosiiton"/>
                                                <xsl:with-param name="type" select="$type"/>
                                            </xsl:call-template>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:call-template name="PECIGenericAddress">
                                                <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                                <xsl:with-param name="type" select="$type"/>
                                            </xsl:call-template>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:if>                       
                            </xsl:for-each>                                
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="$positionHomeOrHost = 'Home' and $checkHomeCountry =''">
                        <xsl:for-each select="../peci:Person_Communication[@*[local-name()]]/peci:Address[@*[local-name() != 'isDeleted']][peci:Country = $payGroupCountry]">
                            <xsl:variable name="addressPosiiton" select=".[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) > 0]"/>                                
                            <xsl:for-each select="peci:Usage[peci:Usage_Behavior_ID != 'International Assignment']">                                
                                <xsl:variable name="usage" select="lower-case(concat(../peci:Usage_Type,'_',translate(peci:Usage_Behavior_ID,' ','_')))"/>                        
                                <xsl:variable name="type" select="$addressUsageBehavior/Rows[KEY = $usage]/VALUE"/>
                                <xsl:if test="string-length($type) > 0">
                                    <xsl:choose>
                                        <xsl:when test="$payGroupCountry = $checkCountry">
                                            <xsl:call-template name="PECICountrySpecificAddress">
                                                <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                                <xsl:with-param name="country" select="$payGroupCountry"/>                                                        
                                                <xsl:with-param name="validFrom" select="$effectiveMomentDate"/>                                                       
                                                <xsl:with-param name="addressPosiiton" select="$addressPosiiton"/>
                                                <xsl:with-param name="type" select="$type"/>
                                            </xsl:call-template>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:call-template name="PECIGenericAddress">
                                                <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                                <xsl:with-param name="type" select="$type"/>
                                            </xsl:call-template>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:if>                       
                            </xsl:for-each>              
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="$positionHomeOrHost = 'Host' and $checkHostCountry ='Y'">
                        <xsl:for-each select="../peci:Person_Communication[@*[local-name()]]/peci:Address[@*[local-name() != 'isDeleted']][peci:Country = $payGroupCountry]">
                            <xsl:variable name="addressPosiiton" select=".[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) > 0]"/>            
                            <xsl:for-each select="peci:Usage">                                
                                <xsl:variable name="usage" select="lower-case(concat(../peci:Usage_Type,'_',translate(peci:Usage_Behavior_ID,' ','_')))"/>                        
                                <xsl:variable name="type" select="$addressUsageBehavior/Rows[KEY = $usage]/VALUE"/>
                                <xsl:if test="string-length($type) > 0">
                                    <xsl:choose>
                                        <xsl:when test="$payGroupCountry = $checkCountry">
                                            <xsl:call-template name="PECICountrySpecificAddress">
                                                <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                                <xsl:with-param name="country" select="$payGroupCountry"/>                                                        
                                                <xsl:with-param name="validFrom" select="$effectiveMomentDate"/>                                                       
                                                <xsl:with-param name="addressPosiiton" select="$addressPosiiton"/>
                                                <xsl:with-param name="type" select="$type"/>
                                            </xsl:call-template>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:call-template name="PECIGenericAddress">
                                                <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                                <xsl:with-param name="type" select="$type"/>
                                            </xsl:call-template>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:if>                       
                            </xsl:for-each>      
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="$positionHomeOrHost = 'Home' and $checkHomeCountry ='Y'">
                        <xsl:for-each select="../peci:Person_Communication[@*[local-name()]]/peci:Address[@*[local-name() != 'isDeleted']][peci:Country = $payGroupCountry]">
                            <xsl:variable name="addressPosiiton" select=".[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) > 0]"/>      
                            <xsl:for-each select="peci:Usage">                                
                                <xsl:variable name="usage" select="lower-case(concat(../peci:Usage_Type,'_',translate(peci:Usage_Behavior_ID,' ','_')))"/>                        
                                <xsl:variable name="type" select="$addressUsageBehavior/Rows[KEY = $usage]/VALUE"/>
                                <xsl:if test="string-length($type) > 0">
                                    <xsl:choose>
                                        <xsl:when test="$payGroupCountry = $checkCountry">
                                            <xsl:call-template name="PECICountrySpecificAddress">
                                                <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                                <xsl:with-param name="country" select="$payGroupCountry"/>                                                        
                                                <xsl:with-param name="validFrom" select="$effectiveMomentDate"/>                                                       
                                                <xsl:with-param name="addressPosiiton" select="$addressPosiiton"/>
                                                <xsl:with-param name="type" select="$type"/>
                                            </xsl:call-template>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:call-template name="PECIGenericAddress">
                                                <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                                <xsl:with-param name="type" select="$type"/>
                                            </xsl:call-template>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:if>                       
                            </xsl:for-each>                   
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="../peci:Person_Communication[@*[local-name()]]/peci:Address[@*[local-name() != 'isDeleted']][peci:Usage/peci:Usage_Behavior_ID != 'International Assignment']">
                            <xsl:variable name="addressPosiiton" select=".[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) > 0]"/>
                            <xsl:choose>
                                <xsl:when test="count(peci:Usage) = 0">
                                    <xsl:variable name="tempUsage" select="lower-case(concat(peci:Usage_Type,'_'))"/>                        
                                    <xsl:variable name="type" select="$addressUsageBehavior/Rows[KEY = $tempUsage]/VALUE"/>
                                    <xsl:if test="string-length($type) > 0">
                                        <xsl:choose>
                                            <xsl:when test="peci:Country = $checkCountry">
                                                <xsl:call-template name="PECICountrySpecificAddress">
                                                    <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                                    <xsl:with-param name="country" select="peci:Country"/>                                                        
                                                    <xsl:with-param name="validFrom" select="$effectiveMomentDate"/>                                                       
                                                    <xsl:with-param name="addressPosiiton" select="$addressPosiiton"/>
                                                    <xsl:with-param name="type" select="$type"/>
                                                </xsl:call-template>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:call-template name="PECIGenericAddress">
                                                    <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                                    <xsl:with-param name="type" select="$type"/>
                                                </xsl:call-template>
                                            </xsl:otherwise>
                                        </xsl:choose>                                             
                                    </xsl:if>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:for-each select="peci:Usage">
                                        <xsl:variable name="usage" select="lower-case(concat(../peci:Usage_Type,'_',translate(peci:Usage_Behavior_ID,' ','_')))"/>                        
                                        <xsl:variable name="type" select="$addressUsageBehavior/Rows[KEY = $usage]/VALUE"/>
                                        <xsl:if test="string-length($type) > 0">
                                            <xsl:choose>
                                                <xsl:when test="../peci:Country = $checkCountry">
                                                    <xsl:call-template name="PECICountrySpecificAddress">
                                                        <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                                        <xsl:with-param name="country" select="../peci:Country"/>                                                        
                                                        <xsl:with-param name="validFrom" select="$effectiveMomentDate"/>                                                       
                                                        <xsl:with-param name="addressPosiiton" select="$addressPosiiton"/>
                                                        <xsl:with-param name="type" select="$type"/>
                                                    </xsl:call-template>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:call-template name="PECIGenericAddress">
                                                        <xsl:with-param name="effectiveMomentDate" select="$effectiveMomentDate"/>
                                                        <xsl:with-param name="type" select="$type"/>
                                                    </xsl:call-template>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </xsl:if>                       
                                    </xsl:for-each>                              
                                </xsl:otherwise>
                            </xsl:choose>
                            <!--   Country Specific Local Address Mapping   -->
                            <xsl:if test="peci:Country = distinct-values($countryAddressMapping/Rows[MAPPING='PECILocalAddress']/COUNTRY)">
                                <xsl:call-template name="LocalAddressMapping">
                                    <xsl:with-param name="validFrom" select="$effectiveMomentDate"/>
                                    <xsl:with-param name="country" select="peci:Country"/>    
                                    <xsl:with-param name="countryAddressMapping" select="$countryAddressMapping"/>
                                    <xsl:with-param name="addressPosiiton" select="$addressPosiiton"/>
                                </xsl:call-template>
                            </xsl:if>     
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
                      
                <xsl:if test="string-length(peci:Date_of_Birth[@*[local-name()]]) > 0">
                    <hr:BirthDate>
                        <xsl:value-of select="substring(peci:Date_of_Birth[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Date_of_Birth[@*[local-name()]]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </hr:BirthDate>
                </xsl:if>
                <xsl:variable name="birthPlace">
                    <xsl:value-of select="concat(peci:City_of_Birth[@*[local-name()]],peci:Region_of_Birth[@*[local-name()]],peci:Country_of_Birth[@*[local-name()]])"/>
                </xsl:variable>
                <xsl:if test="string-length($birthPlace) > 0">
                    <hr:BirthPlace>
                        <xsl:if test="peci:City_of_Birth[@*[local-name()]]">
                            <oa:CityName>
                                <xsl:value-of select="peci:City_of_Birth[@*[local-name() != 'isDeleted']]"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:City_of_Birth[@*[local-name() != 'isDeleted']]">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </oa:CityName>
                        </xsl:if>
                        <xsl:if test="peci:Region_of_Birth[@*[local-name()]]">
                            <oa:CountrySubDivisionCode>
                                <xsl:value-of select="substring-after(peci:Region_of_Birth[@*[local-name() != 'isDeleted']],'-')"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Region_of_Birth[@*[local-name() != 'isDeleted']]">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>                              
                            </oa:CountrySubDivisionCode>
                        </xsl:if>
                        <xsl:if test="peci:Country_of_Birth[@*[local-name()]]">
                            <hr:CountryCode>
                                <xsl:value-of select="peci:Country_of_Birth[@*[local-name() != 'isDeleted']]"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Country_of_Birth[@*[local-name() != 'isDeleted']]">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </hr:CountryCode>
                        </xsl:if>
                    </hr:BirthPlace>
                </xsl:if>
                <xsl:if test="peci:Gender[@*[local-name()]]">
                    <hr:GenderCode>
                        <xsl:call-template name="templateGender">
                            <xsl:with-param name="GenderCode" select="peci:Gender[@*[local-name() != 'isDeleted']]"/>
                        </xsl:call-template>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Gender[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </hr:GenderCode>
                </xsl:if>
                <xsl:if test="peci:Marital_Status[@*[local-name()]] or peci:Marital_Status_Date[@*[local-name()]]">
                    <hr:CertifiedMaritalStatus>
                        <xsl:if test="peci:Marital_Status_Date[@*[local-name() != 'isDeleted']]">
                            <xsl:attribute name="certifiedDate" select="substring(peci:Marital_Status_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Marital_Status_Date[@*[local-name() != 'isDeleted'] or @*[local-name()]]">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:if> 
                        <xsl:if test="peci:Marital_Status[@*[local-name()]]">
                            <hr:MaritalStatusCode>
                                <xsl:call-template name="templateMaritalStatus">
                                    <xsl:with-param name="Marital_Status" select="peci:Marital_Status[@*[local-name() != 'isDeleted']]"/>                              
                                </xsl:call-template>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Marital_Status[@*[local-name() != 'isDeleted']]">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </hr:MaritalStatusCode>
                        </xsl:if>                       
                    </hr:CertifiedMaritalStatus>
                </xsl:if>
                <xsl:if test="peci:Preferred_Language[@*[local-name()]]">
                    <hr:PrimaryLanguageCode>
                        <xsl:variable name="tempLanguageCode">
                            <xsl:call-template name="templateLanguageCode">
                                <xsl:with-param name="language" select="peci:Preferred_Language[@*[local-name() != 'isDeleted']]"/>
                            </xsl:call-template>  
                        </xsl:variable>
                        <xsl:choose>
                            <xsl:when test="string-length($tempLanguageCode) > 0">
                                <xsl:value-of select="$tempLanguageCode"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="peci:Preferred_Language[@*[local-name() != 'isDeleted']]"/>
                            </xsl:otherwise>
                        </xsl:choose>             
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Preferred_Language[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </hr:PrimaryLanguageCode>
                </xsl:if>
                <xsl:if test="peci:Nationality[@*[local-name()]]">
                    <hr:CitizenshipCountryCode>
                        <xsl:value-of select="peci:Nationality[@*[local-name() != 'isDeleted']]"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Nationality[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </hr:CitizenshipCountryCode>
                </xsl:if>         
            </xsl:if>
        </hr:IndicativePerson>
    </xsl:template>

    <!--      hr:IndicativeEmployeeTemplate       -->
    <xsl:template name="hr:IndicativeEmployeeTemplate">
        <xsl:param name="effectiveMomentDate"/>
        <xsl:param name="employeeID"/>
        <xsl:param name="bodType"/>
        <hr:IndicativeEmployee>
            <xsl:choose>
                <xsl:when test="ptdf:EmployeeGroupCode and $bodType = 'position'">
                    <xsl:attribute name="validFrom">
                        <xsl:value-of select="$effectiveMomentDate"/>
                    </xsl:attribute>
                </xsl:when>
                <xsl:when test="../peci:Additional_Information[@*[local-name()]]/ptdf:EmployeeGroupCode[@*[local-name()]] and $bodType = 'additionalInfo'">
                    <xsl:attribute name="validFrom">
                        <xsl:value-of select="$effectiveMomentDate"/>
                    </xsl:attribute>
                </xsl:when>
                <xsl:when test="$bodType = 'workerStatusActive'">
                    <xsl:if test="peci:Hire_Date">
                        <xsl:attribute name="validFrom">             
                            <xsl:value-of select="substring(peci:Hire_Date,1,10)"/>
                        </xsl:attribute>
                    </xsl:if>         
                </xsl:when>              
            </xsl:choose>
         
            <hr:EmployeeID>
                <xsl:value-of select="$employeeID"/>
            </hr:EmployeeID>
            <xsl:choose>
                <xsl:when test="@*[local-name() = 'isAdded'] and string-length(ptdf:EmployeeGroupCode) > 0 and $bodType = 'position'">
                    <hr:EmployeeGroupCode>
                        <xsl:value-of select="ptdf:EmployeeGroupCode"/>     
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="ptdf:EmployeeGroupCode">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </hr:EmployeeGroupCode>
                </xsl:when>
                <xsl:when test="@*[local-name() != 'isAdded'] and ptdf:EmployeeGroupCode[@*[local-name() != 'isDeleted']] and $bodType = 'position'">
                    <hr:EmployeeGroupCode>
                        <xsl:value-of select="ptdf:EmployeeGroupCode[@*[local-name() != 'isDeleted']]"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="ptdf:EmployeeGroupCode[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </hr:EmployeeGroupCode>                    
                </xsl:when>
                <xsl:otherwise>
                    <xsl:if test="../peci:Additional_Information[@*[local-name()]]/ptdf:EmployeeGroupCode[@*[local-name()]] and $bodType='additionalInfo'">
                        <hr:EmployeeGroupCode>
                            <xsl:value-of select="../peci:Additional_Information[@*[local-name()]]/ptdf:EmployeeGroupCode[@*[local-name() != 'isDeleted']]"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="../peci:Additional_Information[@*[local-name()]]/ptdf:EmployeeGroupCode[@*[local-name() != 'isDeleted']]">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </hr:EmployeeGroupCode>
                    </xsl:if>
                </xsl:otherwise>
            </xsl:choose>
        </hr:IndicativeEmployee>
    </xsl:template>

    <!--      hr:IndicativeEmploymentTemplate       -->
    <xsl:template name="hr:IndicativeEmploymentTemplate">
        <xsl:param name="effectiveMomentDate"/>
        <hr:IndicativeEmployment>
            <xsl:if test="peci:Worker_Status[@*[local-name()]]/peci:First_Day_of_Work[@*[local-name()]]">
                <hr:ProposedHire>
                    <hr:ExpectedDutyEntryDate>
                        <xsl:value-of select="substring(peci:Worker_Status[@*[local-name()]]/peci:First_Day_of_Work[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Worker_Status[@*[local-name()]]/peci:First_Day_of_Work[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </hr:ExpectedDutyEntryDate>
                </hr:ProposedHire>
            </xsl:if>
            <hr:EmploymentLifecycle>
                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                <hr:Hire>
                    <hr:HireTypeCode>
                        <xsl:choose>
                            <xsl:when test="(peci:Worker_Status/peci:Original_Hire_Date &lt; peci:Effective_Moment) and peci:Derived_Event_Code = 'HIR'">
                                <xsl:value-of select="'ReHire'"/>
                            </xsl:when>
                            <xsl:when test="peci:Derived_Event_Code = 'HIR'">
                                <xsl:value-of select="'HIRNEW'"/>
                            </xsl:when>
                            <xsl:when test="peci:Derived_Event_Code ='ORG'">
                                <xsl:value-of select="'CompanyTransfer'"/>
                            </xsl:when>                                              
                            <xsl:when test="peci:Derived_Event_Code ='PCI'">
                                <xsl:value-of select="'CompanyTransfer'"/>
                            </xsl:when>         
                        </xsl:choose>
                    </hr:HireTypeCode>
                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                        <hr:HireDate>
                            <xsl:value-of select="$effectiveMomentDate"/>
                           <!-- <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="$effectiveMomentDate">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>-->
                        </hr:HireDate>
                    </xsl:if>
                    <xsl:if test="string-length(peci:Worker_Status[@*[local-name()]]/peci:Original_Hire_Date[@*[local-name()]]) > 0">
                        <hr:OriginalHireDate>
                            <xsl:value-of select="substring(peci:Worker_Status[@*[local-name()]]/peci:Original_Hire_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Worker_Status[@*[local-name()]]/peci:Original_Hire_Date[@*[local-name() != 'isDeleted']]">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </hr:OriginalHireDate>
                    </xsl:if>
                </hr:Hire>
            </hr:EmploymentLifecycle>
        </hr:IndicativeEmployment>
    </xsl:template>

    <!--      hr:IndicativeDeploymentPositionTemplate       -->
    <xsl:template name="hr:IndicativeDeploymentPositionTemplate">
        <xsl:param name="effectiveMomentDate"/>     
        <xsl:variable name="indicativeDeploymentFlag">
            <xsl:choose>
                <xsl:when test="@*[local-name() = 'isAdded']">
                    <xsl:value-of select="concat(peci:Business_Title,peci:Scheduled_Weekly_Hours,peci:Pay_Cycle_Hours,peci:Pay_Cycle_Hours,peci:Work_Shift,peci:Position_Time_Type,peci:Full_Time_Equivalent_Percentage)"/>
                </xsl:when>
                <xsl:when test="@*[local-name() != 'isAdded']">
                    <xsl:value-of select="concat(peci:Business_Title[@*[local-name()]],peci:Scheduled_Weekly_Hours[@*[local-name()]],peci:Pay_Cycle_Hours[@*[local-name()]],peci:Pay_Cycle_Hours[@*[local-name()]],peci:Work_Shift[@*[local-name()]],peci:Position_Time_Type[@*[local-name()]],peci:Full_Time_Equivalent_Percentage[@*[local-name()]])"/>                    
                </xsl:when>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="workLocation">
            <xsl:choose>
                <xsl:when test="@*[local-name() = 'isAdded']">
                    <xsl:for-each select="tokenize(ptdf:WorkAddress,'\|')">
                        <position>
                            <xsl:value-of select="."/>
                        </position>                        
                    </xsl:for-each>                   
                </xsl:when>
                <xsl:otherwise>
                    <xsl:for-each select="tokenize(ptdf:WorkAddress[@*[local-name() != 'isDeleted']],'\|')">
                        <position>
                            <xsl:value-of select="."/>
                        </position>                       
                    </xsl:for-each>                   
                </xsl:otherwise>
            </xsl:choose>         
        </xsl:variable>   
        <xsl:variable name="workLocationFlag">
            <xsl:choose>
                <xsl:when test="@*[local-name() = 'isAdded']">
                    <xsl:value-of select="concat(ptdf:LocationID,ptdf:LocationID,ptdf:WorkAddress)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="concat(ptdf:LocationID[@*[local-name()]],ptdf:LocationID[@*[local-name()]],ptdf:WorkAddress[@*[local-name()]])"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>         
        <xsl:variable name="scheduleFlag">
            <xsl:choose>
                <xsl:when test="@*[local-name() = 'isAdded']">
                    <xsl:value-of select="concat(peci:Scheduled_Weekly_Hours,peci:Pay_Cycle_Hours)"/>                    
                </xsl:when>
                <xsl:when test="@*[local-name() != 'isAdded']">
                    <xsl:value-of select="concat(peci:Scheduled_Weekly_Hours[@*[local-name()]],peci:Pay_Cycle_Hours[@*[local-name()]],peci:Work_Shift[@*[local-name()]])"/>
                </xsl:when>
            </xsl:choose>            
        </xsl:variable>
        <xsl:if test="string-length($indicativeDeploymentFlag) > 0">
            <hr:IndicativeDeployment>
                <xsl:attribute name="validFrom">
                    <xsl:value-of select="$effectiveMomentDate"/>
                </xsl:attribute>
                <xsl:choose>
                    <xsl:when test="@*[local-name() = 'isAdded'] and (ptdf:OrganizationID or ptdf:OrganizationName or ptdf:OrganizationName)">
                        <hr:DeploymentOrganization>     
                            <xsl:if test="ptdf:OrganizationID">
                                <hr:OrganizationIdentifiers>
                                    <hr:OrganizationID>
                                        <xsl:value-of select="ptdf:OrganizationID"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="ptdf:OrganizationID">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </hr:OrganizationID>                          
                                </hr:OrganizationIdentifiers>                            
                            </xsl:if>
                            <xsl:if test="ptdf:OrganizationName">
                                <hr:OrganizationalIdentifiers>
                                    <hr:OrganizationalName>
                                        <xsl:value-of select="normalize-space(ptdf:OrganizationName)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="ptdf:OrganizationName">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </hr:OrganizationalName>
                                </hr:OrganizationalIdentifiers>
                            </xsl:if>                         
                        </hr:DeploymentOrganization>                        
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:if test="ptdf:OrganizationID[@*[local-name()]] or ptdf:OrganizationName[@*[local-name()]]">
                            <hr:DeploymentOrganization>     
                                <xsl:if test="ptdf:OrganizationID[@*[local-name()]]">
                                    <hr:OrganizationIdentifiers>
                                        <hr:OrganizationID>
                                            <xsl:value-of select="ptdf:OrganizationID[@*[local-name() != 'isDeleted']]"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="ptdf:OrganizationID[@*[local-name() != 'isDeleted']]">
                                                        <xsl:call-template name="print-field-xpath"/> 
                                                    </xsl:for-each>                       
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </hr:OrganizationID>                          
                                    </hr:OrganizationIdentifiers>                            
                                </xsl:if>
                                <xsl:if test="ptdf:OrganizationName[@*[local-name()]]">
                                    <hr:OrganizationalIdentifiers>
                                        <hr:OrganizationalName>
                                            <xsl:value-of select="ptdf:OrganizationName[@*[local-name() != 'isDeleted']]"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="ptdf:OrganizationName[@*[local-name() != 'isDeleted']]">
                                                        <xsl:call-template name="print-field-xpath"/>            
                                                    </xsl:for-each>   
                                                </xsl:with-param>
                                            </xsl:call-template>  
                                        </hr:OrganizationalName>
                                    </hr:OrganizationalIdentifiers>
                                </xsl:if>                         
                            </hr:DeploymentOrganization>        
                        </xsl:if>
                    </xsl:otherwise>
                </xsl:choose>
                  
                <!--        Location ID and Work Address Mapping    -->
                <xsl:if test="string-length($workLocationFlag) > 0">                   
                    <xsl:choose>
                        <xsl:when test="@*[local-name() = 'isAdded'] and (ptdf:LocationID or ptdf:WorkAddress)">
                            <hr:WorkLocation>
                                <xsl:if test="ptdf:LocationID">
                                    <hr:LocationID>
                                        <xsl:value-of select="normalize-space(ptdf:LocationID)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="ptdf:LocationID">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </hr:LocationID>
                                </xsl:if>
                                <xsl:if test="$workLocation">                                   
                                    <hr:Address>
                                        <oa:CityName>
                                            <xsl:value-of select="normalize-space($workLocation/position[1])"/>
                                        </oa:CityName>
                                        <oa:CountrySubDivisionCode>
                                            <xsl:value-of select="normalize-space($workLocation/position[2])"/>
                                        </oa:CountrySubDivisionCode>
                                        <oa:PostalCode>
                                            <xsl:value-of select="normalize-space($workLocation/position[3])"/>
                                        </oa:PostalCode>                           
                                    </hr:Address>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:WorkAddress">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:if>
                            </hr:WorkLocation>
                        </xsl:when>                        
                        <xsl:otherwise>
                            <hr:WorkLocation>
                                <xsl:if test="string-length(ptdf:LocationID[@*[local-name()]]) > 0">
                                    <hr:LocationID>
                                        <xsl:value-of select="normalize-space(ptdf:LocationID[@*[local-name() != 'isDeleted']])"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="ptdf:LocationID[@*[local-name() != 'isDeleted']]">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </hr:LocationID>
                                </xsl:if>                       
                                <xsl:if test="ptdf:WorkAddress[@*[local-name()]]">                             
                                    <hr:Address>
                                        <oa:CityName>
                                            <xsl:value-of select="normalize-space($workLocation/position[1])"/>
                                        </oa:CityName>
                                        <oa:CountrySubDivisionCode>
                                            <xsl:value-of select="normalize-space($workLocation/position[2])"/>
                                        </oa:CountrySubDivisionCode>
                                        <oa:PostalCode>
                                            <xsl:value-of select="normalize-space($workLocation/position[3])"/>
                                        </oa:PostalCode>                           
                                    </hr:Address>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:WorkAddress[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:if> 
                            </hr:WorkLocation>
                        </xsl:otherwise>
                    </xsl:choose>      
                </xsl:if>
                <!--        Job Title Mapping           -->
                <xsl:choose>
                    <xsl:when test="@*[local-name() = 'isAdded'] and ptdf:JobTitle">
                        <hr:Job>
                            <oa:JobTitle>
                                <xsl:value-of select="normalize-space(ptdf:JobTitle)"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="ptdf:JobTitle">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </oa:JobTitle>
                        </hr:Job>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:if test="ptdf:JobTitle[@*[local-name()]]">
                            <hr:Job>
                                <oa:JobTitle>
                                    <xsl:value-of select="normalize-space(../peci:Additional_Information[@*[local-name()]]/ptdf:JobTitle[@*[local-name() != 'isDeleted']])"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="../peci:Additional_Information[@*[local-name()]]/ptdf:JobTitle[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </oa:JobTitle>
                            </hr:Job>
                        </xsl:if>
                    </xsl:otherwise>
                </xsl:choose>               
                <!--        Business Title Mapping          -->
                <xsl:choose>
                    <xsl:when test="@*[local-name() = 'isAdded']">
                        <xsl:if test="peci:Business_Title">
                            <hr:IndicativePosition>
                                <hr:PositionTitle>
                                    <xsl:value-of select="peci:Business_Title"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Business_Title">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:PositionTitle>
                            </hr:IndicativePosition>
                        </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:if test="peci:Business_Title[@*[local-name()]]">
                            <hr:IndicativePosition>
                                <hr:PositionTitle>
                                    <xsl:value-of select="peci:Business_Title[@*[local-name() != 'isDeleted']]"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Business_Title[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:PositionTitle>
                            </hr:IndicativePosition>
                        </xsl:if>
                    </xsl:otherwise>
                </xsl:choose>                           
                <xsl:if test="string-length($scheduleFlag) > 0">
                    <hr:Schedule>
                        <xsl:choose>
                            <xsl:when test="@*[local-name() = 'isAdded']">
                                <xsl:if test="peci:Scheduled_Weekly_Hours">
                                    <hr:ScheduledHours scheduleBasis="Week">
                                        <xsl:value-of select="peci:Scheduled_Weekly_Hours[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Scheduled_Weekly_Hours[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </hr:ScheduledHours>
                                </xsl:if>                                
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:if test="peci:Scheduled_Weekly_Hours[@*[local-name()]]">
                                    <hr:ScheduledHours scheduleBasis="Week">
                                        <xsl:value-of select="peci:Scheduled_Weekly_Hours[@*[local-name() != 'isDeleted']]"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Scheduled_Weekly_Hours[@*[local-name() != 'isDeleted']]">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </hr:ScheduledHours>
                                </xsl:if>                                
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:choose>
                            <xsl:when test="@*[local-name() = 'isAdded']">
                                <xsl:if test="peci:Pay_Cycle_Hours">
                                    <hr:ScheduledHours scheduleBasis="PayCycle">
                                        <xsl:value-of select="peci:Pay_Cycle_Hours[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Pay_Cycle_Hours[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </hr:ScheduledHours>
                                </xsl:if>                                
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:if test="peci:Pay_Cycle_Hours[@*[local-name()]]">
                                    <hr:ScheduledHours scheduleBasis="PayCycle">
                                        <xsl:value-of
                                            select="peci:Pay_Cycle_Hours[@*[local-name() != 'isDeleted']]"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Pay_Cycle_Hours[@*[local-name() != 'isDeleted']]">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </hr:ScheduledHours>
                                </xsl:if>                                
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:choose>
                            <xsl:when test="@*[local-name() = 'isAdded']">
                                <xsl:if test="peci:Work_Shift">
                                    <hr:DaySchedule>
                                        <hr:ID>
                                            <xsl:value-of select="peci:Work_Shift[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Work_Shift[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                        <xsl:call-template name="print-field-xpath"/> 
                                                    </xsl:for-each>                       
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </hr:ID>
                                    </hr:DaySchedule>
                                </xsl:if>                                
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:if test="peci:Work_Shift[@*[local-name()]]">
                                    <hr:DaySchedule>
                                        <hr:ID>
                                            <xsl:value-of select="peci:Work_Shift[@*[local-name() != 'isDeleted']]"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Work_Shift[@*[local-name() != 'isDeleted']]">
                                                        <xsl:call-template name="print-field-xpath"/> 
                                                    </xsl:for-each>                       
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </hr:ID>
                                    </hr:DaySchedule>
                                </xsl:if>                                
                            </xsl:otherwise>
                        </xsl:choose>
                    </hr:Schedule>
                </xsl:if>
                <xsl:choose>
                    <xsl:when test="@*[local-name() = 'isAdded']">
                        <xsl:if test="peci:Position_Time_Type">
                            <xsl:variable name="workLevelCode">
                                <xsl:choose>
                                    <xsl:when test="peci:Position_Time_Type[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0] = 'Full_time'">
                                        <xsl:value-of select="'FullTime'"/>
                                    </xsl:when>
                                    <xsl:when test="peci:Position_Time_Type[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0] = 'Part_time'">
                                        <xsl:value-of select="'PartTime'"/>
                                    </xsl:when>
                                    <xsl:when test="peci:Position_Time_Type[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0] = ('FullTime','PartTime')">
                                        <xsl:value-of select="peci:Position_Time_Type[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                    </xsl:when>
                                </xsl:choose>
                            </xsl:variable>
                            <xsl:if test="string-length($workLevelCode) > 0">
                                <hr:WorkLevelCode>                                        
                                    <xsl:value-of select="$workLevelCode"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Position_Time_Type[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                                <xsl:call-template name="print-field-xpath"/>            
                                            </xsl:for-each>   
                                        </xsl:with-param>
                                    </xsl:call-template>  
                                </hr:WorkLevelCode>
                            </xsl:if>                            
                        </xsl:if>                        
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:if test="peci:Position_Time_Type[@*[local-name()]]">
                            <xsl:variable name="workLevelCode">
                                <xsl:choose>
                                    <xsl:when test="peci:Position_Time_Type[@*[local-name() != 'isDeleted']] = 'Full_time'">
                                        <xsl:value-of select="'FullTime'"/>
                                    </xsl:when>
                                    <xsl:when test="peci:Position_Time_Type[@*[local-name() != 'isDeleted']] = 'Part_time'">
                                        <xsl:value-of select="'PartTime'"/>
                                    </xsl:when>
                                    <xsl:when test="peci:Position_Time_Type[@*[local-name() != 'isDeleted']] = ('FullTime','PartTime')">
                                        <xsl:value-of select="peci:Position_Time_Type[@*[local-name() != 'isDeleted']]"/>
                                    </xsl:when>
                                </xsl:choose>
                            </xsl:variable>
                            <xsl:if test="string-length($workLevelCode) > 0">
                                <hr:WorkLevelCode>                                        
                                    <xsl:value-of select="$workLevelCode"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Position_Time_Type[@*[local-name()]]">
                                                <xsl:call-template name="print-field-xpath"/>            
                                            </xsl:for-each>   
                                        </xsl:with-param>
                                    </xsl:call-template>  
                                </hr:WorkLevelCode>
                            </xsl:if>                            
                        </xsl:if>                        
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="@*[local-name() = 'isAdded']">
                        <xsl:if test="peci:Full_Time_Equivalent_Percentage">
                            <hr:FullTimeEquivalentRatio>
                                <xsl:call-template name="templateFTE">
                                    <xsl:with-param name="FullTimeEq" select="peci:Full_Time_Equivalent_Percentage[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                </xsl:call-template>                              
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Full_Time_Equivalent_Percentage[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </hr:FullTimeEquivalentRatio>
                        </xsl:if>                                  
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:if test="peci:Full_Time_Equivalent_Percentage[@*[local-name()]]">
                            <hr:FullTimeEquivalentRatio>
                                <xsl:call-template name="templateFTE">
                                    <xsl:with-param name="FullTimeEq" select="peci:Full_Time_Equivalent_Percentage[@*[local-name() != 'isDeleted']]"/>
                                </xsl:call-template>                                                         
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Full_Time_Equivalent_Percentage[@*[local-name() != 'isDeleted']]">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </hr:FullTimeEquivalentRatio>
                        </xsl:if>                                  
                    </xsl:otherwise>
                </xsl:choose>
            </hr:IndicativeDeployment> 
        </xsl:if>
    </xsl:template>
    
    <!--      hr:IndicativeDeploymentAddInfoTemplate       -->
    <xsl:template name="hr:IndicativeDeploymentAddInfoTemplate">
        <xsl:param name="effectiveMomentDate"/>
        <xsl:variable name="workLocation">
            <xsl:for-each select="tokenize(../peci:Additional_Information[@*[local-name()]]/ptdf:WorkAddress[@*[local-name() != 'isDeleted']],'\|')">
                <position>
                    <xsl:value-of select="."/>
                </position>
            </xsl:for-each>
        </xsl:variable>   
        <xsl:variable name="workLocationFlag">
            <xsl:value-of select="concat(../peci:Additional_Information[@*[local-name()]]/ptdf:LocationID[@*[local-name()]],../peci:Additional_Information[@*[local-name()]]/ptdf:LocationID[@*[local-name()]],../peci:Additional_Information[@*[local-name()]]/ptdf:WorkAddress[@*[local-name()]])"/>
        </xsl:variable>         
        <xsl:variable name="additionalInfoFlag">
            <xsl:value-of select="concat(../peci:Additional_Information[@*[local-name()]]/ptdf:OrganizationID[@*[local-name()]],../peci:Additional_Information[@*[local-name()]]/ptdf:OrganizationName[@*[local-name()]],../peci:Additional_Information[@*[local-name()]]/ptdf:JobTitle[@*[local-name()]],
                ../peci:Additional_Information[@*[local-name()]]/ptdf:ScheduledDays[@*[local-name()]],$workLocation,$workLocationFlag)"/>
        </xsl:variable>      
        <xsl:if test="string-length($additionalInfoFlag) > 0">
            <hr:IndicativeDeployment>
                <xsl:attribute name="validFrom">
                    <xsl:value-of select="$effectiveMomentDate"/>
                </xsl:attribute>            
                <xsl:if test="../peci:Additional_Information[@*[local-name()]]/ptdf:OrganizationID[@*[local-name()]] or ../peci:Additional_Information[@*[local-name()]]/ptdf:OrganizationName[@*[local-name()]]">
                    <hr:DeploymentOrganization>     
                        <xsl:if test="../peci:Additional_Information[@*[local-name()]]/ptdf:OrganizationID[@*[local-name()]]">
                            <hr:OrganizationIdentifiers>
                                <hr:OrganizationID>
                                    <xsl:value-of select="../peci:Additional_Information[@*[local-name()]]/ptdf:OrganizationID[@*[local-name() != 'isDeleted']]"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="../peci:Additional_Information[@*[local-name()]]/ptdf:OrganizationID[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:OrganizationID>                          
                            </hr:OrganizationIdentifiers>                            
                        </xsl:if>
                        <xsl:if test="../peci:Additional_Information[@*[local-name()]]/ptdf:OrganizationName[@*[local-name()]]">
                            <hr:OrganizationalIdentifiers>
                                <hr:OrganizationalName>
                                    <xsl:value-of select="../peci:Additional_Information[@*[local-name()]]/ptdf:OrganizationName[@*[local-name() != 'isDeleted']]"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="../peci:Additional_Information[@*[local-name()]]/ptdf:OrganizationName[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/>            
                                            </xsl:for-each>   
                                        </xsl:with-param>
                                    </xsl:call-template>  
                                </hr:OrganizationalName>
                            </hr:OrganizationalIdentifiers>
                        </xsl:if>                         
                    </hr:DeploymentOrganization>
                </xsl:if>               
                <xsl:if test="string-length($workLocationFlag) > 0">
                    <hr:WorkLocation>
                        <xsl:if test="string-length(../peci:Additional_Information[@*[local-name()]]/ptdf:LocationID[@*[local-name()]]) > 0">
                            <hr:LocationID>
                                <xsl:value-of select="normalize-space(../peci:Additional_Information[@*[local-name()]]/ptdf:LocationID[@*[local-name() != 'isDeleted']])"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="../peci:Additional_Information[@*[local-name()]]/ptdf:LocationID[@*[local-name() != 'isDeleted']]">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </hr:LocationID>
                        </xsl:if>                       
                        <xsl:if test="../peci:Additional_Information[@*[local-name()]]/ptdf:WorkAddress[@*[local-name()]]">                             
                            <hr:Address>
                                <oa:CityName>
                                    <xsl:value-of select="normalize-space($workLocation/position[1])"/>
                                </oa:CityName>
                                <oa:CountrySubDivisionCode>
                                    <xsl:value-of select="normalize-space($workLocation/position[2])"/>
                                </oa:CountrySubDivisionCode>
                                <oa:PostalCode>
                                    <xsl:value-of select="normalize-space($workLocation/position[3])"/>
                                </oa:PostalCode>                           
                            </hr:Address>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="../peci:Additional_Information[@*[local-name()]]/ptdf:WorkAddress[@*[local-name() != 'isDeleted']]">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:if>
                    </hr:WorkLocation>                
                </xsl:if>
                <xsl:if test="../peci:Additional_Information[@*[local-name()]]/ptdf:JobTitle[@*[local-name()]]">
                    <hr:Job>
                        <oa:JobTitle>
                            <xsl:value-of select="normalize-space(../peci:Additional_Information[@*[local-name()]]/ptdf:JobTitle[@*[local-name() != 'isDeleted']])"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="../peci:Additional_Information[@*[local-name()]]/ptdf:JobTitle[@*[local-name() != 'isDeleted']]">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </oa:JobTitle>
                    </hr:Job>
                </xsl:if>
            </hr:IndicativeDeployment>            
        </xsl:if>
    </xsl:template>
        
    <!--      hr:PayCycleRemunerationTemplate     -->
    <xsl:template name="hr:PayCycleRemunerationTemplate">
        <xsl:param name="effectiveMomentDate"/>
        <xsl:param name="bodType"/>
        <xsl:param name="payGroupID"/>
        <xsl:choose>
            <xsl:when test="$bodType = 'position'">
                <xsl:choose>
                    <xsl:when test="@*[local-name() = 'isAdded'] and ptdf:PayGroupCode">
                        <hr:PayCycleRemuneration>
                            <xsl:attribute name="validFrom">
                                <xsl:value-of select="$effectiveMomentDate"/>
                            </xsl:attribute>
                            <hr:PayGroupCode>               
                                <xsl:value-of select="ptdf:PayGroupCode"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="ptdf:PayGroupCode">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </hr:PayGroupCode>
                        </hr:PayCycleRemuneration>      
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:if test="ptdf:PayGroupCode[@*[local-name() != 'isDeleted']]">
                            <hr:PayCycleRemuneration>
                                <xsl:attribute name="validFrom">
                                    <xsl:value-of select="$effectiveMomentDate"/>
                                </xsl:attribute>
                                <hr:PayGroupCode>               
                                    <xsl:value-of select="ptdf:PayGroupCode[@*[local-name() != 'isDeleted']]"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayGroupCode[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:PayGroupCode>
                            </hr:PayCycleRemuneration>      
                        </xsl:if>          
                    </xsl:otherwise>
                </xsl:choose>                
            </xsl:when>
            <xsl:otherwise>
                <xsl:if test="../peci:Additional_Information[@*[local-name()]]/ptdf:PayGroupCode[@*[local-name() != 'isDeleted']]">
                    <hr:PayCycleRemuneration>
                        <xsl:attribute name="validFrom">
                            <xsl:value-of select="$effectiveMomentDate"/>
                        </xsl:attribute>
                        <hr:PayGroupCode>               
                            <xsl:value-of select="../peci:Additional_Information[@*[local-name()]]/ptdf:PayGroupCode[@*[local-name() != 'isDeleted']]"/>
                        </hr:PayGroupCode>
                    </hr:PayCycleRemuneration>      
                </xsl:if>         
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
          
    <!--     nga:PaymentInstructionsTemplate      -->
    <xsl:template name="nga:PaymentInstructionsTemplate">
        <xsl:param name="effectiveMomentDate"/>
        <xsl:param name="attribute"/>
        <xsl:param name="node"/> 
        <xsl:param name="paymentElection"/>
        <xsl:param name="countSection"/>
        
        <!--  Main Bank  -->
        <xsl:for-each select="current-group()">
            <xsl:sort select="peci:Order" order="descending"/>
            <xsl:if test="number(peci:Order) >= $countSection">
                <nga:PaymentInstructions>
                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                    </xsl:if>
                    <nga:PaymentType>    
                        <xsl:value-of select="'MAIN'"/>                                         
                    </nga:PaymentType>
                    <nga:PaymentMethod>
                        <xsl:value-of select="nga:Payment_Method"/>
                    </nga:PaymentMethod>
                    <xsl:choose>
                        <xsl:when test="peci:Distribution_Amount != 0">
                            <hr:PaymentTypeCode>AMOUNT</hr:PaymentTypeCode>
                        </xsl:when>
                        <xsl:when test="peci:Distribution_Percentage != 0">
                            <hr:PaymentTypeCode>PERCENTAGE</hr:PaymentTypeCode>
                        </xsl:when>
                        <xsl:otherwise>
                            <hr:PaymentTypeCode/>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:if test="peci:Distribution_Amount != 0">
                        <nga:Amount>
                            <xsl:value-of select="peci:Distribution_Amount"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:XPath,'/',name(peci:Distribution_Amount))"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:Amount>
                    </xsl:if>
                    <xsl:if test="peci:Distribution_Percentage != 0">
                        <nga:PaymentPercentage>
                            <hr:Percentage>
                                <xsl:value-of select="xs:decimal(peci:Distribution_Percentage) * 100"/>
                                <xsl:variable name="nodePath">
                                    <xsl:value-of select="concat(nga:XPath,'/',name(peci:Distribution_Percentage))"/>
                                </xsl:variable>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath" select="$nodePath">                                                               
                                    </xsl:with-param>
                                </xsl:call-template>
                            </hr:Percentage>
                        </nga:PaymentPercentage>
                    </xsl:if>
                    <xsl:if test="starts-with(nga:Payment_Method, 'BANK')">
                        <nga:DirectDepositAccount>
                            <xsl:if test="string-length(peci:Account_Type)>0">
                                <xsl:variable name="typeCode">
                                    <xsl:choose>
                                        <xsl:when test="peci:Account_Type = 'DDA'">
                                            <xsl:value-of select="'CHECKING'"/>
                                        </xsl:when>
                                        <xsl:when test="peci:Account_Type = 'SA'">
                                            <xsl:value-of select="'SAVINGS'"/>
                                        </xsl:when>
                                    </xsl:choose>
                                </xsl:variable>
                                <xsl:choose>
                                    <xsl:when test="peci:Country = 'US'">
                                        <hr:TypeCode>
                                            <xsl:value-of select="$typeCode"/>
                                        </hr:TypeCode>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <hr:TypeCode>
                                            <xsl:value-of select="peci:Account_Type"/>                                           
                                        </hr:TypeCode>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:variable name="nodePath">
                                    <xsl:value-of select="concat(nga:XPath,'/',name(peci:Account_Type))"/>
                                </xsl:variable>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath" select="$nodePath">                                                               
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:if>
                            <xsl:if test="string-length(peci:Bank_Account_Name) > 0">
                                <oa:NameOnAccount>
                                    <xsl:value-of select="peci:Bank_Account_Name"/>
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:Bank_Account_Name))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </oa:NameOnAccount>
                            </xsl:if>       
                            <xsl:if test="string-length(peci:Bank_ID) > 0">
                                <hr:BankRoutingID>
                                    <xsl:value-of select="peci:Bank_ID"/>
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:Bank_ID))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:BankRoutingID>
                            </xsl:if>
                            <xsl:if test="peci:BIC">
                                <hr:BankRoutingID schemeName="SWIFT">
                                    <xsl:value-of select="peci:BIC"/>
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:BIC))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:BankRoutingID>
                            </xsl:if>
                            <xsl:if test="string-length(peci:Account_Number) > 0">
                                <hr:AccountID>
                                    <xsl:value-of select="peci:Account_Number"/>
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:Account_Number))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:AccountID>
                            </xsl:if>
                            <xsl:if test="string-length(peci:Branch_ID) > 0 and peci:Country != 'CH'">
                                <nga:AdditionalAccountID>
                                    <xsl:value-of select="peci:Branch_ID"/>
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:Branch_ID))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:AdditionalAccountID>
                            </xsl:if>
                            <xsl:if test="string-length(peci:IBAN)>0">
                                <nga:IBAN>
                                    <xsl:value-of select="peci:IBAN"/>
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:IBAN))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:IBAN>
                            </xsl:if>
                            <xsl:if test="string-length(peci:Country)>0">
                                <hr:CountryCode>
                                    <xsl:value-of select="peci:Country"/>
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:Country))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:CountryCode>
                            </xsl:if>
                            <xsl:if test="string-length(peci:Currency)>0">
                                <hr:CurrencyCode>
                                    <xsl:value-of select="peci:Currency"/>
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:Currency))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:CurrencyCode>
                            </xsl:if>
                            <xsl:if test="peci:Country = 'CH'">
                                <xsl:if test="peci:Check_Digit">
                                    <oa:PostalCode>
                                        <xsl:value-of select="peci:Check_Digit"/>
                                        <xsl:variable name="nodePath">
                                            <xsl:value-of select="concat(nga:XPath,'/',name(peci:Check_Digit))"/>
                                        </xsl:variable>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath" select="$nodePath">                                                               
                                            </xsl:with-param>
                                        </xsl:call-template> 
                                    </oa:PostalCode>
                                </xsl:if>
                                <xsl:if test="peci:Branch_ID">
                                    <oa:CityName>
                                        <xsl:value-of select="peci:Branch_ID"/>
                                        <xsl:variable name="nodePath">
                                            <xsl:value-of select="concat(nga:XPath,'/',name(peci:Branch_ID))"/>
                                        </xsl:variable>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath" select="$nodePath">                                                               
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </oa:CityName>
                                </xsl:if>                               
                            </xsl:if>
                        </nga:DirectDepositAccount>
                    </xsl:if>
                </nga:PaymentInstructions>  
            </xsl:if>
        </xsl:for-each>
        
        <!--  Other Bank  -->
        <xsl:for-each select="current-group()">
            <xsl:sort select="peci:Order" order="ascending"/>
            <xsl:if test="number(peci:Order) &lt; $countSection">
                <nga:PaymentInstructions>
                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                    </xsl:if>
                    <nga:PaymentType>    
                        <xsl:value-of select="'OTHER'"/>                                         
                    </nga:PaymentType>
                    <nga:PaymentMethod>
                        <xsl:value-of select="nga:Payment_Method"/>
                    </nga:PaymentMethod>
                    <xsl:choose>
                        <xsl:when test="peci:Distribution_Amount != 0">
                            <hr:PaymentTypeCode>AMOUNT</hr:PaymentTypeCode>
                        </xsl:when>
                        <xsl:when test="peci:Distribution_Percentage != 0">
                            <hr:PaymentTypeCode>PERCENTAGE</hr:PaymentTypeCode>
                        </xsl:when>
                        <xsl:otherwise>
                            <hr:PaymentTypeCode/>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:if test="peci:Distribution_Amount != 0">
                        <nga:Amount>
                            <xsl:value-of select="peci:Distribution_Amount"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:XPath,'/',name(peci:Distribution_Amount))"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:Amount>
                    </xsl:if>
                    <xsl:if test="peci:Distribution_Percentage != 0">
                        <nga:PaymentPercentage>
                            <hr:Percentage>
                                <xsl:value-of select="xs:decimal(peci:Distribution_Percentage) * 100"/>
                                <xsl:variable name="nodePath">
                                    <xsl:value-of select="concat(nga:XPath,'/',name(peci:Distribution_Percentage))"/>
                                </xsl:variable>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath" select="$nodePath">                                                               
                                    </xsl:with-param>
                                </xsl:call-template> 
                            </hr:Percentage>
                        </nga:PaymentPercentage>
                    </xsl:if>
                    <xsl:if test="starts-with(nga:Payment_Method, 'BANK')">
                        <nga:DirectDepositAccount>
                            <xsl:if test="string-length(peci:Account_Type)>0">
                                <xsl:variable name="typeCode">
                                    <xsl:choose>
                                        <xsl:when test="peci:Account_Type = 'DDA'">
                                            <xsl:value-of select="'CHECKING'"/>
                                        </xsl:when>
                                        <xsl:when test="peci:Account_Type = 'SA'">
                                            <xsl:value-of select="'SAVINGS'"/>
                                        </xsl:when>
                                    </xsl:choose>
                                </xsl:variable>
                                <xsl:choose>
                                    <xsl:when test="peci:Country = 'US'">
                                        <hr:TypeCode>
                                            <xsl:value-of select="$typeCode"/>
                                        </hr:TypeCode>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <hr:TypeCode>
                                            <xsl:value-of select="peci:Account_Type"/>
                                            <xsl:variable name="nodePath">
                                                <xsl:value-of select="concat(nga:XPath,'/',name(peci:Account_Type))"/>
                                            </xsl:variable>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                                </xsl:with-param>
                                            </xsl:call-template> 
                                        </hr:TypeCode>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:if>
                            <xsl:if test="string-length(peci:Bank_Account_Name) > 0">
                                <oa:NameOnAccount>
                                    <xsl:value-of select="peci:Bank_Account_Name"/>
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:Bank_Account_Name))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template> 
                                </oa:NameOnAccount>
                            </xsl:if>       
                            <xsl:if test="string-length(peci:Bank_ID) > 0">
                                <hr:BankRoutingID>
                                    <xsl:value-of select="peci:Bank_ID"/>
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:Bank_ID))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template> 
                                </hr:BankRoutingID>
                            </xsl:if>
                            <xsl:if test="peci:BIC">
                                <hr:BankRoutingID schemeName="SWIFT">
                                    <xsl:value-of select="peci:BIC"/>
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:BIC))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template> 
                                </hr:BankRoutingID>
                            </xsl:if>
                            <xsl:if test="string-length(peci:Account_Number) > 0">
                                <hr:AccountID>
                                    <xsl:value-of select="peci:Account_Number"/>
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:Account_Number))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:AccountID>
                            </xsl:if>
                            <xsl:if test="string-length(peci:Branch_ID) > 0 and peci:Country != 'CH'">
                                <nga:AdditionalAccountID>
                                    <xsl:value-of select="peci:Branch_ID"/>
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:Branch_ID))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:AdditionalAccountID>
                            </xsl:if>
                            <xsl:if test="string-length(peci:IBAN)>0">
                                <nga:IBAN>
                                    <xsl:value-of select="peci:IBAN"/>
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:IBAN))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:IBAN>
                            </xsl:if>
                            <xsl:if test="string-length(peci:Country)>0">
                                <hr:CountryCode>
                                    <xsl:value-of select="peci:Country"/>
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:Country))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:CountryCode>
                            </xsl:if>
                            <xsl:if test="string-length(peci:Currency)>0">
                                <hr:CurrencyCode>
                                    <xsl:value-of select="peci:Currency"/>
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:Currency))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </hr:CurrencyCode>
                            </xsl:if>
                            <xsl:if test="peci:Country = 'CH'">
                                <xsl:if test="peci:Check_Digit">
                                    <oa:PostalCode>
                                        <xsl:value-of select="peci:Check_Digit"/>
                                        <xsl:variable name="nodePath">
                                            <xsl:value-of select="concat(nga:XPath,'/',name(peci:Check_Digit))"/>
                                        </xsl:variable>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath" select="$nodePath">                                                               
                                            </xsl:with-param>
                                        </xsl:call-template> 
                                    </oa:PostalCode>
                                </xsl:if>
                                <xsl:if test="peci:Branch_ID">
                                    <oa:CityName>
                                        <xsl:value-of select="peci:Branch_ID"/>
                                        <xsl:variable name="nodePath">
                                            <xsl:value-of select="concat(nga:XPath,'/',name(peci:Branch_ID))"/>
                                        </xsl:variable>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath" select="$nodePath">                                                               
                                            </xsl:with-param>
                                        </xsl:call-template> 
                                    </oa:CityName>
                                </xsl:if>                              
                            </xsl:if>
                        </nga:DirectDepositAccount>
                    </xsl:if>
                </nga:PaymentInstructions>  
            </xsl:if>
        </xsl:for-each>
        
    </xsl:template>

    <!--       nga:CostAssignmentTemplate      -->
    <xsl:template name="nga:CostAssignmentTemplate">
        <xsl:param name="effectiveMomentDate"/>
        <xsl:for-each select="current-group()">
            <nga:CostAssignment>
                <xsl:if test="string-length(peci:Allocation_Start_Date) > 0">
                    <xsl:attribute name="validFrom">
                        <xsl:value-of select="substring(peci:Allocation_Start_Date,1,10)"/>
                        <xsl:variable name="nodePath">
                            <xsl:value-of select="concat(nga:XPath,'/',name(peci:Allocation_Start_Date))"/>
                        </xsl:variable>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath" select="$nodePath">                                                               
                            </xsl:with-param>
                        </xsl:call-template>
                    </xsl:attribute>
                </xsl:if>
                <xsl:if test="string-length(peci:Allocation_End_Date) > 0">
                    <xsl:attribute name="validTo">
                        <xsl:value-of select="substring(peci:Allocation_End_Date,1,10)"/>
                        <xsl:variable name="nodePath">
                            <xsl:value-of select="concat(nga:XPath,'/',name(peci:Allocation_End_Date))"/>
                        </xsl:variable>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath" select="$nodePath">                                                               
                            </xsl:with-param>
                        </xsl:call-template>
                    </xsl:attribute>
                </xsl:if>
                <nga:CostCenterCode>
                    <xsl:value-of select="peci:Costing_Worktag/peci:Worktag_Code"/>
                    <xsl:variable name="nodePath">
                        <xsl:value-of select="concat(nga:XPath,'/','peci:Costing_Worktag/peci:Worktag_Code')"/>
                    </xsl:variable>
                    <xsl:call-template name="usedPECIData">
                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                        </xsl:with-param>
                    </xsl:call-template>
                </nga:CostCenterCode>                     
                <oa:Percentage>
                    <xsl:value-of select="xs:decimal(peci:Allocation_Percentage) * 100"/>
                    <xsl:variable name="nodePath">
                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:Allocation_Percentage))"/>
                    </xsl:variable>
                    <xsl:call-template name="usedPECIData">
                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                        </xsl:with-param>
                    </xsl:call-template>
                </oa:Percentage>      
            </nga:CostAssignment>            
        </xsl:for-each>
    </xsl:template>
    
    <!--       nga:DateSpecificationsTemplate      -->
    <xsl:template name="nga:DateSpecificationsTemplate"> 
        <xsl:param name="effectiveMomentDate"/>
        <xsl:variable name="dateFlag">
            <xsl:value-of select="concat(peci:Active_Status_Date[@*[local-name()]],peci:Hire_Date[@*[local-name()]],peci:End_Employment_Date[@*[local-name()]],peci:Continuous_Service_Date[@*[local-name()]],
                peci:Seniority_Date[@*[local-name()]],peci:Severance_Date[@*[local-name()]],peci:Retirement_Date[@*[local-name()]],peci:Benefits_Service_Date[@*[local-name()]],peci:Company_Service_Date[@*[local-name()]],
                peci:Time_Off_Service_Date[@*[local-name()]],peci:Vesting_Date[@*[local-name()]],peci:Resignation_Date[@*[local-name()]],peci:Termination_Last_Day_of_Work[@*[local-name()]],peci:Date_Entered_Workforce[@*[local-name()]],
                peci:Last_Date_for_Which_Paid[@*[local-name()]],peci:Expected_Date_of_Return[@*[local-name()]],peci:Date_of_Death[@*[local-name()]],peci:Probation_Start_Date[@*[local-name()]],peci:Probation_End_Date[@*[local-name()]])"/>
        </xsl:variable>
        <xsl:if test="string-length($dateFlag) > 0">
            <nga:DateSpecifications>
                <xsl:if test="string-length(peci:Active_Status_Date[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'Active_Status_Date'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:Active_Status_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Active_Status_Date[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if>
                <xsl:if test="string-length(peci:Hire_Date[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'Hire_Date'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:Hire_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Hire_Date[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if>
                <xsl:if test="string-length(peci:End_Employment_Date[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'End_Employment_Date'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:End_Employment_Date[@*[local-name() != 'isDeleted']],1,10)"/>        
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:End_Employment_Date[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if>
                <xsl:if test="string-length(peci:Continuous_Service_Date[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'ContinuousServiceDate'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:Continuous_Service_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Continuous_Service_Date[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if> 
                <xsl:if test="string-length(peci:Seniority_Date[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'SeniorityDate'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:Seniority_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Seniority_Date[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if>
                <xsl:if test="string-length(peci:Severance_Date[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'Severance_Date'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:Severance_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Severance_Date[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if>
                <xsl:if test="string-length(peci:Retirement_Date[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'Retirement_Date'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:Retirement_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Retirement_Date[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if>
                <xsl:if test="string-length(peci:Benefits_Service_Date[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'Benefits_Service_Date'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:Benefits_Service_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Benefits_Service_Date[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if>
                <xsl:if test="string-length(peci:Company_Service_Date[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'Company_Service_Date'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:Company_Service_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Company_Service_Date[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if>
                <xsl:if test="string-length(peci:Time_Off_Service_Date[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'Time_Off_Service_Date'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:Time_Off_Service_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Time_Off_Service_Date[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if>
                <xsl:if test="string-length(peci:Vesting_Date[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'Vesting_Date'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:Vesting_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Vesting_Date[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if>
                <xsl:if test="string-length(peci:Resignation_Date[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'Resignation_Date'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:Resignation_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Resignation_Date[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if>
                <xsl:if test="string-length(peci:Termination_Last_Day_of_Work[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'Termination_Last_Day_of_Work'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:Termination_Last_Day_of_Work[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Termination_Last_Day_of_Work[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if>
                <xsl:if test="string-length(peci:Date_Entered_Workforce[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'Date_Entered_Workforce'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:Date_Entered_Workforce[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Termination_Last_Day_of_Work[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if>
                <xsl:if test="string-length(peci:Last_Date_for_Which_Paid[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'Last_Date_for_Which_Paid'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:Last_Date_for_Which_Paid[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Last_Date_for_Which_Paid[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if>
                <xsl:if test="string-length(peci:Expected_Date_of_Return[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'Expected_Date_of_Return'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:Expected_Date_of_Return[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Expected_Date_of_Return[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if>
                <xsl:if test="string-length(peci:Date_of_Death[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'Date_of_Death'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:Date_of_Death[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Date_of_Death[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if>
                <xsl:if test="string-length(peci:Probation_Start_Date[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'Probation_Start_Date'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:Probation_Start_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Probation_Start_Date[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if>
                <xsl:if test="string-length(peci:Probation_End_Date[@*[local-name() != 'isDeleted']]) > 0">
                    <nga:Date>
                        <xsl:attribute name="DateType">
                            <xsl:value-of select="'Probation_End_Date'"/>
                        </xsl:attribute>
                        <xsl:value-of select="substring(peci:Probation_End_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Probation_End_Date[@*[local-name() != 'isDeleted']]">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </nga:Date>
                </xsl:if>
            </nga:DateSpecifications>
        </xsl:if>
    </xsl:template>
    
    <!--       nga:ContractElements          -->
    <xsl:template name="nga:ContractElements">      
        <nga:ContractElements>
            <xsl:if test="string-length(peci:Start_Date) > 0">
                <xsl:attribute name="validFrom">
                    <xsl:call-template name="insertDateWithDash">
                        <xsl:with-param name="date"
                            select="substring(peci:Start_Date,1,10)"/>
                    </xsl:call-template>
                    <xsl:call-template name="usedPECIData">
                        <xsl:with-param name="xpath">
                            <xsl:for-each select="peci:Start_Date">
                                <xsl:call-template name="print-field-xpath"/> 
                            </xsl:for-each>                       
                        </xsl:with-param>
                    </xsl:call-template>
                </xsl:attribute> 
            </xsl:if>     
            <xsl:if test="string-length(peci:Contract_Type)>0">
                <nga:ContractType>
                    <xsl:value-of select="peci:Contract_Type"/>
                    <xsl:call-template name="usedPECIData">
                        <xsl:with-param name="xpath">
                            <xsl:for-each select="peci:Contract_Type">
                                <xsl:call-template name="print-field-xpath"/> 
                            </xsl:for-each>                       
                        </xsl:with-param>
                    </xsl:call-template>
                </nga:ContractType>
            </xsl:if>               
            <xsl:if test="string-length(peci:Start_Date)>0">
                <nga:ContractStartDate>
                    <xsl:call-template name="insertDateWithDash">
                        <xsl:with-param name="date" select="substring(peci:Start_Date,1,10)"/>
                    </xsl:call-template>
                    <xsl:call-template name="usedPECIData">
                        <xsl:with-param name="xpath">
                            <xsl:for-each select="peci:Start_Date">
                                <xsl:call-template name="print-field-xpath"/> 
                            </xsl:for-each>                       
                        </xsl:with-param>
                    </xsl:call-template>
                </nga:ContractStartDate>                                      
            </xsl:if>
            <xsl:if test="string-length(peci:End_Date)>0">
                <nga:ContractEndDate>
                    <xsl:call-template name="insertDateWithDash">
                        <xsl:with-param name="date" select="substring(peci:End_Date,1,10)"/>
                    </xsl:call-template>
                    <xsl:call-template name="usedPECIData">
                        <xsl:with-param name="xpath">
                            <xsl:for-each select="peci:End_Date">
                                <xsl:call-template name="print-field-xpath"/> 
                            </xsl:for-each>                       
                        </xsl:with-param>
                    </xsl:call-template>
                </nga:ContractEndDate>
            </xsl:if>
        </nga:ContractElements>   
     </xsl:template>
    
    
    <!--       nga:OrganizationTemplate      -->
    <xsl:template name="nga:OrganizationTemplate">
        <xsl:param name="effectiveMomentDate"/>
        <xsl:param name="bodType"/>
        <xsl:param name="checkLogicalID"/>
        <xsl:variable name="vLcc" select="substring($checkLogicalID,5,5)"/>
        <xsl:variable name="costCenterName" select="/CLUBBEDXML/CustomerConfig/Rows[MAPPING='CostCenterName' and LCC = $vLcc]/VALUE"/>        
        <xsl:if test="$bodType = ('costAssignmentPosition')">
            <xsl:choose>
                <xsl:when test="@*[local-name() = 'isAdded']">
                    <xsl:if test="peci:Organization_Type = 'COST_CENTER'">
                        <nga:CostAssignment>
                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                <xsl:attribute name="validFrom">
                                    <xsl:value-of select="$effectiveMomentDate"/>
                                </xsl:attribute>
                            </xsl:if>
                            <nga:CostCenterCode>
                                <xsl:value-of select="peci:Organization_Code"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Organization_Code">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </nga:CostCenterCode>
                            <xsl:if test="string-length($costCenterName) > 0">
                                <nga:CostCenterName>
                                    <xsl:value-of select="peci:Organization_Name"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Organization_Name">
                                                <xsl:call-template name="print-field-xpath"/>            
                                            </xsl:for-each>   
                                        </xsl:with-param>
                                    </xsl:call-template>  
                                </nga:CostCenterName>
                            </xsl:if>
                            <oa:Percentage>
                                <xsl:value-of select="100"/>
                            </oa:Percentage>      
                        </nga:CostAssignment>
                    </xsl:if>                              
                </xsl:when>
                <xsl:when test="@*[local-name() = 'isUpdated']">
                    <xsl:if test="peci:Organization_Type = 'COST_CENTER'">
                        <nga:CostAssignment>
                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                <xsl:attribute name="validFrom">
                                    <xsl:value-of select="$effectiveMomentDate"/>
                                </xsl:attribute>
                            </xsl:if>
                            <nga:CostCenterCode>
                                <xsl:value-of select="peci:Organization_Code[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Organization_Code[@*[local-name() != 'isDeleted']]">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </nga:CostCenterCode>
                            <xsl:if test="string-length($costCenterName) > 0">
                                <nga:CostCenterName>
                                    <xsl:value-of select="peci:Organization_Name"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Organization_Name">
                                                <xsl:call-template name="print-field-xpath"/>            
                                            </xsl:for-each>   
                                        </xsl:with-param>
                                    </xsl:call-template>  
                                </nga:CostCenterName>
                            </xsl:if>
                            <oa:Percentage>
                                <xsl:value-of select="100"/>
                            </oa:Percentage>      
                        </nga:CostAssignment>
                    </xsl:if>       
                </xsl:when>
                <xsl:otherwise>
                    <xsl:if test="@*[local-name() = 'isDeleted']">
                        <xsl:if test="peci:Organization_Type = 'COST_CENTER'">
                            <nga:CostAssignment>
                                <xsl:if test="string-length($effectiveMomentDate) > 0">
                                    <xsl:attribute name="validFrom">
                                        <xsl:value-of select="$effectiveMomentDate"/>
                                    </xsl:attribute>
                                </xsl:if>
                                <nga:CostCenterCode>
                                    <xsl:value-of select="peci:Organization_Code[@*[local-name() = 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Organization_Code[@*[local-name() = 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:CostCenterCode>
                                <xsl:if test="string-length($costCenterName) > 0">
                                    <nga:CostCenterName>
                                        <xsl:value-of select="peci:Organization_Name"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Organization_Name">
                                                    <xsl:call-template name="print-field-xpath"/>            
                                                </xsl:for-each>   
                                            </xsl:with-param>
                                        </xsl:call-template>  
                                    </nga:CostCenterName>
                                </xsl:if>
                                <oa:Percentage>
                                    <xsl:value-of select="100"/>
                                </oa:Percentage>      
                            </nga:CostAssignment>
                        </xsl:if>
                    </xsl:if>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:if>
        <xsl:if test="$bodType = ('costAssignmentHomeOrg','costAssignmentDeleteHomeOrg')">
            <nga:CostAssignment>
                <xsl:if test="string-length($effectiveMomentDate) > 0">
                    <xsl:attribute name="validFrom">
                        <xsl:choose>
                            <xsl:when test="$bodType = 'costAssignmentDeleteHomeOrg'">
                                <xsl:value-of select="$effectiveMomentDate"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="xs:date($effectiveMomentDate) + xs:dayTimeDuration('P1D')"/>
                            </xsl:otherwise>
                        </xsl:choose>                        
                    </xsl:attribute>
                </xsl:if>
                <nga:CostCenterCode>
                    <xsl:value-of select="peci:Organization_Code[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                    <xsl:call-template name="usedPECIData">
                        <xsl:with-param name="xpath">
                            <xsl:for-each select="peci:Organization_Code[@*[local-name() != 'isDeleted']]">
                                <xsl:call-template name="print-field-xpath"/> 
                            </xsl:for-each>                       
                        </xsl:with-param>
                    </xsl:call-template>
                </nga:CostCenterCode>
                <oa:Percentage>
                    <xsl:value-of select="100"/>
                </oa:Percentage>      
            </nga:CostAssignment>
         </xsl:if>
        <xsl:if test="$bodType = 'position'">
            <xsl:if test="@*[local-name() = 'isAdded']">
                <xsl:for-each select="peci:Organization[string-length(@*[local-name()]) = 0]">
                    <xsl:if test="peci:Organization_Type = 'COST_CENTER'">
                        <nga:CostAssignment>
                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                <xsl:attribute name="validFrom">
                                    <xsl:value-of select="$effectiveMomentDate"/>
                                </xsl:attribute>
                            </xsl:if>
                            <nga:CostCenterCode>
                                <xsl:value-of select="peci:Organization_Code"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Organization_Code">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </nga:CostCenterCode>
                            <xsl:if test="string-length($costCenterName) > 0">
                                <nga:CostCenterName>
                                    <xsl:value-of select="peci:Organization_Name"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Organization_Name">
                                                <xsl:call-template name="print-field-xpath"/>            
                                            </xsl:for-each>   
                                        </xsl:with-param>
                                    </xsl:call-template>  
                                </nga:CostCenterName>
                            </xsl:if>
                            <oa:Percentage>
                                <xsl:value-of select="100"/>
                            </oa:Percentage>      
                        </nga:CostAssignment>
                    </xsl:if>                           
                </xsl:for-each>
                </xsl:if>
        </xsl:if>
        
    </xsl:template>
    
    <!--        nga:PayScalesTemplate           -->
    <xsl:template name="nga:PayScalesTemplate">
        <xsl:param name="effectiveMomentDate"/>
        <xsl:param name="bodType"/>
        <xsl:variable name="payScaleFlag">
            <xsl:choose>
                <xsl:when test="$bodType = 'position'">
                    <xsl:choose>
                        <xsl:when test="@*[local-name() = 'isAdded']">
                            <xsl:value-of select="concat(ptdf:PayScaleType,ptdf:PayScaleGroup,ptdf:PayScaleLevel)"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="concat(ptdf:PayScaleType[@*[local-name()]],ptdf:PayScaleGroup[@*[local-name()]],ptdf:PayScaleLevel[@*[local-name()]])"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="concat(../peci:Additional_Information[@*[local-name()]]/ptdf:PayScaleType[@*[local-name()]],../peci:Additional_Information[@*[local-name()]]/ptdf:PayScaleGroup[@*[local-name()]], ../peci:Additional_Information[@*[local-name()]]/ptdf:PayScaleLevel[@*[local-name()]])"/>                    
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:choose>
            <xsl:when test="string-length($payScaleFlag) > 0 and $bodType = 'position'">
                <xsl:choose>
                    <xsl:when test="@*[local-name() = 'isAdded']">
                        <nga:PayScales>
                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                            </xsl:if>
                            <xsl:if test="string-length(ptdf:PayScaleType) > 0 and ptdf:PayScaleType != 'N/A'">
                                <nga:PayScaleType>
                                    <xsl:value-of select="ptdf:PayScaleType"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayScaleType">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayScaleType>
                            </xsl:if>
                            <xsl:if test="string-length(ptdf:PayScaleGroup) &gt; 0">
                                <nga:PayScaleGroup>
                                    <xsl:value-of select="ptdf:PayScaleGroup"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayScaleGroup">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayScaleGroup>
                            </xsl:if>
                            <xsl:if test="string-length(ptdf:PayScaleLevel) &gt; 0">
                                <nga:PayScaleLevel>
                                    <xsl:value-of select="ptdf:PayScaleLevel"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayScaleLevel">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayScaleLevel>
                            </xsl:if>
                        </nga:PayScales>
                    </xsl:when>
                    <xsl:otherwise>
                        <nga:PayScales>
                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                            </xsl:if>
                            <xsl:if test="string-length(ptdf:PayScaleType[@*[local-name() != 'isDeleted']]) > 0 and ptdf:PayScaleType[@*[local-name() != 'isDeleted']] != 'N/A'">
                                <nga:PayScaleType>
                                    <xsl:value-of select="ptdf:PayScaleType[@*[local-name() != 'isDeleted']]"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayScaleType[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayScaleType>
                            </xsl:if>
                            <xsl:if test="string-length(ptdf:PayScaleGroup[@*[local-name() != 'isDeleted']]) &gt; 0">
                                <nga:PayScaleGroup>
                                    <xsl:value-of select="ptdf:PayScaleGroup[@*[local-name() != 'isDeleted']]"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayScaleGroup[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayScaleGroup>
                            </xsl:if>
                            <xsl:if test="string-length(ptdf:PayScaleLevel[@*[local-name()]]) &gt; 0">
                                <nga:PayScaleLevel>
                                    <xsl:value-of select="ptdf:PayScaleLevel[@*[local-name() != 'isDeleted']]"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayScaleLevel[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayScaleLevel>
                            </xsl:if>
                        </nga:PayScales>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:if test="string-length($payScaleFlag) > 0 and $bodType = 'additionalInfo'">
                    <nga:PayScales>
                        <xsl:if test="string-length($effectiveMomentDate) > 0">
                            <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                        </xsl:if>
                        <xsl:if test="string-length(../peci:Additional_Information[@*[local-name()]]/ptdf:PayScaleType[@*[local-name() != 'isDeleted']]) > 0 and ../peci:Additional_Information[@*[local-name()]]/ptdf:PayScaleType[@*[local-name() != 'isDeleted']] != 'N/A'">
                            <nga:PayScaleType>
                                <xsl:value-of select="../peci:Additional_Information[@*[local-name()]]/ptdf:PayScaleType[@*[local-name() != 'isDeleted']]"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="../peci:Additional_Information[@*[local-name()]]/ptdf:PayScaleType[@*[local-name() != 'isDeleted']]">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </nga:PayScaleType>
                        </xsl:if>
                        <xsl:if test="string-length(../peci:Additional_Information[@*[local-name()]]/ptdf:PayScaleGroup[@*[local-name() != 'isDeleted']]) &gt; 0">
                            <nga:PayScaleGroup>
                                <xsl:value-of select="../peci:Additional_Information[@*[local-name()]]/ptdf:PayScaleGroup[@*[local-name() != 'isDeleted']]"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="../peci:Additional_Information[@*[local-name()]]/ptdf:PayScaleGroup[@*[local-name() != 'isDeleted']]">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </nga:PayScaleGroup>
                        </xsl:if>
                        <xsl:if test="string-length(../peci:Additional_Information[@*[local-name()]]/ptdf:PayScaleLevel[@*[local-name()]]) &gt; 0">
                            <nga:PayScaleLevel>
                                <xsl:value-of select="../peci:Additional_Information[@*[local-name()]]/ptdf:PayScaleLevel[@*[local-name() != 'isDeleted']]"/>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="../peci:Additional_Information[@*[local-name()]]/ptdf:PayScaleLevel[@*[local-name() != 'isDeleted']]">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </nga:PayScaleLevel>
                        </xsl:if>
                    </nga:PayScales>
                </xsl:if>      
            </xsl:otherwise>
        </xsl:choose>
        </xsl:template>
    
    <!--     nga:PayrollSpecificGroupingTemplate     -->
    <xsl:template name="nga:PayrollSpecificGroupingTemplate">
        <xsl:param name="effectiveMomentDate"/>
        <xsl:param name="attribute"/>
        <xsl:param name="bodType"/>
        
        <xsl:choose>
            <xsl:when test="$bodType ='position'">
                <xsl:choose>
                    <xsl:when test="@*[local-name() = 'isAdded']">
                        <nga:PayrollSpecificGroupings>
                            <xsl:if test="ptdf:PayrollSpecificGrouping1 and (../peci:Person_Identification/peci:Visa/peci:Country != 'CH' or count(../peci:Person_Identification/peci:Visa) =0)">
                                <nga:PayrollSpecificGrouping1>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                                
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping1)"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping1">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping1>
                            </xsl:if>
                            <xsl:if test="ptdf:PayrollSpecificGrouping2">
                                <nga:PayrollSpecificGrouping2>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                      
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping2)"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping2">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping2>
                            </xsl:if>
                            <xsl:if test="../ptdf:PayrollSpecificGrouping3">
                                <nga:PayrollSpecificGrouping3>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                         
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping3)"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping3">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping3>
                            </xsl:if>
                            <xsl:if test="ptdf:PayrollSpecificGrouping4">
                                <nga:PayrollSpecificGrouping4>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                      
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping4)"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping4">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping4>
                            </xsl:if>
                            <xsl:if test="ptdf:PayrollSpecificGrouping5">
                                <nga:PayrollSpecificGrouping5>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                      
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping5)"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping5">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping5>
                            </xsl:if>
                            <xsl:if test="ptdf:PayrollSpecificGrouping6">
                                <nga:PayrollSpecificGrouping6>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                       
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping6)"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping6">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping6>
                            </xsl:if>
                            <xsl:if test="ptdf:PayrollSpecificGrouping7">
                                <nga:PayrollSpecificGrouping7>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                      
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping7)"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping7">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping7>
                            </xsl:if>
                            <xsl:if test="ptdf:PayrollSpecificGrouping8">
                                <nga:PayrollSpecificGrouping8>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                         
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping8)"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping8">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping8>
                            </xsl:if>
                            <xsl:if test="ptdf:PayrollSpecificGrouping9">
                                <nga:PayrollSpecificGrouping9>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                        
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping9)"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping9">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping9>
                            </xsl:if>
                            <xsl:if test="ptdf:PayrollSpecificGrouping10">
                                <nga:PayrollSpecificGrouping10>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                        
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping10)"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping10">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping10>
                            </xsl:if>
                        </nga:PayrollSpecificGroupings>
                    </xsl:when>
                    <xsl:otherwise>
                        <nga:PayrollSpecificGroupings>
                            <xsl:if test="ptdf:PayrollSpecificGrouping1[@*[local-name()]] and (../peci:Person_Identification[@*[local-name()]]/peci:Visa[@*[local-name()]]/peci:Country != 'CH' or count(../peci:Person_Identification[@*[local-name()]]/peci:Visa[@*[local-name()]]) =0)">
                                <nga:PayrollSpecificGrouping1>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                                
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping1[@*[local-name() != 'isDeleted']])"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping1[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping1>
                            </xsl:if>
                            <xsl:if test="ptdf:PayrollSpecificGrouping2[@*[local-name() != 'isDeleted']]">
                                <nga:PayrollSpecificGrouping2>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                      
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping2[@*[local-name() != 'isDeleted']])"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping2[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping2>
                            </xsl:if>
                            <xsl:if test="ptdf:PayrollSpecificGrouping3[@*[local-name() != 'isDeleted']]">
                                <nga:PayrollSpecificGrouping3>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                         
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping3[@*[local-name() != 'isDeleted']])"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping3[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping3>
                            </xsl:if>
                            <xsl:if test="ptdf:PayrollSpecificGrouping4[@*[local-name() != 'isDeleted']]">
                                <nga:PayrollSpecificGrouping4>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                      
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping4[@*[local-name() != 'isDeleted']])"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping4[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping4>
                            </xsl:if>
                            <xsl:if test="ptdf:PayrollSpecificGrouping5[@*[local-name() != 'isDeleted']]">
                                <nga:PayrollSpecificGrouping5>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                      
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping5[@*[local-name() != 'isDeleted']])"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping5[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping5>
                            </xsl:if>
                            <xsl:if test="ptdf:PayrollSpecificGrouping6[@*[local-name() != 'isDeleted']]">
                                <nga:PayrollSpecificGrouping6>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                       
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping6[@*[local-name() != 'isDeleted']])"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping6[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping6>
                            </xsl:if>
                            <xsl:if test="ptdf:PayrollSpecificGrouping7[@*[local-name() != 'isDeleted']]">
                                <nga:PayrollSpecificGrouping7>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                      
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping7[@*[local-name() != 'isDeleted']])"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping7[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping7>
                            </xsl:if>
                            <xsl:if test="ptdf:PayrollSpecificGrouping8[@*[local-name() != 'isDeleted']]">
                                <nga:PayrollSpecificGrouping8>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                         
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping8[@*[local-name() != 'isDeleted']])"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping8[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping8>
                            </xsl:if>
                            <xsl:if test="ptdf:PayrollSpecificGrouping9[@*[local-name() != 'isDeleted']]">
                                <nga:PayrollSpecificGrouping9>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                        
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping9[@*[local-name() != 'isDeleted']])"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping9[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping9>
                            </xsl:if>
                            <xsl:if test="ptdf:PayrollSpecificGrouping10[@*[local-name() != 'isDeleted']]">
                                <nga:PayrollSpecificGrouping10>
                                    <xsl:if test="string-length($effectiveMomentDate) > 0">
                                        <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                                    </xsl:if>                                        
                                    <xsl:value-of select="normalize-space(ptdf:PayrollSpecificGrouping10[@*[local-name() != 'isDeleted']])"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="ptdf:PayrollSpecificGrouping10[@*[local-name() != 'isDeleted']]">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:PayrollSpecificGrouping10>
                            </xsl:if>
                        </nga:PayrollSpecificGroupings>                
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <nga:PayrollSpecificGroupings>
                    <xsl:if test="../ptdf:PayrollSpecificGrouping1[@*[local-name() = $attribute]] and (../../peci:Person_Identification[@*[local-name()]]/peci:Visa[@*[local-name()]]/peci:Country != 'CH' or count(../../peci:Person_Identification[@*[local-name()]]/peci:Visa[@*[local-name()]]) =0)">
                        <nga:PayrollSpecificGrouping1>
                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                            </xsl:if>                                                
                            <xsl:value-of select="normalize-space(../ptdf:PayrollSpecificGrouping1[@*[local-name() = $attribute]])"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="../ptdf:PayrollSpecificGrouping1[@*[local-name() != 'isDeleted']]">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PayrollSpecificGrouping1>
                    </xsl:if>
                    <xsl:if test="../ptdf:PayrollSpecificGrouping2[@*[local-name() = $attribute]]">
                        <nga:PayrollSpecificGrouping2>
                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                            </xsl:if>                                      
                            <xsl:value-of select="normalize-space(../ptdf:PayrollSpecificGrouping2[@*[local-name() = $attribute]])"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="../ptdf:PayrollSpecificGrouping2[@*[local-name() != 'isDeleted']]">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PayrollSpecificGrouping2>
                    </xsl:if>
                    <xsl:if test="../ptdf:PayrollSpecificGrouping3[@*[local-name() = $attribute]]">
                        <nga:PayrollSpecificGrouping3>
                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                            </xsl:if>                                         
                            <xsl:value-of select="normalize-space(../ptdf:PayrollSpecificGrouping3[@*[local-name() = $attribute]])"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="../ptdf:PayrollSpecificGrouping3[@*[local-name() != 'isDeleted']]">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PayrollSpecificGrouping3>
                    </xsl:if>
                    <xsl:if test="../ptdf:PayrollSpecificGrouping4[@*[local-name() = $attribute]]">
                        <nga:PayrollSpecificGrouping4>
                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                            </xsl:if>                                      
                            <xsl:value-of select="normalize-space(../ptdf:PayrollSpecificGrouping4[@*[local-name() = $attribute]])"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="../ptdf:PayrollSpecificGrouping4[@*[local-name() != 'isDeleted']]">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PayrollSpecificGrouping4>
                    </xsl:if>
                    <xsl:if test="../ptdf:PayrollSpecificGrouping5[@*[local-name() = $attribute]]">
                        <nga:PayrollSpecificGrouping5>
                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                            </xsl:if>                                      
                            <xsl:value-of select="normalize-space(../ptdf:PayrollSpecificGrouping5[@*[local-name() = $attribute]])"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="../ptdf:PayrollSpecificGrouping5[@*[local-name() != 'isDeleted']]">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PayrollSpecificGrouping5>
                    </xsl:if>
                    <xsl:if test="../ptdf:PayrollSpecificGrouping6[@*[local-name() = $attribute]]">
                        <nga:PayrollSpecificGrouping6>
                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                            </xsl:if>                                       
                            <xsl:value-of select="normalize-space(../ptdf:PayrollSpecificGrouping6[@*[local-name() = $attribute]])"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="../ptdf:PayrollSpecificGrouping6[@*[local-name() != 'isDeleted']]">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PayrollSpecificGrouping6>
                    </xsl:if>
                    <xsl:if test="../ptdf:PayrollSpecificGrouping7[@*[local-name() = $attribute]]">
                        <nga:PayrollSpecificGrouping7>
                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                            </xsl:if>                                      
                            <xsl:value-of select="normalize-space(../ptdf:PayrollSpecificGrouping7[@*[local-name() = $attribute]])"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="../ptdf:PayrollSpecificGrouping7[@*[local-name() != 'isDeleted']]">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PayrollSpecificGrouping7>
                    </xsl:if>
                    <xsl:if test="../ptdf:PayrollSpecificGrouping8[@*[local-name() = $attribute]]">
                        <nga:PayrollSpecificGrouping8>
                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                            </xsl:if>                                         
                            <xsl:value-of select="normalize-space(../ptdf:PayrollSpecificGrouping8[@*[local-name() = $attribute]])"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="../ptdf:PayrollSpecificGrouping8[@*[local-name() != 'isDeleted']]">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PayrollSpecificGrouping8>
                    </xsl:if>
                    <xsl:if test="../ptdf:PayrollSpecificGrouping9[@*[local-name() = $attribute]]">
                        <nga:PayrollSpecificGrouping9>
                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                            </xsl:if>                                        
                            <xsl:value-of select="normalize-space(../ptdf:PayrollSpecificGrouping9[@*[local-name() = $attribute]])"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="../ptdf:PayrollSpecificGrouping9[@*[local-name() != 'isDeleted']]">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PayrollSpecificGrouping9>
                    </xsl:if>
                    <xsl:if test="../ptdf:PayrollSpecificGrouping10[@*[local-name() = $attribute]]">
                        <nga:PayrollSpecificGrouping10>
                            <xsl:if test="string-length($effectiveMomentDate) > 0">
                                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                            </xsl:if>                                        
                            <xsl:value-of select="normalize-space(../ptdf:PayrollSpecificGrouping10[@*[local-name() = $attribute]])"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="../ptdf:PayrollSpecificGrouping10[@*[local-name() != 'isDeleted']]">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:PayrollSpecificGrouping10>
                    </xsl:if>
                </nga:PayrollSpecificGroupings>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <!--       nga:PayElementTemplate      -->
    <xsl:template name="nga:PayElementTemplate">
        <xsl:param name="effectiveMomentDate"/>
        <xsl:param name="bodType"/>
        <xsl:for-each select="current-group()">
            <nga:PayElement>                
                <xsl:choose>
                    <xsl:when test="$bodType= ('payrollInputEarningsDeductions')">
                        <xsl:if test="string-length(peci:Start_Date) > 0">
                            <xsl:attribute name="validFrom" select="substring(peci:Start_Date,1,10)"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:XPath,'/',name(peci:Start_Date))"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:if>                                                        
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:if test="string-length($effectiveMomentDate) > 0">
                            <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                        </xsl:if>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="$bodType=('payrollInputEarningsDeductions')">
                        <xsl:if test="string-length(peci:End_Date) > 0">
                            <xsl:attribute name="validTo" select="substring(peci:End_Date,1,10)"/>
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:XPath,'/',name(peci:End_Date))"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:if>                                                        
                    </xsl:when>   
                </xsl:choose>                            
                <hr:ID>
                    <xsl:value-of select="peci:External_Payroll_Code"/> 
                    <xsl:choose>
                        <xsl:when test="$bodType = ('compensationEarningsDeductions','payrollInputEarningsDeductions')">
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:XPath,'/',name(peci:External_Payroll_Code))"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:External_Payroll_Code">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:otherwise>
                    </xsl:choose>
                </hr:ID>
                <nga:PayElementType>RECURRING</nga:PayElementType>
                <nga:Amount>
                    <xsl:choose>
                        <xsl:when test="$bodType = 'compensationEarningsDeductions'">
                            <xsl:choose>
                                <xsl:when test="string-length(peci:Non_Prorated_Amount) > 0">
                                    <xsl:choose>
                                        <xsl:when test="contains(peci:Non_Prorated_Amount,'.')">
                                            <xsl:value-of select="peci:Non_Prorated_Amount"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:value-of select="format-number(xs:decimal(peci:Non_Prorated_Amount), '0.00')"/>
                                        </xsl:otherwise>
                                    </xsl:choose>                                    
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:Non_Prorated_Amount))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>
                                <xsl:when test="string-length(peci:Amount) > 0">
                                    <xsl:choose>
                                        <xsl:when test="contains(peci:Amount,'.')">
                                            <xsl:value-of select="peci:Amount"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:value-of select="format-number(xs:decimal(peci:Amount), '0.00')"/>
                                        </xsl:otherwise>
                                    </xsl:choose>                                   
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:Amount))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="contains(peci:Amount,'.')">
                                    <xsl:value-of select="peci:Amount"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="format-number(xs:decimal(peci:Amount), '0.00')"/>
                                </xsl:otherwise>
                            </xsl:choose>                           
                            <xsl:choose>
                                <xsl:when test="$bodType= ('payrollInputEarningsDeductions')">
                                    <xsl:variable name="nodePath">
                                        <xsl:value-of select="concat(nga:XPath,'/',name(peci:Amount))"/>
                                    </xsl:variable>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath" select="$nodePath">                                                               
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Amount">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:otherwise>
                    </xsl:choose>                                
                </nga:Amount>      
                <xsl:if test="string-length(peci:Worktag/peci:Worktag_Code) > 0 and peci:Worktag/peci:Worktag_Dimension = 'COST_CENTER'">
                    <nga:CostCenterCode>
                        <xsl:value-of select="peci:Worktag/peci:Worktag_Code"/>
                        <xsl:choose>
                            <xsl:when test="$bodType = ('compensationEarningsDeductions','payrollInputEarningsDeductions')">
                                <xsl:variable name="nodePath">
                                    <xsl:value-of select="concat(nga:XPath,'/','peci:Worktag/peci:Worktag_Code')"/>
                                </xsl:variable>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath" select="$nodePath">                                                               
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Worktag/peci:Worktag_Code">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </xsl:otherwise>
                        </xsl:choose>
                    </nga:CostCenterCode>
                </xsl:if>      
                <hr:CurrencyCode>
                    <xsl:value-of select="peci:Currency"/>
                    <xsl:choose>
                        <xsl:when test="$bodType = ('compensationEarningsDeductions','payrollInputEarningsDeductions')">
                            <xsl:variable name="nodePath">
                                <xsl:value-of select="concat(nga:XPath,'/',name(peci:Currency))"/>
                            </xsl:variable>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath" select="$nodePath">                                                               
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Currency">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:otherwise>
                    </xsl:choose>
                </hr:CurrencyCode>                        
            </nga:PayElement>       
        </xsl:for-each>      
    </xsl:template>
    
    <!--       nga:PayElementTemplate      -->
    <xsl:template name="nga:PayElementTemplateNonGrouping">
        <xsl:param name="effectiveMomentDate"/>
        <xsl:param name="checkLogicalID"/>       
        <xsl:param name="bodType"/> 
        <xsl:param name="actionCode"/>
        <xsl:variable name="vGcc" select="substring($checkLogicalID,1,3)"/>
        <xsl:variable name="vLcc" select="substring($checkLogicalID,5,5)"/>
        
            <nga:PayElement>                
                <xsl:choose>
                    <xsl:when test="$bodType= ('allowancePlan','compensationPlan')">
                        <xsl:if test="string-length(peci:Start_Date) > 0">
                            <xsl:attribute name="validFrom" select="substring(peci:Start_Date,1,10)"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Start_Date">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:if>                                                        
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:if test="string-length($effectiveMomentDate) > 0">
                            <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                            <!--<xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="$effectiveMomentDate">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>-->
                        </xsl:if>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="$bodType=('allowancePlan','compensationPlan')">
                        <xsl:if test="string-length(peci:End_Date) > 0">
                            <xsl:attribute name="validTo" select="substring(peci:End_Date,1,10)"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:End_Date">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:if>                                                        
                    </xsl:when>   
                </xsl:choose>               
                <hr:ID>
                    <xsl:choose>
                        <xsl:when test="$bodType = ('allowancePlan','compensationPlan')">
                            <xsl:value-of select="peci:Compensation_Plan"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Compensation_Plan">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="peci:External_Payroll_Code"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:External_Payroll_Code">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:otherwise>
                    </xsl:choose>                    
                </hr:ID>
                <xsl:choose>
                    <xsl:when test="$bodType = ('oneTimeCompensation','oneTimePayment')">
                        <nga:PayElementType>ADDITIONAL</nga:PayElementType>
                    </xsl:when>
                    <xsl:otherwise>
                        <nga:PayElementType>RECURRING</nga:PayElementType>
                    </xsl:otherwise>
                </xsl:choose>                
                <xsl:if test="string-length(peci:Amount) > 0 and $bodType != 'allowancePlan' and $bodType != 'compensationPlan'">                   
                    <xsl:choose>
                        <xsl:when test="(peci:Amount > 0 or peci:Amount/@peci:priorValue > 0) and $bodType = 'benefits'">
                            <xsl:choose>
                                <xsl:when test="$vGcc = 'THA' and $vLcc = 'AU001'">
                                    <xsl:choose>
                                        <xsl:when test="$actionCode = 'DELETE'">
                                            <nga:Amount>
                                                <xsl:choose>
                                                    <xsl:when test="contains(peci:Amount/@peci:priorValue,'.')">
                                                        <xsl:value-of select="peci:Amount/@peci:priorValue"/>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <xsl:value-of select="format-number(xs:decimal(peci:Amount/@peci:priorValue), '0.00')"/>      
                                                    </xsl:otherwise>
                                                </xsl:choose> 
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Amount">
                                                            <xsl:call-template name="print-field-xpath"/> 
                                                        </xsl:for-each>                       
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                            </nga:Amount>     
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <nga:Amount>
                                                <xsl:choose>
                                                    <xsl:when test="contains(peci:Amount,'.')">
                                                        <xsl:value-of select="peci:Amount"/>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <xsl:value-of select="format-number(xs:decimal(peci:Amount), '0.00')"/>      
                                                    </xsl:otherwise>
                                                </xsl:choose>  
                                                <xsl:call-template name="usedPECIData">
                                                    <xsl:with-param name="xpath">
                                                        <xsl:for-each select="peci:Amount">
                                                            <xsl:call-template name="print-field-xpath"/> 
                                                        </xsl:for-each>                       
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                            </nga:Amount>    
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:when>
                                <xsl:otherwise>
                                    <nga:Amount>
                                        <xsl:choose>
                                            <xsl:when test="contains(peci:Amount,'.')">
                                                <xsl:value-of select="peci:Amount"/>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of select="format-number(xs:decimal(peci:Amount), '0.00')"/>      
                                            </xsl:otherwise>
                                        </xsl:choose>                                
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Amount">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </nga:Amount>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$bodType != 'benefits'">
                            <nga:Amount>
                                <xsl:choose>
                                    <xsl:when test="contains(peci:Amount, '.')">
                                        <xsl:value-of select="peci:Amount"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:value-of select="format-number(xs:decimal(peci:Amount), '0.00')"/>
                                    </xsl:otherwise>
                                </xsl:choose>                                   
                                <xsl:call-template name="usedPECIData">
                                    <xsl:with-param name="xpath">
                                        <xsl:for-each select="peci:Amount">
                                            <xsl:call-template name="print-field-xpath"/> 
                                        </xsl:for-each>                       
                                    </xsl:with-param>
                                </xsl:call-template>
                            </nga:Amount>
                        </xsl:when>
                    </xsl:choose>                   
                </xsl:if>
                <xsl:choose>
                    <xsl:when test="$bodType = 'benefits' and (peci:Percentage > 0 or peci:Percentage/@peci:priorValue > 0)">
                        <xsl:choose>
                            <xsl:when test="$vGcc = 'THA' and $vLcc = 'AU001'">
                                <xsl:choose>
                                    <xsl:when test="$actionCode = 'DELETE'">
                                        <nga:Amount>
                                            <xsl:call-template name="percentageFormatting">
                                                <xsl:with-param name="value" select="peci:Percentage/@peci:priorValue"/>
                                            </xsl:call-template>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Percentage">
                                                        <xsl:call-template name="print-field-xpath"/> 
                                                    </xsl:for-each>                       
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </nga:Amount>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <nga:Amount>
                                            <xsl:call-template name="percentageFormatting">
                                                <xsl:with-param name="value" select="peci:Percentage"/>
                                            </xsl:call-template>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Percentage">
                                                        <xsl:call-template name="print-field-xpath"/> 
                                                    </xsl:for-each>                       
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </nga:Amount>
                                    </xsl:otherwise>
                                </xsl:choose>                               
                            </xsl:when>
                            <xsl:otherwise>
                                <nga:Units>
                                    <xsl:value-of select="format-number(xs:decimal(peci:Percentage) * 100, '0.00')"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Percentage">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:Units>
                                <nga:UnitType>PERCENT</nga:UnitType>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="$bodType != 'benefits' and string-length(peci:Percentage) > 0">
                        <xsl:choose>
                            <xsl:when test="$vGcc = 'THA' and $vLcc = 'AU001'">
                                <nga:Amount>
                                    <xsl:call-template name="percentageFormatting">
                                        <xsl:with-param name="value" select="peci:Percentage"/>
                                    </xsl:call-template>
                                </nga:Amount>
                            </xsl:when>
                            <xsl:otherwise>
                                <nga:Units>
                                    <xsl:value-of select="format-number(xs:decimal(peci:Percentage) * 100, '0.00')"/>
                                    <xsl:call-template name="usedPECIData">
                                        <xsl:with-param name="xpath">
                                            <xsl:for-each select="peci:Percentage">
                                                <xsl:call-template name="print-field-xpath"/> 
                                            </xsl:for-each>                       
                                        </xsl:with-param>
                                    </xsl:call-template>
                                </nga:Units>   
                                <nga:UnitType>PERCENT</nga:UnitType>   
                            </xsl:otherwise>
                        </xsl:choose>                            
                    </xsl:when>
                </xsl:choose>           
                <xsl:if test="string-length(peci:Worktag/peci:Worktag_Code) > 0 and peci:Worktag/peci:Worktag_Dimension = 'COST_CENTER'">
                    <xsl:if test="not($vGcc = 'THA' and $vLcc = 'AU001')">
                        <nga:CostCenterCode>
                            <xsl:value-of select="peci:Worktag/peci:Worktag_Code"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Worktag/peci:Worktag_Code">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </nga:CostCenterCode>
                    </xsl:if>                   
                </xsl:if>        
                <xsl:if test="not($vGcc = 'THA' and $vLcc = 'AU001')">
                    <hr:CurrencyCode>
                        <xsl:value-of select="peci:Currency"/>
                        <xsl:call-template name="usedPECIData">
                            <xsl:with-param name="xpath">
                                <xsl:for-each select="peci:Currency">
                                    <xsl:call-template name="print-field-xpath"/> 
                                </xsl:for-each>                       
                            </xsl:with-param>
                        </xsl:call-template>
                    </hr:CurrencyCode>          
                </xsl:if>                       
            </nga:PayElement>      
    </xsl:template>
    
    <xsl:template name="hr:IndicativeEmploymentStatusTemplate">
        <xsl:param name="bodType"/>
        <xsl:param name="effectiveMomentDate"/>
        <xsl:variable name="terminationDataChange">
            <xsl:value-of select="concat(peci:Primary_Termination_Reason[@*[local-name()]],peci:Termination_Date[@*[local-name()]],peci:Pay_Through_Date[@*[local-name()]])"/>
        </xsl:variable>
        <xsl:variable name="hireDataChange">
            <xsl:value-of select="concat(peci:Hire_Date[@*[local-name()]],peci:Original_Hire_Date[@*[local-name()]])"/>
        </xsl:variable>
        <xsl:if test="($bodType = ('workerStatusActive','workerStatus') and string-length($hireDataChange) > 0) or ($bodType = 'workerStatusTerminate' and string-length($terminationDataChange) > 0)">
            <hr:IndicativeEmployment>
                <hr:EmploymentLifecycle>
                    <xsl:if test="$bodType = 'workerStatusActive' and string-length(peci:Hire_Date[@*[local-name()]]) > 0">
                        <xsl:attribute name="validFrom">
                            <xsl:value-of select="substring(peci:Hire_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Hire_Date">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:attribute>
                    </xsl:if>
                    <xsl:if test="$bodType = 'workerStatus'">
                        <xsl:attribute name="validFrom">
                            <xsl:value-of select="$effectiveMomentDate"/>
                        </xsl:attribute>
                    </xsl:if>
                    <xsl:choose>
                        <xsl:when test="$bodType = ('workerStatusActive','workerStatus')">
                            <hr:Hire>
                                <xsl:if test="string-length(peci:Hire_Date[@*[local-name()]]) > 0 and $bodType = 'workerStatusActive'">
                                    <hr:HireDate>
                                        <xsl:value-of select="substring(peci:Hire_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                                        <xsl:call-template name="usedPECIData">
                                            <xsl:with-param name="xpath">
                                                <xsl:for-each select="peci:Hire_Date">
                                                    <xsl:call-template name="print-field-xpath"/> 
                                                </xsl:for-each>                       
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </hr:HireDate>
                                </xsl:if>
                                <xsl:if test="string-length(peci:Original_Hire_Date[@*[local-name()]]) > 0">
                                   <xsl:choose>
                                       <xsl:when test="$bodType = 'workerStatusActive'">
                                           <hr:OriginalHireDate>
                                               <xsl:value-of select="substring(peci:Original_Hire_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                                               <xsl:call-template name="usedPECIData">
                                                   <xsl:with-param name="xpath">
                                                       <xsl:for-each select="peci:Original_Hire_Date">
                                                           <xsl:call-template name="print-field-xpath"/> 
                                                       </xsl:for-each>                       
                                                   </xsl:with-param>
                                               </xsl:call-template>
                                           </hr:OriginalHireDate>      
                                       </xsl:when>
                                       <xsl:when test="$bodType = 'workerStatus'">
                                           <hr:OriginalHireDate>
                                               <xsl:value-of select="substring(peci:Original_Hire_Date[@*[local-name() != 'isDeleted']],1,10)"/>
                                               <xsl:call-template name="usedPECIData">
                                                   <xsl:with-param name="xpath">
                                                       <xsl:for-each select="peci:Original_Hire_Date">
                                                           <xsl:call-template name="print-field-xpath"/> 
                                                       </xsl:for-each>                       
                                                   </xsl:with-param>
                                               </xsl:call-template>
                                           </hr:OriginalHireDate>      
                                       </xsl:when>
                                   </xsl:choose>
                                </xsl:if>
                            </hr:Hire>
                        </xsl:when>
                        <xsl:when test="$bodType = 'workerStatusTerminate'">
                            <xsl:if test="string-length($terminationDataChange) > 0">
                                <hr:Termination>
                                    <xsl:if test="peci:Primary_Termination_Reason[@*[local-name()]]">
                                        <hr:TerminationReasonCode>
                                            <xsl:value-of select="peci:Primary_Termination_Reason[@*[local-name()]]"/>   
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Primary_Termination_Reason">
                                                        <xsl:call-template name="print-field-xpath"/> 
                                                    </xsl:for-each>                       
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </hr:TerminationReasonCode>
                                    </xsl:if>                            
                                    <xsl:if test="peci:Termination_Date[@*[local-name()]]">
                                        <hr:TerminationDate>
                                            <xsl:value-of select="substring(peci:Termination_Date[@*[local-name()]],1,10)"/>   
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Termination_Date">
                                                        <xsl:call-template name="print-field-xpath"/> 
                                                    </xsl:for-each>                       
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </hr:TerminationDate>
                                    </xsl:if>
                                    <xsl:if test="peci:Pay_Through_Date[@*[local-name()]]">
                                        <hr:LastPaidDate>
                                            <xsl:value-of select="substring(peci:Pay_Through_Date[@*[local-name()]],1,10)"/>
                                            <xsl:call-template name="usedPECIData">
                                                <xsl:with-param name="xpath">
                                                    <xsl:for-each select="peci:Pay_Through_Date">
                                                        <xsl:call-template name="print-field-xpath"/> 
                                                    </xsl:for-each>                       
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </hr:LastPaidDate>
                                    </xsl:if>                       
                                </hr:Termination>
                            </xsl:if>
                        </xsl:when>
                    </xsl:choose>               
                </hr:EmploymentLifecycle>
            </hr:IndicativeEmployment>    
        </xsl:if>
    </xsl:template>
  
    <!--    Alternate Identification Template      -->
    <xsl:template name="nga:AlternateIDTemplate">
        <xsl:param name="bodType"/>
        <xsl:variable name="operation">
            <xsl:choose>
                <xsl:when test="$bodType = 'personLegalIdAdd'">
                    <xsl:value-of select="'isAdded'"/>
                </xsl:when>
            </xsl:choose>
            <xsl:choose>
                <xsl:when test="$bodType = 'personLegalIdUpdate'">
                    <xsl:value-of select="'isUpdated'"/>
                </xsl:when>
            </xsl:choose>
            <xsl:choose>
                <xsl:when test="$bodType = 'personLegalIdDelete'">
                    <xsl:value-of select="'isDeleted'"/>
                </xsl:when>
            </xsl:choose>
        </xsl:variable>      
        <xsl:if test="$bodType = ('personLegalIdMain','personLegalIdAdd','personLegalIdUpdate','personLegalIdDelete')">
            <xsl:choose>                 
                <xsl:when test="$bodType = 'personLegalIdMain'">               
                    <nga:AlternateIdentifiers>
                        <xsl:for-each select="peci:National_Identifier">                               
                            <xsl:variable name="alternateID">
                                <xsl:call-template name="templateNationalIDType">
                                    <xsl:with-param name="NationalIDType" select="peci:National_ID_Type"/>
                                </xsl:call-template>
                            </xsl:variable>
                            <xsl:if test="string-length($alternateID) = 0">
                                <xsl:element name="nga:AlternateID">
                                    <xsl:attribute name="Type" select="peci:National_ID_Type"/>
                                    <xsl:value-of select="translate(peci:National_ID[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0],$removeChars,'')"/>
                                </xsl:element>
                            </xsl:if>              
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:National_ID_Type">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>         
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:National_ID">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>                    
                        </xsl:for-each>            
                        <!-- Government Identifier Mapping -->
                        <xsl:for-each select="peci:Government_Identifier">
                            <xsl:variable name="governmentID">
                                <xsl:call-template name="templateNationalIDType">
                                    <xsl:with-param name="NationalIDType" select="peci:Government_ID_Type"/>
                                </xsl:call-template>
                            </xsl:variable>
                            <xsl:if test="string-length($governmentID) = 0">
                                <xsl:element name="nga:AlternateID">
                                    <xsl:attribute name="Type" select="peci:Government_ID_Type"/>
                                    <xsl:value-of select="translate(peci:Government_ID[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0],$removeChars,'')"/>
                                </xsl:element>
                            </xsl:if>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Government_ID_Type">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Government_ID">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:for-each>
                        <!-- Other Identifier Mapping -->
                        <xsl:for-each select="peci:Other_Identifier">
                            <xsl:variable name="otherID">
                                <xsl:call-template name="templateNationalIDType">
                                    <xsl:with-param name="NationalIDType" select="peci:Custom_ID_Type"/>
                                </xsl:call-template>
                            </xsl:variable>
                            <xsl:if test="string-length($otherID) = 0">
                                <xsl:element name="nga:AlternateID">
                                    <xsl:attribute name="Type" select="peci:Custom_ID_Type"/>
                                    <xsl:value-of select="translate(peci:Custom_ID[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0],$removeChars,'')"/>
                                </xsl:element>
                            </xsl:if>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Custom_ID_Type">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Custom_ID">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:for-each>
                    </nga:AlternateIdentifiers>
                </xsl:when>
                <xsl:otherwise>
                    <nga:AlternateIdentifiers>
                        <xsl:for-each select="../peci:National_Identifier[@*[local-name() = $operation]]">                               
                            <xsl:variable name="alternateID">
                                <xsl:call-template name="templateNationalIDType">
                                    <xsl:with-param name="NationalIDType" select="peci:National_ID_Type"/>
                                </xsl:call-template>
                            </xsl:variable>
                            <xsl:if test="string-length($alternateID) = 0">
                                <xsl:element name="nga:AlternateID">
                                    <xsl:attribute name="Type" select="peci:National_ID_Type"/>
                                    <xsl:value-of select="translate(peci:National_ID[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0],$removeChars,'')"/>
                                </xsl:element>
                            </xsl:if>              
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:National_ID_Type">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>         
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:National_ID">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>                    
                        </xsl:for-each>            
                        <!-- Government Identifier Mapping -->
                        <xsl:for-each select="../peci:Government_Identifier[@*[local-name() = $operation]]">
                            <xsl:variable name="governmentID">
                                <xsl:call-template name="templateNationalIDType">
                                    <xsl:with-param name="NationalIDType" select="peci:Government_ID_Type"/>
                                </xsl:call-template>
                            </xsl:variable>
                            <xsl:if test="string-length($governmentID) = 0">
                                <xsl:element name="nga:AlternateID">
                                    <xsl:attribute name="Type" select="peci:Government_ID_Type"/>
                                    <xsl:value-of select="translate(peci:Government_ID[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0],$removeChars,'')"/>
                                </xsl:element>
                            </xsl:if>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Government_ID_Type">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Government_ID">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:for-each>
                        <!-- Other Identifier Mapping -->
                        <xsl:for-each select="../peci:Other_Identifier[@*[local-name() = $operation]]">
                            <xsl:variable name="otherID">
                                <xsl:call-template name="templateNationalIDType">
                                    <xsl:with-param name="NationalIDType" select="peci:Custom_ID_Type"/>
                                </xsl:call-template>
                            </xsl:variable>
                            <xsl:if test="string-length($otherID) = 0">
                                <xsl:element name="nga:AlternateID">
                                    <xsl:attribute name="Type" select="peci:Custom_ID_Type"/>
                                    <xsl:value-of select="translate(peci:Custom_ID[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0],$removeChars,'')"/>
                                </xsl:element>
                            </xsl:if>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Custom_ID_Type">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:call-template name="usedPECIData">
                                <xsl:with-param name="xpath">
                                    <xsl:for-each select="peci:Custom_ID">
                                        <xsl:call-template name="print-field-xpath"/> 
                                    </xsl:for-each>                       
                                </xsl:with-param>
                            </xsl:call-template>
                        </xsl:for-each>
                    </nga:AlternateIdentifiers>                
                </xsl:otherwise>
            </xsl:choose>            
        </xsl:if>
    </xsl:template>   
    
    <!--    Alternate Description Template      -->
    <xsl:template name="nga:AlternateDescriptions">
        <xsl:param name="effectiveMomentDate"/>
        <xsl:if test="peci:Job_Change_Reason[@*[local-name()]] or ../peci:Compensation[@*[local-name()]][not(peci:Position_End_Date)]/peci:Compensation_Change_Reason
            or string-length(../peci:Position/ptdf:PositionHomeOrHost) > 0">
            <nga:AlternateDescriptions>
                <xsl:attribute name="validFrom" select="$effectiveMomentDate"/>
                <xsl:if test="peci:Job_Change_Reason">
                    <nga:Description>
                        <xsl:attribute name="Type" select="'JobChangeReason'"/>
                        <xsl:value-of select="peci:Job_Change_Reason[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                    </nga:Description>
                </xsl:if>
                <xsl:for-each select="../peci:Compensation[@*[local-name()]][not(peci:Position_End_Date)]">
                    <xsl:if test="string-length(peci:Compensation_Change_Reason) > 0">
                        <nga:Description>
                            <xsl:attribute name="Type" select="'CompensationChangeReason'"/>
                            <xsl:value-of select="../peci:Compensation[@*[local-name()]][not(peci:Position_End_Date)]/peci:Compensation_Change_Reason[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                        </nga:Description>
                    </xsl:if>
                </xsl:for-each>
                <xsl:if test="string-length(../peci:Position[not(peci:Position_End_Date)]/ptdf:PositionHomeOrHost) > 0">
                    <nga:Description>
                        <xsl:attribute name="Type" select="'GAStatus'"/>
                        <xsl:value-of select="../peci:Position[not(peci:Position_End_Date)]/ptdf:PositionHomeOrHost[@*[local-name() != 'isDeleted'] or string-length(@*[local-name()]) = 0]"/>
                    </nga:Description>
                </xsl:if>
            </nga:AlternateDescriptions>
        </xsl:if>
    </xsl:template>
    
    <xsl:template name="nga:PayServEmpTimeElements">
        <xsl:param name="tableAbsenceType"/>
        <xsl:param name="tableAbsenceID"/>
        <xsl:param name="bodType"/>        
        <nga:TimeElement>
            <xsl:variable name="startDate" select="substring(peci:Leave_Start_Date,1,10)"/>
            <xsl:if test="$startDate">
                <xsl:attribute name="validFrom" select="$startDate"/>                
            </xsl:if>    
            <xsl:choose>
                <xsl:when test="$bodType = ('LOATimeOff','RFLTimeOffDelete')">
                    <xsl:attribute name="validTo" select="xs:date($startDate) + xs:yearMonthDuration('P1Y')"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:attribute name="validTo" select="substring(peci:Leave_End_Date,1,10)"/>
                </xsl:otherwise>
            </xsl:choose>      
            <hr:ID>
                <xsl:choose>
                    <xsl:when test="string-length(normalize-space($tableAbsenceID)) > 0">
                        <xsl:value-of select="$tableAbsenceID"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="'DUMMY'"/>
                    </xsl:otherwise>
                </xsl:choose>
            </hr:ID>
            <nga:AbsenceReason>
                <xsl:choose>
                    <xsl:when test="string-length(normalize-space($tableAbsenceType)) > 0">
                        <xsl:value-of select="$tableAbsenceType"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="'DUMMY'"/>
                    </xsl:otherwise>
                </xsl:choose>
            </nga:AbsenceReason>
            <xsl:if test="$startDate">
                <nga:FreeFormEffectivePeriod>
                    <hr:StartDate>
                        <hr:FormattedDateTime>
                            <xsl:value-of select="$startDate"/>
                        </hr:FormattedDateTime>
                    </hr:StartDate>
                    <hr:EndDate>
                        <hr:FormattedDateTime>
                            <xsl:choose>
                                <xsl:when test="$bodType = ('LOATimeOff','RFLTimeOffDelete')">
                                    <xsl:value-of select ="xs:date($startDate) + xs:yearMonthDuration('P1Y')"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="substring(peci:Leave_End_Date,1,10)"/>
                                </xsl:otherwise>
                            </xsl:choose>         
                        </hr:FormattedDateTime>
                    </hr:EndDate>
                </nga:FreeFormEffectivePeriod>
            </xsl:if>
        </nga:TimeElement>
    </xsl:template>
    
    <xsl:template name="nga:PayServEmpTimeOffRejections">        
        <hr:IndicativeEmployment>
            <hr:EmploymentLifecycle>
                <hr:Leave>
                    <hr:LeaveReasonCode>
                        <xsl:value-of select="peci:Leave_of_Absence_Type"/>
                    </hr:LeaveReasonCode>
                </hr:Leave>
            </hr:EmploymentLifecycle>
        </hr:IndicativeEmployment>
    </xsl:template>
    
    <xsl:template name="nga:PayServEmpPositionRejections">        
        <nga:Comments>Multiple active positions in the same pay group for the same employee is not allowed. 
            Please remove the extra position(s) in Workday or move the extra position(s) to other pay group(s) in Workday.</nga:Comments>     
    </xsl:template>
    
    <xsl:template name="timeOffAbsenceChecker">
        <xsl:param name="absenceType"/>
        <xsl:param name="lcc"/>
        <xsl:if test="count(//CLUBBEDXML/CustomerConfig/Rows[LCC = $lcc and MAPPING = 'CONVERT_LEAVE_TO_TIME_OFF' and KEY = $absenceType]/KEY) > 0">
            <xsl:value-of select="'Y'"/>
        </xsl:if>
    </xsl:template>
    
    <xsl:template name="timeOffAbsenceKey">
        <xsl:param name="absenceType"/>
        <xsl:param name="lcc"/>
        <xsl:value-of select="//CLUBBEDXML/CustomerConfig/Rows[LCC = $lcc and MAPPING = 'CONVERT_LEAVE_TO_TIME_OFF' and KEY = $absenceType]/KEY"/>       
    </xsl:template>
  
    <xsl:template name="timeOffAbsenceType">
        <xsl:param name="absenceType"/>
        <xsl:param name="lcc"/>
        <xsl:value-of select="//CLUBBEDXML/CustomerConfig/Rows[LCC = $lcc and MAPPING = 'CONVERT_LEAVE_TO_TIME_OFF' and KEY = $absenceType]/DESCRIPTION"/>       
    </xsl:template>
    
    <xsl:template name="timeOffAbsenceID">
        <xsl:param name="absenceType"/>
        <xsl:param name="lcc"/>
        <xsl:value-of select="//CLUBBEDXML/CustomerConfig/Rows[LCC = $lcc and MAPPING = 'CONVERT_LEAVE_TO_TIME_OFF' and KEY = $absenceType]/VALUE"/>       
    </xsl:template>
    
    <xsl:template name="percentageFormatting">
        <xsl:param name="value"/>
        <xsl:variable name="amount">
            <xsl:value-of select="xs:decimal($value) * 100"/>
        </xsl:variable>
        <xsl:variable name="percentageOnAmount">
            <xsl:choose>
                <xsl:when test="contains($amount,'.')">
                    <xsl:choose>
                        <xsl:when test="string-length(substring-after($amount,'.')) = 1">
                            <xsl:value-of select="concat($amount,'0')"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="$amount"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:when>
                <xsl:when test="not(contains($amount,'.'))">
                    <xsl:value-of select="format-number(xs:decimal($amount), '0.00')"/>
                </xsl:when>
            </xsl:choose>
        </xsl:variable>
        <xsl:value-of select="$percentageOnAmount"/>
    </xsl:template>
    
    <xsl:template name="templateFTE">
        <xsl:param name="FullTimeEq"/>
        <xsl:variable name="computeFullTimeEq" select="format-number($FullTimeEq,'#0.0000')"/>
        <xsl:choose>
            <xsl:when test="ends-with($computeFullTimeEq,'0')">
                <xsl:value-of select="substring($computeFullTimeEq,1,5)"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$computeFullTimeEq"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <xsl:template name="usedPECIData">     
        <xsl:param name="xpath"/>
        <xsl:if test="string-length($xpath) > 0">
            <xsl:variable name="xpath" select="replace($xpath,'/CLUBBEDXML','')"/>
            <saxon:assign name="usedPECIElements">
                <xsl:copy-of select="$usedPECIElements"/>
                <paths>
                    <xsl:copy-of select="$xpath"/>
                </paths>
            </saxon:assign>
        </xsl:if>
    </xsl:template>

    <xsl:template name="templateGender">
        <xsl:param name="GenderCode"/>
        <xsl:variable name="Gender">
            <xsl:choose>
                <xsl:when test="$GenderCode = '1'">
                    <xsl:value-of select="'Male'"/>
                </xsl:when>
                <xsl:when test="$GenderCode = '2'">
                    <xsl:value-of select="'Female'"/>
                </xsl:when>
                <xsl:when test="$GenderCode = 'Male'">
                    <xsl:value-of select="'Male'"/>
                </xsl:when>
                <xsl:when test="$GenderCode = 'Female'">
                    <xsl:value-of select="'Female'"/>
                </xsl:when>
                <xsl:when test="$GenderCode = 'Not_Declared'">
                    <xsl:value-of select="'NotSpecified'"/>
                </xsl:when>
                <xsl:when test="$GenderCode = 'Not_Known'">
                    <xsl:value-of select="'NotKnown'"/>
                </xsl:when>
                <xsl:when test="$GenderCode > '2'">
                    <xsl:value-of select="'NotKnown'"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="'NotSpecified'"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:value-of select="$Gender"/>
    </xsl:template>
    
    <xsl:template name="templateMaritalStatus">
        <xsl:param name="Marital_Status"/>
        <xsl:value-of
            select="//TranslationTable/Rows[MAPPING = 'MaritalStatus' and KEY = $Marital_Status]/VALUE"
        />
    </xsl:template>
    
    <xsl:template name="templatePaymentType">
        <xsl:param name="Country"/>
        <xsl:param name="PaymentType"/>
        <xsl:variable name="withCountry">
            <xsl:if test="string-length($Country) > 0">
                <xsl:value-of select="//TranslationTable/Rows[MAPPING = 'PaymentType' and KEY = $PaymentType and COUNTRY = $Country]/VALUE"/>
            </xsl:if>
        </xsl:variable>        
        <xsl:choose>
            <xsl:when test="string-length($withCountry) > 0">
                <xsl:value-of select="$withCountry"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="//TranslationTable/Rows[MAPPING = 'PaymentType' and KEY = $PaymentType and COUNTRY = '*']/VALUE"/>
            </xsl:otherwise>
        </xsl:choose>      
    </xsl:template>
    
    <xsl:template name="templateNationalIDType">
        <xsl:param name="NationalIDType"/>
        <xsl:value-of select="//TranslationTable/Rows[MAPPING = 'NationalID' and KEY = $NationalIDType]/VALUE/text()"/>
    </xsl:template>
    
    <xsl:template name="insertDateWithDash">
        <xsl:param name="date"/>
        <xsl:variable name="dateVar">
            <xsl:choose>
                <xsl:when test="contains($date,&apos;T&apos;)">
                    <xsl:value-of select="substring-before($date,&apos;T&apos;)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$date"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="dateVarWithDash">
            <xsl:choose>
                <xsl:when
                    test="not(contains($dateVar,&apos;-&apos;) ) and string-length($dateVar) = 8 ">
                    <xsl:value-of
                        select="concat( substring($dateVar,1,4),&apos;-&apos;,substring($dateVar,5,2),&apos;-&apos;,substring($dateVar,7,2)  )"
                    />
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$dateVar"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:value-of select="$dateVarWithDash"/>
    </xsl:template>
    
    <xsl:template name="templatePrefSaluteCode">
        <xsl:param name="prefSaluteCode"/>
        <xsl:value-of select="//TranslationTable/Rows[MAPPING = 'TitleSuffix' and DESCRIPTION ='PrefSaluteCode']/VALUE[text() = upper-case($prefSaluteCode)]/text()"/>
    </xsl:template>
    
    <xsl:template name="templateQualAffixCode">
        <xsl:param name="qualAffixCode"/>
        <xsl:value-of select="//TranslationTable/Rows[MAPPING = 'TitleSuffix' and DESCRIPTION ='QualAffixCode']/VALUE[text() = upper-case($qualAffixCode)]/text()"/>
    </xsl:template>
    
    <xsl:template name="templateTitleAffixCode">
        <xsl:param name="titleAffixCode"/>
        <xsl:value-of select="//TranslationTable/Rows[MAPPING = 'TitleSuffix' and DESCRIPTION ='TitleAffixCode']/VALUE[text() = upper-case($titleAffixCode)]/text()"/>
    </xsl:template>
    
    <xsl:template name="templateGenAffixCode">
        <xsl:param name="genAffixCode"/>
        <xsl:value-of select="//TranslationTable/Rows[MAPPING = 'TitleSuffix' and DESCRIPTION ='GenAffixCode']/VALUE[text() = upper-case($genAffixCode)]/text()"/>
    </xsl:template>
    
    <xsl:template name="templateAddQualAffixCode">
        <xsl:param name="addQualAffixCode"/>
        <xsl:value-of select="//TranslationTable/Rows[MAPPING = 'TitleSuffix' and DESCRIPTION ='AddQualAffixCode']/VALUE[text() = upper-case($addQualAffixCode)]/text()"/>
    </xsl:template>
    
    <xsl:template name="templateRelatedPerson">
        <xsl:param name="relatedPerson"/>
        <xsl:value-of select="//TranslationTable/Rows[MAPPING = 'RelatedPerson' and KEY = $relatedPerson]/VALUE"/>
    </xsl:template>
    
    <xsl:template name="templateRemoveEndComma">
        <xsl:param name="stringValue"/>
        <xsl:variable name="tokenizeValue">
            <xsl:value-of select="tokenize($stringValue,',')"/>
        </xsl:variable>
        <xsl:variable name="tempValue">
            <xsl:for-each select="$tokenizeValue">
                <xsl:if test="string-length(.) > 0">
                    <xsl:value-of select="concat(normalize-space(.),',')"/>
                </xsl:if>            
            </xsl:for-each>
        </xsl:variable>      
        <xsl:variable name="stringLength" select="string-length($tempValue)"/>
        <xsl:variable name="checkEndChar">
            <xsl:value-of select="substring($tempValue,$stringLength,1)"/>
        </xsl:variable>  
        <xsl:choose>
            <xsl:when test="$checkEndChar = ','">
                <xsl:value-of select="substring($tempValue,1,$stringLength -1)"/>
            </xsl:when>          
            <xsl:otherwise>
                <xsl:value-of select="$tempValue"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <xsl:template name="templateLanguageCode">
        <xsl:param name="language"/>
        <xsl:value-of select="/CLUBBEDXML/TranslationTable/Rows[MAPPING = 'LanguageCode' and KEY = $language]/VALUE"/>
    </xsl:template>
    
    <xsl:template name="print-field-xpath">
        <xsl:for-each select="ancestor-or-self::*">
            <xsl:value-of select="concat('/',name())"/>
            <xsl:if
                test="(preceding-sibling::*|following-sibling::*)[local-name()=local-name(current())]">
                <xsl:value-of
                    select="concat('[',count(preceding-sibling::*[local-name()=local-name(current())])+1,']')"
                />
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
        
        
</xsl:stylesheet>
